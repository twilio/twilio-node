'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('DomainCerts', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid update request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var opts = {'tlsCert': 'tls_cert'};
      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update(opts);
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var domainSid = 'DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://messaging.twilio.com/v1/LinkShortening/Domains/${domainSid}/Certificate`;

      var values = {'TlsCert': 'tls_cert', };
      holodeck.assertHasRequest(new Request({
          method: 'POST',
          url: url,
          data: values
      }));
    }
  );
  it('should generate valid update response',
    function(done) {
      var body = {
          'certificate_sid': 'CWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'domain_name': 'https://api.example.com',
          'domain_sid': 'DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_expires': '2021-02-06T18:02:04Z',
          'date_created': '2021-02-06T18:02:04Z',
          'date_updated': '2021-02-06T18:02:04Z',
          'url': 'https://messaging.twilio.com/v1/LinkShortening/Domains/DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Certificate',
          'validated': true
      };

      holodeck.mock(new Response(200, body));

      var opts = {'tlsCert': 'tls_cert'};
      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update(opts);
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid create response',
    function(done) {
      var body = {
          'certificate_sid': 'CWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'domain_name': 'https://api.example.com',
          'domain_sid': 'DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_expires': '2021-02-06T18:02:04Z',
          'date_created': '2021-02-06T18:02:04Z',
          'date_updated': '2021-02-06T18:02:04Z',
          'url': 'https://messaging.twilio.com/v1/LinkShortening/Domains/DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Certificate',
          'validated': true
      };

      holodeck.mock(new Response(200, body));

      var opts = {'tlsCert': 'tls_cert'};
      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update(opts);
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var domainSid = 'DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://messaging.twilio.com/v1/LinkShortening/Domains/${domainSid}/Certificate`;

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch response',
    function(done) {
      var body = {
          'certificate_sid': 'CWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'domain_name': 'https://api.example.com',
          'domain_sid': 'DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_expires': '2021-02-06T18:02:04Z',
          'date_created': '2021-02-06T18:02:04Z',
          'date_updated': '2021-02-06T18:02:04Z',
          'url': 'https://messaging.twilio.com/v1/LinkShortening/Domains/DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Certificate',
          'validated': true
      };

      holodeck.mock(new Response(200, body));

      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid remove request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var domainSid = 'DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://messaging.twilio.com/v1/LinkShortening/Domains/${domainSid}/Certificate`;

      holodeck.assertHasRequest(new Request({
        method: 'DELETE',
        url: url
      }));
    }
  );
  it('should generate valid delete response',
    function(done) {
      var body = null;

      holodeck.mock(new Response(204, body));

      var promise = client.messaging.v1.domainCerts('DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function(response) {
        expect(response).toBe(true);
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
