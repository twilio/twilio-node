'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('Notification', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid create request',
    function(done) {
      holodeck.mock(new Response(500, '{}'));

      var promise = client.notify.v1.services('ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
                                    .notifications.create();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var serviceSid = 'ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://notify.twilio.com/v1/Services/${serviceSid}/Notifications`;

      holodeck.assertHasRequest(new Request({
        method: 'POST',
        url: url
      }));
    }
  );
  it('should generate valid create response',
    function(done) {
      var body = JSON.stringify({
          'sid': 'NOb8021351170b4e1286adaac3fdd6d082',
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'service_sid': 'IS699b53e02da45a1ba9d13b7d7d2766af',
          'date_created': '2016-03-24T23:42:28Z',
          'identities': [
              'jing'
          ],
          'tags': [],
          'segments': [],
          'priority': 'high',
          'ttl': 2419200,
          'title': 'test',
          'body': 'body',
          'sound': null,
          'action': null,
          'data': null,
          'apn': null,
          'fcm': null,
          'gcm': null,
          'sms': null,
          'facebook_messenger': null,
          'alexa': null
      });

      holodeck.mock(new Response(201, body));

      var promise = client.notify.v1.services('ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
                                    .notifications.create();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid create_direct_notification response',
    function(done) {
      var body = JSON.stringify({
          'sid': 'NOb8021351170b4e1286adaac3fdd6d082',
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'service_sid': 'IS699b53e02da45a1ba9d13b7d7d2766af',
          'date_created': '2016-03-24T23:42:28Z',
          'identities': [],
          'tags': [],
          'segments': [],
          'priority': 'high',
          'ttl': 2419200,
          'title': null,
          'body': 'body',
          'sound': null,
          'action': null,
          'data': null,
          'apn': null,
          'fcm': null,
          'gcm': null,
          'sms': null,
          'facebook_messenger': null,
          'alexa': null
      });

      holodeck.mock(new Response(201, body));

      var promise = client.notify.v1.services('ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
                                    .notifications.create();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
