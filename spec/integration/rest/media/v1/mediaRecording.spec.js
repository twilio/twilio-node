'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('MediaRecording', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid remove request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.media.v1.mediaRecording('KVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'KVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://media.twilio.com/v1/MediaRecordings/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'DELETE',
        url: url
      }));
    }
  );
  it('should generate valid delete response',
    function(done) {
      var body = null;

      holodeck.mock(new Response(204, body));

      var promise = client.media.v1.mediaRecording('KVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function(response) {
        expect(response).toBe(true);
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.media.v1.mediaRecording('KVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'KVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://media.twilio.com/v1/MediaRecordings/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch response',
    function(done) {
      var body = {
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'bitrate': 1000,
          'date_created': '2015-07-30T20:00:00Z',
          'date_updated': '2015-07-30T20:00:00Z',
          'duration': 2147483647,
          'format': 'mp4',
          'links': {
              'media': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/Media',
              'timed_metadata': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/TimedMetadata'
          },
          'processor_sid': 'ZXcafebabecafebabecafebabecafebabe',
          'resolution': '640x480',
          'source_sid': 'RMcafebabecafebabecafebabecafebabe',
          'sid': 'KVcafebabecafebabecafebabecafebabe',
          'size': 2147483648,
          'status': 'completed',
          'status_callback': 'https://www.example.com',
          'status_callback_method': 'POST',
          'url': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe'
      };

      holodeck.mock(new Response(200, body));

      var promise = client.media.v1.mediaRecording('KVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should treat the first each arg as a callback',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'media_recordings'
          },
          'media_recordings': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'bitrate': 1000,
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:00:00Z',
                  'duration': 1000,
                  'format': 'mp4',
                  'links': {
                      'media': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/Media',
                      'timed_metadata': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/TimedMetadata'
                  },
                  'processor_sid': 'ZXcafebabecafebabecafebabecafebabe',
                  'resolution': '640x480',
                  'source_sid': 'RMcafebabecafebabecafebabecafebabe',
                  'sid': 'KVcafebabecafebabecafebabecafebabe',
                  'size': 1000,
                  'status': 'completed',
                  'status_callback': 'https://www.example.com',
                  'status_callback_method': 'POST',
                  'url': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe'
              }
          ]
      };
      holodeck.mock(new Response(200, body));
      client.media.v1.mediaRecording.each(() => done());
    }
  );
  it('should treat the second arg as a callback',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'media_recordings'
          },
          'media_recordings': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'bitrate': 1000,
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:00:00Z',
                  'duration': 1000,
                  'format': 'mp4',
                  'links': {
                      'media': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/Media',
                      'timed_metadata': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/TimedMetadata'
                  },
                  'processor_sid': 'ZXcafebabecafebabecafebabecafebabe',
                  'resolution': '640x480',
                  'source_sid': 'RMcafebabecafebabecafebabecafebabe',
                  'sid': 'KVcafebabecafebabecafebabecafebabe',
                  'size': 1000,
                  'status': 'completed',
                  'status_callback': 'https://www.example.com',
                  'status_callback_method': 'POST',
                  'url': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe'
              }
          ]
      };
      holodeck.mock(new Response(200, body));
      client.media.v1.mediaRecording.each({pageSize: 20}, () => done());
      holodeck.assertHasRequest(new Request({
          method: 'GET',
          url: 'https://media.twilio.com/v1/MediaRecordings',
          params: {PageSize: 20},
      }));
    }
  );
  it('should find the callback in the opts object',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'media_recordings'
          },
          'media_recordings': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'bitrate': 1000,
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:00:00Z',
                  'duration': 1000,
                  'format': 'mp4',
                  'links': {
                      'media': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/Media',
                      'timed_metadata': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/TimedMetadata'
                  },
                  'processor_sid': 'ZXcafebabecafebabecafebabecafebabe',
                  'resolution': '640x480',
                  'source_sid': 'RMcafebabecafebabecafebabecafebabe',
                  'sid': 'KVcafebabecafebabecafebabecafebabe',
                  'size': 1000,
                  'status': 'completed',
                  'status_callback': 'https://www.example.com',
                  'status_callback_method': 'POST',
                  'url': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe'
              }
          ]
      };
      holodeck.mock(new Response(200, body));
      client.media.v1.mediaRecording.each({callback: () => done()}, () => fail('wrong callback!'));
    }
  );
  it('should generate valid list request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.media.v1.mediaRecording.list();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://media.twilio.com/v1/MediaRecordings';

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid read_empty response',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://media.twilio.com/v1/MediaRecordings?Status=processing&Order=asc&PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://media.twilio.com/v1/MediaRecordings?Status=processing&Order=asc&PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'media_recordings'
          },
          'media_recordings': []
      };

      holodeck.mock(new Response(200, body));

      var promise = client.media.v1.mediaRecording.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid read_items response',
    function(done) {
      var body = {
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://media.twilio.com/v1/MediaRecordings?Status=completed&Order=desc&PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'media_recordings'
          },
          'media_recordings': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'bitrate': 1000,
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:00:00Z',
                  'duration': 1000,
                  'format': 'mp4',
                  'links': {
                      'media': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/Media',
                      'timed_metadata': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe/TimedMetadata'
                  },
                  'processor_sid': 'ZXcafebabecafebabecafebabecafebabe',
                  'resolution': '640x480',
                  'source_sid': 'RMcafebabecafebabecafebabecafebabe',
                  'sid': 'KVcafebabecafebabecafebabecafebabe',
                  'size': 1000,
                  'status': 'completed',
                  'status_callback': 'https://www.example.com',
                  'status_callback_method': 'POST',
                  'url': 'https://media.twilio.com/v1/MediaRecordings/KVcafebabecafebabecafebabecafebabe'
              }
          ]
      };

      holodeck.mock(new Response(200, body));

      var promise = client.media.v1.mediaRecording.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
