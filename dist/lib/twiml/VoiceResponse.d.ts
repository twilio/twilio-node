/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
import { XMLElement } from "xmlbuilder";
import TwiML from "./TwiML";
declare class VoiceResponse extends TwiML {
    /**
     * <Response> TwiML for Voice
     */
    constructor();
    /**
     * <Connect> TwiML Verb
     *
     * @function connect
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    connect(attributes?: VoiceResponse.ConnectAttributes): VoiceResponse.Connect;
    /**
     * <Dial> TwiML Verb
     *
     * @function dial
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param number - Phone number to dial
     */
    dial(number?: string): VoiceResponse.Dial;
    dial(attributes?: VoiceResponse.DialAttributes, number?: string): VoiceResponse.Dial;
    /**
     * <Echo> TwiML Verb
     *
     * @function echo
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    echo(attributes?: object): VoiceResponse.Echo;
    /**
     * <Enqueue> TwiML Noun
     *
     * @function enqueue
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param name - Friendly name
     */
    enqueue(name?: string): VoiceResponse.Enqueue;
    enqueue(attributes?: VoiceResponse.EnqueueAttributes, name?: string): VoiceResponse.Enqueue;
    /**
     * <Gather> TwiML Verb
     *
     * @function gather
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    gather(attributes?: VoiceResponse.GatherAttributes): VoiceResponse.Gather;
    /**
     * <Hangup> TwiML Verb
     *
     * @function hangup
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    hangup(attributes?: object): VoiceResponse.Hangup;
    /**
     * <Leave> TwiML Verb
     *
     * @function leave
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    leave(attributes?: object): VoiceResponse.Leave;
    /**
     * <Pause> TwiML Verb
     *
     * @function pause
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    pause(attributes?: VoiceResponse.PauseAttributes): VoiceResponse.Pause;
    /**
     * <Pay> Twiml Verb
     *
     * @function pay
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    pay(attributes?: VoiceResponse.PayAttributes): VoiceResponse.Pay;
    /**
     * <Play> TwiML Verb
     *
     * @function play
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param url - Media URL
     */
    play(url?: string): VoiceResponse.Play;
    play(attributes?: VoiceResponse.PlayAttributes, url?: string): VoiceResponse.Play;
    /**
     * <Prompt> Twiml Verb
     *
     * @function prompt
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    prompt(attributes?: VoiceResponse.PromptAttributes): VoiceResponse.Prompt;
    /**
     * <Queue> TwiML Noun
     *
     * @function queue
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param name - Queue name
     */
    queue(name: string): VoiceResponse.Queue;
    queue(attributes: VoiceResponse.QueueAttributes, name: string): VoiceResponse.Queue;
    /**
     * <Record> TwiML Verb
     *
     * @function record
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    record(attributes?: VoiceResponse.RecordAttributes): VoiceResponse.Record;
    /**
     * <Redirect> TwiML Verb
     *
     * @function redirect
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param url - Redirect URL
     */
    redirect(url: string): VoiceResponse.Redirect;
    redirect(attributes: VoiceResponse.RedirectAttributes, url: string): VoiceResponse.Redirect;
    /**
     * <Refer> TwiML Verb
     *
     * @function refer
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    refer(attributes?: VoiceResponse.ReferAttributes): VoiceResponse.Refer;
    /**
     * <Reject> TwiML Verb
     *
     * @function reject
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    reject(attributes?: VoiceResponse.RejectAttributes): VoiceResponse.Reject;
    /**
     * <Say> TwiML Verb
     *
     * @function say
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param message - Message to say
     */
    say(message: string): VoiceResponse.Say;
    say(attributes: VoiceResponse.SayAttributes, message: string): VoiceResponse.Say;
    /**
     * <Sms> TwiML Noun
     *
     * @function sms
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     * @param message - Message body
     */
    sms(message: string): VoiceResponse.Sms;
    sms(attributes: VoiceResponse.SmsAttributes, message: string): VoiceResponse.Sms;
    /**
     * <Start> TwiML Verb
     *
     * @function start
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    start(attributes?: VoiceResponse.StartAttributes): VoiceResponse.Start;
    /**
     * <Stop> TwiML Verb
     *
     * @function stop
     * @memberof VoiceResponse
     *
     * @param attributes - TwiML attributes
     */
    stop(attributes?: object): VoiceResponse.Stop;
}
declare namespace VoiceResponse {
    type ClientEvent = "initiated" | "ringing" | "answered" | "completed";
    type ConferenceBeep = "true" | "false" | "onEnter" | "onExit";
    type ConferenceEvent = "start" | "end" | "join" | "leave" | "mute" | "hold" | "modify" | "speaker" | "announcement";
    type ConferenceJitterBufferSize = "large" | "medium" | "small" | "off";
    type ConferenceRecord = "do-not-record" | "record-from-start";
    type ConferenceRecordingEvent = "in-progress" | "completed" | "absent";
    type ConferenceRegion = "us1" | "ie1" | "sg1" | "br1" | "au1" | "jp1" | "de1";
    type ConferenceTrim = "trim-silence" | "do-not-trim";
    type ConversationEvent = "call-initiated" | "call-ringing" | "call-answered" | "call-completed";
    type ConversationRecord = "do-not-record" | "record-from-answer" | "record-from-ringing" | "record-from-answer-dual" | "record-from-ringing-dual" | "true" | "false";
    type ConversationRecordingEvent = "in-progress" | "completed" | "absent";
    type ConversationTrim = "trim-silence" | "do-not-trim";
    type DialRecord = "do-not-record" | "record-from-answer" | "record-from-ringing" | "record-from-answer-dual" | "record-from-ringing-dual";
    type DialRecordingEvent = "in-progress" | "completed" | "absent";
    type DialRecordingTrack = "both" | "inbound" | "outbound";
    type DialRingTone = "at" | "au" | "bg" | "br" | "be" | "ch" | "cl" | "cn" | "cz" | "de" | "dk" | "ee" | "es" | "fi" | "fr" | "gr" | "hu" | "il" | "in" | "it" | "lt" | "jp" | "mx" | "my" | "nl" | "no" | "nz" | "ph" | "pl" | "pt" | "ru" | "se" | "sg" | "th" | "uk" | "us" | "us-old" | "tw" | "ve" | "za";
    type DialTrim = "trim-silence" | "do-not-trim";
    type GatherInput = "dtmf" | "speech";
    type GatherLanguage = "af-ZA" | "am-ET" | "ar-AE" | "ar-BH" | "ar-DZ" | "ar-EG" | "ar-IL" | "ar-IQ" | "ar-JO" | "ar-KW" | "ar-LB" | "ar-MA" | "ar-OM" | "ar-PS" | "ar-QA" | "ar-SA" | "ar-TN" | "az-AZ" | "bg-BG" | "bn-BD" | "bn-IN" | "ca-ES" | "cs-CZ" | "da-DK" | "de-DE" | "el-GR" | "en-AU" | "en-CA" | "en-GB" | "en-GH" | "en-IE" | "en-IN" | "en-KE" | "en-NG" | "en-NZ" | "en-PH" | "en-SG" | "en-TZ" | "en-US" | "en-ZA" | "es-AR" | "es-BO" | "es-CL" | "es-CO" | "es-CR" | "es-DO" | "es-EC" | "es-ES" | "es-GT" | "es-HN" | "es-MX" | "es-NI" | "es-PA" | "es-PE" | "es-PR" | "es-PY" | "es-SV" | "es-US" | "es-UY" | "es-VE" | "et-EE" | "eu-ES" | "fa-IR" | "fi-FI" | "fil-PH" | "fr-CA" | "fr-FR" | "gl-ES" | "gu-IN" | "he-IL" | "hi-IN" | "hr-HR" | "hu-HU" | "hy-AM" | "id-ID" | "is-IS" | "it-IT" | "ja-JP" | "jv-ID" | "ka-GE" | "km-KH" | "kn-IN" | "ko-KR" | "lo-LA" | "lt-LT" | "lv-LV" | "mk-MK" | "ml-IN" | "mn-MN" | "mr-IN" | "ms-MY" | "my-MM" | "nar-IQ" | "nb-NO" | "ne-NP" | "nl-BE" | "nl-NL" | "pa-guru-IN" | "pl-PL" | "pt-BR" | "pt-PT" | "ro-RO" | "ru-RU" | "si-LK" | "sk-SK" | "sl-SI" | "sq-AL" | "sr-RS" | "su-ID" | "sv-SE" | "sw-KE" | "sw-TZ" | "ta-IN" | "ta-LK" | "ta-MY" | "ta-SG" | "te-IN" | "th-TH" | "tr-TR" | "uk-UA" | "ur-IN" | "ur-PK" | "uz-UZ" | "vi-VN" | "yue-Hant-HK" | "zh" | "cmn-Hans-CN" | "zh-TW" | "cmn-Hant-TW" | "zu-ZA";
    type GatherSpeechModel = "default" | "numbers_and_commands" | "phone_call" | "experimental_conversations" | "experimental_utterances";
    type NumberEvent = "initiated" | "ringing" | "answered" | "completed";
    type PayBankAccountType = "consumer-checking" | "consumer-savings" | "commercial-checking" | "commercial-savings";
    type PayInput = "dtmf";
    type PayLanguage = "de-DE" | "en-AU" | "en-CA" | "en-GB" | "en-IN" | "en-IE" | "en-NZ" | "en-PH" | "en-ZA" | "en-US" | "es-ES" | "es-US" | "fr-CA" | "fr-FR" | "it-IT";
    type PayPaymentMethod = "ach-debit" | "credit-card";
    type PayStatusCallbackMethod = "GET" | "POST";
    type PayTokenType = "one-time" | "reusable";
    type PayValidCardTypes = "visa" | "mastercard" | "amex" | "maestro" | "discover" | "optima" | "jcb" | "diners-club" | "enroute";
    type PromptCardType = "visa" | "mastercard" | "amex" | "maestro" | "discover" | "optima" | "jcb" | "diners-club" | "enroute";
    type PromptErrorType = "timeout" | "invalid-card-number" | "invalid-card-type" | "invalid-date" | "invalid-security-code" | "internal-error" | "input-matching-failed";
    type PromptFor = "payment-card-number" | "expiration-date" | "security-code" | "postal-code" | "payment-processing" | "bank-account-number" | "bank-routing-number";
    type RecordRecordingEvent = "in-progress" | "completed" | "absent";
    type RecordTrim = "trim-silence" | "do-not-trim";
    type RejectReason = "rejected" | "busy";
    type SayLanguage = "arb" | "ca-ES" | "cy-GB" | "da-DK" | "de-DE" | "de-AT" | "en-AU" | "en-CA" | "en-GB" | "en-GB-WLS" | "en-IN" | "en-NZ" | "en-ZA" | "en-US" | "es-ES" | "es-MX" | "es-US" | "fi-FI" | "fr-CA" | "fr-FR" | "hi-IN" | "is-IS" | "it-IT" | "ja-JP" | "ko-KR" | "nb-NO" | "nl-NL" | "pl-PL" | "pt-BR" | "pt-PT" | "ro-RO" | "ru-RU" | "sv-SE" | "tr-TR" | "zh-CN" | "zh-HK" | "zh-TW";
    type SayVoice = "man" | "woman" | "alice" | "Polly.Aditi" | "Polly.Amy" | "Polly.Astrid" | "Polly.Bianca" | "Polly.Brian" | "Polly.Camila" | "Polly.Carla" | "Polly.Carmen" | "Polly.Celine" | "Polly.Chantal" | "Polly.Conchita" | "Polly.Cristiano" | "Polly.Dora" | "Polly.Emma" | "Polly.Enrique" | "Polly.Ewa" | "Polly.Filiz" | "Polly.Geraint" | "Polly.Giorgio" | "Polly.Gwyneth" | "Polly.Hans" | "Polly.Ines" | "Polly.Ivy" | "Polly.Jacek" | "Polly.Jan" | "Polly.Joanna" | "Polly.Joey" | "Polly.Justin" | "Polly.Karl" | "Polly.Kendra" | "Polly.Kimberly" | "Polly.Lea" | "Polly.Liv" | "Polly.Lotte" | "Polly.Lucia" | "Polly.Lupe" | "Polly.Mads" | "Polly.Maja" | "Polly.Marlene" | "Polly.Mathieu" | "Polly.Matthew" | "Polly.Maxim" | "Polly.Mia" | "Polly.Miguel" | "Polly.Mizuki" | "Polly.Naja" | "Polly.Nicole" | "Polly.Penelope" | "Polly.Raveena" | "Polly.Ricardo" | "Polly.Ruben" | "Polly.Russell" | "Polly.Salli" | "Polly.Seoyeon" | "Polly.Takumi" | "Polly.Tatyana" | "Polly.Vicki" | "Polly.Vitoria" | "Polly.Zeina" | "Polly.Zhiyu" | "Polly.Amy-Neural" | "Polly.Aria-Neural" | "Polly.Arlet-Neural" | "Polly.Arthur-Neural" | "Polly.Ayanda-Neural" | "Polly.Bianca-Neural" | "Polly.Brian-Neural" | "Polly.Camila-Neural" | "Polly.Daniel-Neural" | "Polly.Emma-Neural" | "Polly.Gabrielle-Neural" | "Polly.Hannah-Neural" | "Polly.Ines-Neural" | "Polly.Ivy-Neural" | "Polly.Joanna-Neural" | "Polly.Joey-Neural" | "Polly.Justin-Neural" | "Polly.Kajal-Neural" | "Polly.Kendra-Neural" | "Polly.Kevin-Neural" | "Polly.Kimberly-Neural" | "Polly.Lea-Neural" | "Polly.Liam-Neural" | "Polly.Lucia-Neural" | "Polly.Lupe-Neural" | "Polly.Matthew-Neural" | "Polly.Mia-Neural" | "Polly.Olivia-Neural" | "Polly.Pedro-Neural" | "Polly.Salli-Neural" | "Polly.Seoyeon-Neural" | "Polly.Takumi-Neural" | "Polly.Vicki-Neural" | "Polly.Vitoria-Neural";
    type SipEvent = "initiated" | "ringing" | "answered" | "completed";
    type SiprecTrack = "inbound_track" | "outbound_track" | "both_tracks";
    type SsmlBreakStrength = "none" | "x-weak" | "weak" | "medium" | "strong" | "x-strong";
    type SsmlEmphasisLevel = "strong" | "moderate" | "reduced";
    type SsmlLangXmlLang = "arb" | "ca-ES" | "cmn-CN" | "cy-GB" | "da-DK" | "de-DE" | "de-AT" | "en-AU" | "en-GB" | "en-GB-WLS" | "en-IN" | "en-NZ" | "en-US" | "en-ZA" | "es-ES" | "es-MX" | "es-US" | "fr-CA" | "fr-FR" | "hi-IN" | "is-IS" | "it-IT" | "ja-JP" | "ko-KR" | "nb-NO" | "nl-NL" | "pl-PL" | "pt-BR" | "pt-PT" | "ro-RO" | "ru-RU" | "sv-SE" | "tr-TR" | "ar-AE" | "yue-CN" | "fi-FI";
    type SsmlPhonemeAlphabet = "ipa" | "x-sampa" | "x-amazon-jyutping" | "x-amazon-pinyin" | "x-amazon-pron-kana" | "x-amazon-yomigana";
    type SsmlSayAsFormat = "mdy" | "dmy" | "ymd" | "md" | "dm" | "ym" | "my" | "d" | "m" | "y" | "yyyymmdd";
    type SsmlSayAsInterpretAs = "characters" | "spell-out" | "cardinal" | "number" | "ordinal" | "digits" | "fraction" | "unit" | "date" | "time" | "address" | "expletive" | "telephone";
    type StreamStatusCallbackMethod = "GET" | "POST";
    type StreamTrack = "inbound_track" | "outbound_track" | "both_tracks";
    /**
     * Attributes to pass to connect
     *
     * @property action - Action URL
     * @property method - Action URL method
     */
    export interface ConnectAttributes {
        action?: string;
        method?: string;
    }
    /**
     * Attributes to pass to dial
     *
     * @property action - Action URL
     * @property answerOnBridge - Preserve the ringing behavior of the inbound call until the Dialed call picks up
     * @property callerId - Caller ID to display
     * @property hangupOnStar - Hangup call on star press
     * @property method - Action URL method
     * @property record - Record the call
     * @property recordingStatusCallback - Recording status callback URL
     * @property recordingStatusCallbackEvent - Recording status callback events
     * @property recordingStatusCallbackMethod - Recording status callback URL method
     * @property recordingTrack - To indicate which audio track should be recorded
     * @property referMethod - The HTTP method to use for the refer Webhook
     * @property referUrl - Webhook that will receive future SIP REFER requests
     * @property ringTone - Ringtone allows you to override the ringback tone that Twilio will play back to the caller while executing the Dial
     * @property sequential - Used to determine if child TwiML nouns should be dialed in order, one after the other (sequential) or dial all at once (parallel). Default is false, parallel
     * @property timeLimit - Max time length
     * @property timeout - Time to wait for answer
     * @property trim - Trim the recording
     */
    export interface DialAttributes {
        action?: string;
        answerOnBridge?: boolean;
        callerId?: string;
        hangupOnStar?: boolean;
        method?: string;
        record?: DialRecord;
        recordingStatusCallback?: string;
        recordingStatusCallbackEvent?: DialRecordingEvent[];
        recordingStatusCallbackMethod?: string;
        recordingTrack?: DialRecordingTrack;
        referMethod?: string;
        referUrl?: string;
        ringTone?: DialRingTone;
        sequential?: boolean;
        timeLimit?: number;
        timeout?: number;
        trim?: DialTrim;
    }
    /**
     * Attributes to pass to enqueue
     *
     * @property action - Action URL
     * @property maxQueueSize - Maximum size of queue
     * @property method - Action URL method
     * @property waitUrl - Wait URL
     * @property waitUrlMethod - Wait URL method
     * @property workflowSid - TaskRouter Workflow SID
     */
    export interface EnqueueAttributes {
        action?: string;
        maxQueueSize?: number;
        method?: string;
        waitUrl?: string;
        waitUrlMethod?: string;
        workflowSid?: string;
    }
    /**
     * Attributes to pass to gather
     *
     * @property action - Action URL
     * @property actionOnEmptyResult - Force webhook to the action URL event if there is no input
     * @property bargeIn - Stop playing media upon speech
     * @property debug - Allow debug for gather
     * @property enhanced - Use enhanced speech model
     * @property finishOnKey - Finish gather on key
     * @property hints - Speech recognition hints
     * @property input - Input type Twilio should accept
     * @property language - Language to use
     * @property maxSpeechTime - Max allowed time for speech input
     * @property method - Action URL method
     * @property numDigits - Number of digits to collect
     * @property partialResultCallback - Partial result callback URL
     * @property partialResultCallbackMethod - Partial result callback URL method
     * @property profanityFilter - Profanity Filter on speech
     * @property speechModel - Specify the model that is best suited for your use case
     * @property speechTimeout - Time to wait to gather speech input and it should be either auto or a positive integer.
     * @property timeout - Time to wait to gather input
     */
    export interface GatherAttributes {
        action?: string;
        actionOnEmptyResult?: boolean;
        bargeIn?: boolean;
        debug?: boolean;
        enhanced?: boolean;
        finishOnKey?: string;
        hints?: string;
        input?: GatherInput[];
        language?: GatherLanguage;
        maxSpeechTime?: number;
        method?: string;
        numDigits?: number;
        partialResultCallback?: string;
        partialResultCallbackMethod?: string;
        profanityFilter?: boolean;
        speechModel?: GatherSpeechModel;
        speechTimeout?: string;
        timeout?: number;
    }
    /**
     * Attributes to pass to pause
     *
     * @property length - Length in seconds to pause
     */
    export interface PauseAttributes {
        length?: number;
    }
    /**
     * Attributes to pass to play
     *
     * @property digits - Play DTMF tones for digits
     * @property loop - Times to loop media
     */
    export interface PlayAttributes {
        digits?: string;
        loop?: number;
    }
    /**
     * Attributes to pass to queue
     *
     * @property method - Action URL method
     * @property postWorkActivitySid - TaskRouter Activity SID
     * @property reservationSid - TaskRouter Reservation SID
     * @property url - Action URL
     */
    export interface QueueAttributes {
        method?: string;
        postWorkActivitySid?: string;
        reservationSid?: string;
        url?: string;
    }
    /**
     * Attributes to pass to record
     *
     * @property action - Action URL
     * @property finishOnKey - Finish recording on key
     * @property maxLength - Max time to record in seconds
     * @property method - Action URL method
     * @property playBeep - Play beep
     * @property recordingStatusCallback - Status callback URL
     * @property recordingStatusCallbackEvent - Recording status callback events
     * @property recordingStatusCallbackMethod - Status callback URL method
     * @property timeout - Timeout to begin recording
     * @property transcribe - Transcribe the recording
     * @property transcribeCallback - Transcribe callback URL
     * @property trim - Trim the recording
     */
    export interface RecordAttributes {
        action?: string;
        finishOnKey?: string;
        maxLength?: number;
        method?: string;
        playBeep?: boolean;
        recordingStatusCallback?: string;
        recordingStatusCallbackEvent?: RecordRecordingEvent[];
        recordingStatusCallbackMethod?: string;
        timeout?: number;
        transcribe?: boolean;
        transcribeCallback?: string;
        trim?: RecordTrim;
    }
    /**
     * Attributes to pass to redirect
     *
     * @property method - Redirect URL method
     */
    export interface RedirectAttributes {
        method?: string;
    }
    /**
     * Attributes to pass to reject
     *
     * @property reason - Rejection reason
     */
    export interface RejectAttributes {
        reason?: RejectReason;
    }
    /**
     * Attributes to pass to say
     *
     * @property language - Message language
     * @property loop - Times to loop message
     * @property voice - Voice to use
     */
    export interface SayAttributes {
        language?: SayLanguage;
        loop?: number;
        voice?: SayVoice;
    }
    /**
     * Attributes to pass to sms
     *
     * @property action - Action URL
     * @property from - Number to send message from
     * @property method - Action URL method
     * @property statusCallback - Status callback URL
     * @property to - Number to send message to
     */
    export interface SmsAttributes {
        action?: string;
        from?: string;
        method?: string;
        statusCallback?: string;
        to?: string;
    }
    /**
     * Attributes to pass to pay
     *
     * @property action - Action URL
     * @property bankAccountType - Bank account type for ach transactions. If set, payment method attribute must be provided and value should be set to ach-debit. defaults to consumer-checking
     * @property chargeAmount - Amount to process. If value is greater than 0 then make the payment else create a payment token
     * @property currency - Currency of the amount attribute
     * @property description - Details regarding the payment
     * @property input - Input type Twilio should accept
     * @property language - Language to use
     * @property maxAttempts - Maximum number of allowed retries when gathering input
     * @property minPostalCodeLength - Prompt for minimum postal code length
     * @property paymentConnector - Unique name for payment connector
     * @property paymentMethod - Payment method to be used. defaults to credit-card
     * @property postalCode - Prompt for postal code and it should be true/false or default postal code
     * @property securityCode - Prompt for security code
     * @property statusCallback - Status callback URL
     * @property statusCallbackMethod - Status callback method
     * @property timeout - Time to wait to gather input
     * @property tokenType - Type of token
     * @property validCardTypes - Comma separated accepted card types
     */
    export interface PayAttributes {
        action?: string;
        bankAccountType?: PayBankAccountType;
        chargeAmount?: string;
        currency?: string;
        description?: string;
        input?: PayInput;
        language?: PayLanguage;
        maxAttempts?: number;
        minPostalCodeLength?: number;
        paymentConnector?: string;
        paymentMethod?: PayPaymentMethod;
        postalCode?: string;
        securityCode?: boolean;
        statusCallback?: string;
        statusCallbackMethod?: PayStatusCallbackMethod;
        timeout?: number;
        tokenType?: PayTokenType;
        validCardTypes?: PayValidCardTypes[];
    }
    /**
     * Attributes to pass to prompt
     *
     * @property attempt - Current attempt count
     * @property cardType - Type of the credit card
     * @property errorType - Type of error
     * @property for - Name of the payment source data element
     * @property requireMatchingInputs - Require customer to input requested information twice and verify matching.
     */
    export interface PromptAttributes {
        attempt?: number[];
        cardType?: PromptCardType[];
        errorType?: PromptErrorType[];
        for?: PromptFor;
        requireMatchingInputs?: boolean;
    }
    /**
     * Attributes to pass to start
     *
     * @property action - Action URL
     * @property method - Action URL method
     */
    export interface StartAttributes {
        action?: string;
        method?: string;
    }
    /**
     * Attributes to pass to refer
     *
     * @property action - Action URL
     * @property method - Action URL method
     */
    export interface ReferAttributes {
        action?: string;
        method?: string;
    }
    /**
     * Attributes to pass to stream
     *
     * @property connectorName - Unique name for Stream Connector
     * @property name - Friendly name given to the Stream
     * @property statusCallback - Status Callback URL
     * @property statusCallbackMethod - Status Callback URL method
     * @property track - Track to be streamed to remote service
     * @property url - URL of the remote service where the Stream is routed
     */
    export interface StreamAttributes {
        connectorName?: string;
        name?: string;
        statusCallback?: string;
        statusCallbackMethod?: StreamStatusCallbackMethod;
        track?: StreamTrack;
        url?: string;
    }
    /**
     * Attributes to pass to siprec
     *
     * @property connectorName - Unique name for Connector
     * @property name - Friendly name given to SIPREC
     * @property track - Track to be streamed to remote service
     */
    export interface SiprecAttributes {
        connectorName?: string;
        name?: string;
        track?: SiprecTrack;
    }
    /**
     * Attributes to pass to parameter
     *
     * @property name - The name of the custom parameter
     * @property value - The value of the custom parameter
     */
    export interface ParameterAttributes {
        name?: string;
        value?: string;
    }
    /**
     * Attributes to pass to parameter
     *
     * @property name - The name of the custom parameter
     * @property value - The value of the custom parameter
     */
    export interface ParameterAttributes {
        name?: string;
        value?: string;
    }
    /**
     * Attributes to pass to stream
     *
     * @property connectorName - Unique name for Stream Connector
     * @property name - Friendly name given to the Stream
     * @property statusCallback - Status Callback URL
     * @property statusCallbackMethod - Status Callback URL method
     * @property track - Track to be streamed to remote service
     * @property url - URL of the remote service where the Stream is routed
     */
    export interface StreamAttributes {
        connectorName?: string;
        name?: string;
        statusCallback?: string;
        statusCallbackMethod?: StreamStatusCallbackMethod;
        track?: StreamTrack;
        url?: string;
    }
    /**
     * Attributes to pass to siprec
     *
     * @property connectorName - Unique name for Connector
     * @property name - Friendly name given to SIPREC
     * @property track - Track to be streamed to remote service
     */
    export interface SiprecAttributes {
        connectorName?: string;
        name?: string;
        track?: SiprecTrack;
    }
    /**
     * Attributes to pass to say
     *
     * @property language - Message language
     * @property loop - Times to loop message
     * @property voice - Voice to use
     */
    export interface SayAttributes {
        language?: SayLanguage;
        loop?: number;
        voice?: SayVoice;
    }
    /**
     * Attributes to pass to play
     *
     * @property digits - Play DTMF tones for digits
     * @property loop - Times to loop media
     */
    export interface PlayAttributes {
        digits?: string;
        loop?: number;
    }
    /**
     * Attributes to pass to pause
     *
     * @property length - Length in seconds to pause
     */
    export interface PauseAttributes {
        length?: number;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to lang
     *
     * @property xml:lang - Specify the language
     */
    export interface SsmlLangAttributes {
        "xml:lang"?: SsmlLangXmlLang;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to w
     *
     * @property role - Customize the pronunciation of words by specifying the word’s part of speech or alternate meaning
     */
    export interface SsmlWAttributes {
        role?: string;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to lang
     *
     * @property xml:lang - Specify the language
     */
    export interface SsmlLangAttributes {
        "xml:lang"?: SsmlLangXmlLang;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to w
     *
     * @property role - Customize the pronunciation of words by specifying the word’s part of speech or alternate meaning
     */
    export interface SsmlWAttributes {
        role?: string;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to lang
     *
     * @property xml:lang - Specify the language
     */
    export interface SsmlLangAttributes {
        "xml:lang"?: SsmlLangXmlLang;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to w
     *
     * @property role - Customize the pronunciation of words by specifying the word’s part of speech or alternate meaning
     */
    export interface SsmlWAttributes {
        role?: string;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to lang
     *
     * @property xml:lang - Specify the language
     */
    export interface SsmlLangAttributes {
        "xml:lang"?: SsmlLangXmlLang;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to w
     *
     * @property role - Customize the pronunciation of words by specifying the word’s part of speech or alternate meaning
     */
    export interface SsmlWAttributes {
        role?: string;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to lang
     *
     * @property xml:lang - Specify the language
     */
    export interface SsmlLangAttributes {
        "xml:lang"?: SsmlLangXmlLang;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to w
     *
     * @property role - Customize the pronunciation of words by specifying the word’s part of speech or alternate meaning
     */
    export interface SsmlWAttributes {
        role?: string;
    }
    /**
     * Attributes to pass to break_
     *
     * @property strength - Set a pause based on strength
     * @property time - Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
     */
    export interface SsmlBreakAttributes {
        strength?: SsmlBreakStrength;
        time?: string;
    }
    /**
     * Attributes to pass to emphasis
     *
     * @property level - Specify the degree of emphasis
     */
    export interface SsmlEmphasisAttributes {
        level?: SsmlEmphasisLevel;
    }
    /**
     * Attributes to pass to lang
     *
     * @property xml:lang - Specify the language
     */
    export interface SsmlLangAttributes {
        "xml:lang"?: SsmlLangXmlLang;
    }
    /**
     * Attributes to pass to phoneme
     *
     * @property alphabet - Specify the phonetic alphabet
     * @property ph - Specifiy the phonetic symbols for pronunciation
     */
    export interface SsmlPhonemeAttributes {
        alphabet?: SsmlPhonemeAlphabet;
        ph?: string;
    }
    /**
     * Attributes to pass to prosody
     *
     * @property pitch - Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
     * @property rate - Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
     * @property volume - Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
     */
    export interface SsmlProsodyAttributes {
        pitch?: string;
        rate?: string;
        volume?: string;
    }
    /**
     * Attributes to pass to sayAs
     *
     * @property format - Specify the format of the date when interpret-as is set to date
     * @property interpret-as - Specify the type of words are spoken
     */
    export interface SsmlSayAsAttributes {
        format?: SsmlSayAsFormat;
        "interpret-as"?: SsmlSayAsInterpretAs;
    }
    /**
     * Attributes to pass to sub
     *
     * @property alias - Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
     */
    export interface SsmlSubAttributes {
        alias?: string;
    }
    /**
     * Attributes to pass to w
     *
     * @property role - Customize the pronunciation of words by specifying the word’s part of speech or alternate meaning
     */
    export interface SsmlWAttributes {
        role?: string;
    }
    /**
     * Attributes to pass to prompt
     *
     * @property attempt - Current attempt count
     * @property cardType - Type of the credit card
     * @property errorType - Type of error
     * @property for - Name of the payment source data element
     * @property requireMatchingInputs - Require customer to input requested information twice and verify matching.
     */
    export interface PromptAttributes {
        attempt?: number[];
        cardType?: PromptCardType[];
        errorType?: PromptErrorType[];
        for?: PromptFor;
        requireMatchingInputs?: boolean;
    }
    /**
     * Attributes to pass to parameter
     *
     * @property name - The name of the custom parameter
     * @property value - The value of the custom parameter
     */
    export interface ParameterAttributes {
        name?: string;
        value?: string;
    }
    /**
     * Attributes to pass to say
     *
     * @property language - Message language
     * @property loop - Times to loop message
     * @property voice - Voice to use
     */
    export interface SayAttributes {
        language?: SayLanguage;
        loop?: number;
        voice?: SayVoice;
    }
    /**
     * Attributes to pass to pause
     *
     * @property length - Length in seconds to pause
     */
    export interface PauseAttributes {
        length?: number;
    }
    /**
     * Attributes to pass to play
     *
     * @property digits - Play DTMF tones for digits
     * @property loop - Times to loop media
     */
    export interface PlayAttributes {
        digits?: string;
        loop?: number;
    }
    /**
     * Attributes to pass to task
     *
     * @property priority - Task priority
     * @property timeout - Timeout associated with task
     */
    export interface TaskAttributes {
        priority?: number;
        timeout?: number;
    }
    /**
     * Attributes to pass to client
     *
     * @property method - Client URL Method
     * @property statusCallback - Status Callback URL
     * @property statusCallbackEvent - Events to trigger status callback
     * @property statusCallbackMethod - Status Callback URL Method
     * @property url - Client URL
     */
    export interface ClientAttributes {
        method?: string;
        statusCallback?: string;
        statusCallbackEvent?: ClientEvent[];
        statusCallbackMethod?: string;
        url?: string;
    }
    /**
     * Attributes to pass to conference
     *
     * @property beep - Play beep when joining
     * @property coach - Call coach
     * @property endConferenceOnExit - End the conferenceon exit
     * @property eventCallbackUrl - Event callback URL
     * @property jitterBufferSize - Size of jitter buffer for participant
     * @property maxParticipants - Maximum number of participants
     * @property muted - Join the conference muted
     * @property participantLabel - A label for participant
     * @property record - Record the conference
     * @property recordingStatusCallback - Recording status callback URL
     * @property recordingStatusCallbackEvent - Recording status callback events
     * @property recordingStatusCallbackMethod - Recording status callback URL method
     * @property region - Conference region
     * @property startConferenceOnEnter - Start the conference on enter
     * @property statusCallback - Status callback URL
     * @property statusCallbackEvent - Events to call status callback URL
     * @property statusCallbackMethod - Status callback URL method
     * @property trim - Trim the conference recording
     * @property waitMethod - Wait URL method
     * @property waitUrl - Wait URL
     */
    export interface ConferenceAttributes {
        beep?: ConferenceBeep;
        coach?: string;
        endConferenceOnExit?: boolean;
        eventCallbackUrl?: string;
        jitterBufferSize?: ConferenceJitterBufferSize;
        maxParticipants?: number;
        muted?: boolean;
        participantLabel?: string;
        record?: ConferenceRecord;
        recordingStatusCallback?: string;
        recordingStatusCallbackEvent?: ConferenceRecordingEvent[];
        recordingStatusCallbackMethod?: string;
        region?: ConferenceRegion;
        startConferenceOnEnter?: boolean;
        statusCallback?: string;
        statusCallbackEvent?: ConferenceEvent[];
        statusCallbackMethod?: string;
        trim?: ConferenceTrim;
        waitMethod?: string;
        waitUrl?: string;
    }
    /**
     * Attributes to pass to number
     *
     * @property amdStatusCallback - The URL we should call to send amd status information to your application
     * @property amdStatusCallbackMethod - HTTP Method to use with amd_status_callback
     * @property byoc - BYOC trunk SID (Beta)
     * @property machineDetection - Enable machine detection or end of greeting detection
     * @property machineDetectionSilenceTimeout - Number of milliseconds of initial silence
     * @property machineDetectionSpeechEndThreshold - Number of milliseconds of silence after speech activity
     * @property machineDetectionSpeechThreshold - Number of milliseconds for measuring stick for the length of the speech activity
     * @property machineDetectionTimeout - Number of seconds to wait for machine detection
     * @property method - TwiML URL method
     * @property sendDigits - DTMF tones to play when the call is answered
     * @property statusCallback - Status callback URL
     * @property statusCallbackEvent - Events to call status callback
     * @property statusCallbackMethod - Status callback URL method
     * @property url - TwiML URL
     */
    export interface NumberAttributes {
        amdStatusCallback?: string;
        amdStatusCallbackMethod?: string;
        byoc?: string;
        machineDetection?: string;
        machineDetectionSilenceTimeout?: number;
        machineDetectionSpeechEndThreshold?: number;
        machineDetectionSpeechThreshold?: number;
        machineDetectionTimeout?: number;
        method?: string;
        sendDigits?: string;
        statusCallback?: string;
        statusCallbackEvent?: NumberEvent[];
        statusCallbackMethod?: string;
        url?: string;
    }
    /**
     * Attributes to pass to queue
     *
     * @property method - Action URL method
     * @property postWorkActivitySid - TaskRouter Activity SID
     * @property reservationSid - TaskRouter Reservation SID
     * @property url - Action URL
     */
    export interface QueueAttributes {
        method?: string;
        postWorkActivitySid?: string;
        reservationSid?: string;
        url?: string;
    }
    /**
     * Attributes to pass to sip
     *
     * @property amdStatusCallback - The URL we should call to send amd status information to your application
     * @property amdStatusCallbackMethod - HTTP Method to use with amd_status_callback
     * @property machineDetection - Enable machine detection or end of greeting detection
     * @property machineDetectionSilenceTimeout - Number of milliseconds of initial silence
     * @property machineDetectionSpeechEndThreshold - Number of milliseconds of silence after speech activity
     * @property machineDetectionSpeechThreshold - Number of milliseconds for measuring stick for the length of the speech activity
     * @property machineDetectionTimeout - Number of seconds to wait for machine detection
     * @property method - Action URL method
     * @property password - SIP Password
     * @property statusCallback - Status callback URL
     * @property statusCallbackEvent - Status callback events
     * @property statusCallbackMethod - Status callback URL method
     * @property url - Action URL
     * @property username - SIP Username
     */
    export interface SipAttributes {
        amdStatusCallback?: string;
        amdStatusCallbackMethod?: string;
        machineDetection?: string;
        machineDetectionSilenceTimeout?: number;
        machineDetectionSpeechEndThreshold?: number;
        machineDetectionSpeechThreshold?: number;
        machineDetectionTimeout?: number;
        method?: string;
        password?: string;
        statusCallback?: string;
        statusCallbackEvent?: SipEvent[];
        statusCallbackMethod?: string;
        url?: string;
        username?: string;
    }
    /**
     * Attributes to pass to parameter
     *
     * @property name - The name of the custom parameter
     * @property value - The value of the custom parameter
     */
    export interface ParameterAttributes {
        name?: string;
        value?: string;
    }
    /**
     * Attributes to pass to room
     *
     * @property participantIdentity - Participant identity when connecting to the Room
     */
    export interface RoomAttributes {
        participantIdentity?: string;
    }
    /**
     * Attributes to pass to stream
     *
     * @property connectorName - Unique name for Stream Connector
     * @property name - Friendly name given to the Stream
     * @property statusCallback - Status Callback URL
     * @property statusCallbackMethod - Status Callback URL method
     * @property track - Track to be streamed to remote service
     * @property url - URL of the remote service where the Stream is routed
     */
    export interface StreamAttributes {
        connectorName?: string;
        name?: string;
        statusCallback?: string;
        statusCallbackMethod?: StreamStatusCallbackMethod;
        track?: StreamTrack;
        url?: string;
    }
    /**
     * Attributes to pass to virtualAgent
     *
     * @property connectorName - Defines the conversation profile Dialogflow needs to use
     * @property language - Language to be used by Dialogflow to transcribe speech
     * @property sentimentAnalysis - Whether sentiment analysis needs to be enabled or not
     * @property statusCallback - URL to post status callbacks from Twilio
     * @property statusCallbackMethod - HTTP method to use when requesting the status callback URL
     */
    export interface VirtualAgentAttributes {
        connectorName?: string;
        language?: string;
        sentimentAnalysis?: boolean;
        statusCallback?: string;
        statusCallbackMethod?: string;
    }
    /**
     * Attributes to pass to conversation
     *
     * @property inboundAutocreation - Inbound autocreation
     * @property inboundTimeout - Inbound timeout
     * @property method - TwiML URL method
     * @property record - Record
     * @property recordingStatusCallback - Recording status callback URL
     * @property recordingStatusCallbackEvent - Recording status callback events
     * @property recordingStatusCallbackMethod - Recording status callback URL method
     * @property routingAssignmentTimeout - Routing assignment timeout
     * @property serviceInstanceSid - Service instance Sid
     * @property statusCallback - Status callback URL
     * @property statusCallbackEvent - Events to call status callback URL
     * @property statusCallbackMethod - Status callback URL method
     * @property trim - Trim
     * @property url - TwiML URL
     */
    export interface ConversationAttributes {
        inboundAutocreation?: boolean;
        inboundTimeout?: number;
        method?: string;
        record?: ConversationRecord;
        recordingStatusCallback?: string;
        recordingStatusCallbackEvent?: ConversationRecordingEvent[];
        recordingStatusCallbackMethod?: string;
        routingAssignmentTimeout?: number;
        serviceInstanceSid?: string;
        statusCallback?: string;
        statusCallbackEvent?: ConversationEvent[];
        statusCallbackMethod?: string;
        trim?: ConversationTrim;
        url?: string;
    }
    /**
     * Attributes to pass to config
     *
     * @property name - The name of the custom config
     * @property value - The value of the custom config
     */
    export interface ConfigAttributes {
        name?: string;
        value?: string;
    }
    /**
     * Attributes to pass to parameter
     *
     * @property name - The name of the custom parameter
     * @property value - The value of the custom parameter
     */
    export interface ParameterAttributes {
        name?: string;
        value?: string;
    }
    export class Autopilot extends TwiML {
        autopilot: XMLElement;
        /**
         * <Autopilot> TwiML Noun
         */
        constructor(autopilot: XMLElement);
    }
    export class Client extends TwiML {
        client: XMLElement;
        /**
         * <Client> TwiML Noun
         */
        constructor(client: XMLElement);
        /**
         * <Identity> TwiML Noun
         *
         * @function identity
         * @memberof Client
         *
         * @param attributes - TwiML attributes
         * @param clientIdentity - Identity of the client to dial
         */
        identity(clientIdentity: string): VoiceResponse.Identity;
        identity(attributes: object, clientIdentity: string): VoiceResponse.Identity;
        /**
         * <Parameter> TwiML Noun
         *
         * @function parameter
         * @memberof Client
         *
         * @param attributes - TwiML attributes
         */
        parameter(attributes?: VoiceResponse.ParameterAttributes): VoiceResponse.Parameter;
    }
    export class Conference extends TwiML {
        conference: XMLElement;
        /**
         * <Conference> TwiML Noun
         */
        constructor(conference: XMLElement);
    }
    export class Config extends TwiML {
        config: XMLElement;
        /**
         * <Config> TwiML Noun
         */
        constructor(config: XMLElement);
    }
    export class Connect extends TwiML {
        connect: XMLElement;
        /**
         * <Connect> TwiML Verb
         */
        constructor(connect: XMLElement);
        /**
         * <Autopilot> TwiML Noun
         *
         * @function autopilot
         * @memberof Connect
         *
         * @param attributes - TwiML attributes
         * @param name - Autopilot assistant sid or unique name
         */
        autopilot(name: string): VoiceResponse.Autopilot;
        autopilot(attributes: object, name: string): VoiceResponse.Autopilot;
        /**
         * <Conversation> TwiML Noun
         *
         * @function conversation
         * @memberof Connect
         *
         * @param attributes - TwiML attributes
         */
        conversation(attributes?: VoiceResponse.ConversationAttributes): VoiceResponse.Conversation;
        /**
         * <Room> TwiML Noun
         *
         * @function room
         * @memberof Connect
         *
         * @param attributes - TwiML attributes
         * @param name - Room name
         */
        room(name: string): VoiceResponse.Room;
        room(attributes: VoiceResponse.RoomAttributes, name: string): VoiceResponse.Room;
        /**
         * <Stream> TwiML Noun
         *
         * @function stream
         * @memberof Connect
         *
         * @param attributes - TwiML attributes
         */
        stream(attributes?: VoiceResponse.StreamAttributes): VoiceResponse.Stream;
        /**
         * <VirtualAgent> TwiML Noun
         *
         * @function virtualAgent
         * @memberof Connect
         *
         * @param attributes - TwiML attributes
         */
        virtualAgent(attributes?: VoiceResponse.VirtualAgentAttributes): VoiceResponse.VirtualAgent;
    }
    export class Conversation extends TwiML {
        conversation: XMLElement;
        /**
         * <Conversation> TwiML Noun
         */
        constructor(conversation: XMLElement);
    }
    export class Dial extends TwiML {
        dial: XMLElement;
        /**
         * <Dial> TwiML Verb
         */
        constructor(dial: XMLElement);
        /**
         * <Client> TwiML Noun
         *
         * @function client
         * @memberof Dial
         *
         * @param attributes - TwiML attributes
         * @param identity - Client identity
         */
        client(identity?: string): VoiceResponse.Client;
        client(attributes?: VoiceResponse.ClientAttributes, identity?: string): VoiceResponse.Client;
        /**
         * <Conference> TwiML Noun
         *
         * @function conference
         * @memberof Dial
         *
         * @param attributes - TwiML attributes
         * @param name - Conference name
         */
        conference(name: string): VoiceResponse.Conference;
        conference(attributes: VoiceResponse.ConferenceAttributes, name: string): VoiceResponse.Conference;
        /**
         * <Number> TwiML Noun
         *
         * @function number
         * @memberof Dial
         *
         * @param attributes - TwiML attributes
         * @param phoneNumber - Phone Number to dial
         */
        number(phoneNumber: string): VoiceResponse.Number;
        number(attributes: VoiceResponse.NumberAttributes, phoneNumber: string): VoiceResponse.Number;
        /**
         * <Queue> TwiML Noun
         *
         * @function queue
         * @memberof Dial
         *
         * @param attributes - TwiML attributes
         * @param name - Queue name
         */
        queue(name: string): VoiceResponse.Queue;
        queue(attributes: VoiceResponse.QueueAttributes, name: string): VoiceResponse.Queue;
        /**
         * <Sim> TwiML Noun
         *
         * @function sim
         * @memberof Dial
         *
         * @param attributes - TwiML attributes
         * @param simSid - SIM SID
         */
        sim(simSid: string): VoiceResponse.Sim;
        sim(attributes: object, simSid: string): VoiceResponse.Sim;
        /**
         * <Sip> TwiML Noun
         *
         * @function sip
         * @memberof Dial
         *
         * @param attributes - TwiML attributes
         * @param sipUrl - SIP URL
         */
        sip(sipUrl: string): VoiceResponse.Sip;
        sip(attributes: VoiceResponse.SipAttributes, sipUrl: string): VoiceResponse.Sip;
    }
    export class Echo extends TwiML {
        echo: XMLElement;
        /**
         * <Echo> TwiML Verb
         */
        constructor(echo: XMLElement);
    }
    export class Enqueue extends TwiML {
        enqueue: XMLElement;
        /**
         * <Enqueue> TwiML Noun
         */
        constructor(enqueue: XMLElement);
        /**
         * <Task> TwiML Noun
         *
         * @function task
         * @memberof Enqueue
         *
         * @param attributes - TwiML attributes
         * @param body - TaskRouter task attributes
         */
        task(body: string): VoiceResponse.Task;
        task(attributes: VoiceResponse.TaskAttributes, body: string): VoiceResponse.Task;
    }
    export class Gather extends TwiML {
        gather: XMLElement;
        /**
         * <Gather> TwiML Verb
         */
        constructor(gather: XMLElement);
        /**
         * <Pause> TwiML Verb
         *
         * @function pause
         * @memberof Gather
         *
         * @param attributes - TwiML attributes
         */
        pause(attributes?: VoiceResponse.PauseAttributes): VoiceResponse.Pause;
        /**
         * <Play> TwiML Verb
         *
         * @function play
         * @memberof Gather
         *
         * @param attributes - TwiML attributes
         * @param url - Media URL
         */
        play(url?: string): VoiceResponse.Play;
        play(attributes?: VoiceResponse.PlayAttributes, url?: string): VoiceResponse.Play;
        /**
         * <Say> TwiML Verb
         *
         * @function say
         * @memberof Gather
         *
         * @param attributes - TwiML attributes
         * @param message - Message to say
         */
        say(message: string): VoiceResponse.Say;
        say(attributes: VoiceResponse.SayAttributes, message: string): VoiceResponse.Say;
    }
    export class Hangup extends TwiML {
        hangup: XMLElement;
        /**
         * <Hangup> TwiML Verb
         */
        constructor(hangup: XMLElement);
    }
    export class Identity extends TwiML {
        identity: XMLElement;
        /**
         * <Identity> TwiML Noun
         */
        constructor(identity: XMLElement);
    }
    export class Leave extends TwiML {
        leave: XMLElement;
        /**
         * <Leave> TwiML Verb
         */
        constructor(leave: XMLElement);
    }
    export class Number extends TwiML {
        number: XMLElement;
        /**
         * <Number> TwiML Noun
         */
        constructor(number: XMLElement);
    }
    export class Parameter extends TwiML {
        parameter: XMLElement;
        /**
         * <Parameter> TwiML Noun
         */
        constructor(parameter: XMLElement);
    }
    export class Pause extends TwiML {
        pause: XMLElement;
        /**
         * <Pause> TwiML Verb
         */
        constructor(pause: XMLElement);
    }
    export class Pay extends TwiML {
        pay: XMLElement;
        /**
         * <Pay> Twiml Verb
         */
        constructor(pay: XMLElement);
        /**
         * <Parameter> TwiML Noun
         *
         * @function parameter
         * @memberof Pay
         *
         * @param attributes - TwiML attributes
         */
        parameter(attributes?: VoiceResponse.ParameterAttributes): VoiceResponse.Parameter;
        /**
         * <Prompt> Twiml Verb
         *
         * @function prompt
         * @memberof Pay
         *
         * @param attributes - TwiML attributes
         */
        prompt(attributes?: VoiceResponse.PromptAttributes): VoiceResponse.Prompt;
    }
    export class Play extends TwiML {
        play: XMLElement;
        /**
         * <Play> TwiML Verb
         */
        constructor(play: XMLElement);
    }
    export class Prompt extends TwiML {
        prompt: XMLElement;
        /**
         * <Prompt> Twiml Verb
         */
        constructor(prompt: XMLElement);
        /**
         * <Pause> TwiML Verb
         *
         * @function pause
         * @memberof Prompt
         *
         * @param attributes - TwiML attributes
         */
        pause(attributes?: VoiceResponse.PauseAttributes): VoiceResponse.Pause;
        /**
         * <Play> TwiML Verb
         *
         * @function play
         * @memberof Prompt
         *
         * @param attributes - TwiML attributes
         * @param url - Media URL
         */
        play(url?: string): VoiceResponse.Play;
        play(attributes?: VoiceResponse.PlayAttributes, url?: string): VoiceResponse.Play;
        /**
         * <Say> TwiML Verb
         *
         * @function say
         * @memberof Prompt
         *
         * @param attributes - TwiML attributes
         * @param message - Message to say
         */
        say(message: string): VoiceResponse.Say;
        say(attributes: VoiceResponse.SayAttributes, message: string): VoiceResponse.Say;
    }
    export class Queue extends TwiML {
        queue: XMLElement;
        /**
         * <Queue> TwiML Noun
         */
        constructor(queue: XMLElement);
    }
    export class Record extends TwiML {
        record: XMLElement;
        /**
         * <Record> TwiML Verb
         */
        constructor(record: XMLElement);
    }
    export class Redirect extends TwiML {
        redirect: XMLElement;
        /**
         * <Redirect> TwiML Verb
         */
        constructor(redirect: XMLElement);
    }
    export class Refer extends TwiML {
        refer: XMLElement;
        /**
         * <Refer> TwiML Verb
         */
        constructor(refer: XMLElement);
        /**
         * <Sip> TwiML Noun used in <Refer>
         *
         * @function sip
         * @memberof Refer
         *
         * @param attributes - TwiML attributes
         * @param sipUrl - SIP URL
         */
        sip(sipUrl: string): VoiceResponse.ReferSip;
        sip(attributes: object, sipUrl: string): VoiceResponse.ReferSip;
    }
    export class ReferSip extends TwiML {
        referSip: XMLElement;
        /**
         * <Sip> TwiML Noun used in <Refer>
         */
        constructor(referSip: XMLElement);
    }
    export class Reject extends TwiML {
        reject: XMLElement;
        /**
         * <Reject> TwiML Verb
         */
        constructor(reject: XMLElement);
    }
    export class Room extends TwiML {
        room: XMLElement;
        /**
         * <Room> TwiML Noun
         */
        constructor(room: XMLElement);
    }
    export class Say extends TwiML {
        say: XMLElement;
        /**
         * <Say> TwiML Verb
         */
        constructor(say: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Specifying Another Language for Specific Words in <Say>
         *
         * @function lang
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        lang(words: string): VoiceResponse.SsmlLang;
        lang(attributes: VoiceResponse.SsmlLangAttributes, words: string): VoiceResponse.SsmlLang;
        /**
         * Adding a Pause Between Paragraphs in <Say>
         *
         * @function p
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        p(words: string): VoiceResponse.SsmlP;
        p(attributes: object, words: string): VoiceResponse.SsmlP;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Adding A Pause Between Sentences in <Say>
         *
         * @function s
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        s(words: string): VoiceResponse.SsmlS;
        s(attributes: object, words: string): VoiceResponse.SsmlS;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         *
         * @function w
         * @memberof Say
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        w(words: string): VoiceResponse.SsmlW;
        w(attributes: VoiceResponse.SsmlWAttributes, words: string): VoiceResponse.SsmlW;
    }
    export class Sim extends TwiML {
        sim: XMLElement;
        /**
         * <Sim> TwiML Noun
         */
        constructor(sim: XMLElement);
    }
    export class Sip extends TwiML {
        sip: XMLElement;
        /**
         * <Sip> TwiML Noun
         */
        constructor(sip: XMLElement);
    }
    export class Siprec extends TwiML {
        siprec: XMLElement;
        /**
         * <Siprec> TwiML Noun
         */
        constructor(siprec: XMLElement);
        /**
         * <Parameter> TwiML Noun
         *
         * @function parameter
         * @memberof Siprec
         *
         * @param attributes - TwiML attributes
         */
        parameter(attributes?: VoiceResponse.ParameterAttributes): VoiceResponse.Parameter;
    }
    export class Sms extends TwiML {
        sms: XMLElement;
        /**
         * <Sms> TwiML Noun
         */
        constructor(sms: XMLElement);
    }
    export class SsmlBreak extends TwiML {
        ssmlBreak: XMLElement;
        /**
         * Adding a Pause in <Say>
         */
        constructor(ssmlBreak: XMLElement);
    }
    export class SsmlEmphasis extends TwiML {
        ssmlEmphasis: XMLElement;
        /**
         * Emphasizing Words in <Say>
         */
        constructor(ssmlEmphasis: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Specifying Another Language for Specific Words in <Say>
         *
         * @function lang
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        lang(words: string): VoiceResponse.SsmlLang;
        lang(attributes: VoiceResponse.SsmlLangAttributes, words: string): VoiceResponse.SsmlLang;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         *
         * @function w
         * @memberof SsmlEmphasis
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        w(words: string): VoiceResponse.SsmlW;
        w(attributes: VoiceResponse.SsmlWAttributes, words: string): VoiceResponse.SsmlW;
    }
    export class SsmlLang extends TwiML {
        ssmlLang: XMLElement;
        /**
         * Specifying Another Language for Specific Words in <Say>
         */
        constructor(ssmlLang: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Specifying Another Language for Specific Words in <Say>
         *
         * @function lang
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        lang(words: string): VoiceResponse.SsmlLang;
        lang(attributes: VoiceResponse.SsmlLangAttributes, words: string): VoiceResponse.SsmlLang;
        /**
         * Adding a Pause Between Paragraphs in <Say>
         *
         * @function p
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        p(words: string): VoiceResponse.SsmlP;
        p(attributes: object, words: string): VoiceResponse.SsmlP;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Adding A Pause Between Sentences in <Say>
         *
         * @function s
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        s(words: string): VoiceResponse.SsmlS;
        s(attributes: object, words: string): VoiceResponse.SsmlS;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         *
         * @function w
         * @memberof SsmlLang
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        w(words: string): VoiceResponse.SsmlW;
        w(attributes: VoiceResponse.SsmlWAttributes, words: string): VoiceResponse.SsmlW;
    }
    export class SsmlP extends TwiML {
        ssmlP: XMLElement;
        /**
         * Adding a Pause Between Paragraphs in <Say>
         */
        constructor(ssmlP: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Specifying Another Language for Specific Words in <Say>
         *
         * @function lang
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        lang(words: string): VoiceResponse.SsmlLang;
        lang(attributes: VoiceResponse.SsmlLangAttributes, words: string): VoiceResponse.SsmlLang;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Adding A Pause Between Sentences in <Say>
         *
         * @function s
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        s(words: string): VoiceResponse.SsmlS;
        s(attributes: object, words: string): VoiceResponse.SsmlS;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         *
         * @function w
         * @memberof SsmlP
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        w(words: string): VoiceResponse.SsmlW;
        w(attributes: VoiceResponse.SsmlWAttributes, words: string): VoiceResponse.SsmlW;
    }
    export class SsmlPhoneme extends TwiML {
        ssmlPhoneme: XMLElement;
        /**
         * Using Phonetic Pronunciation in <Say>
         */
        constructor(ssmlPhoneme: XMLElement);
    }
    export class SsmlProsody extends TwiML {
        ssmlProsody: XMLElement;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         */
        constructor(ssmlProsody: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Specifying Another Language for Specific Words in <Say>
         *
         * @function lang
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        lang(words: string): VoiceResponse.SsmlLang;
        lang(attributes: VoiceResponse.SsmlLangAttributes, words: string): VoiceResponse.SsmlLang;
        /**
         * Adding a Pause Between Paragraphs in <Say>
         *
         * @function p
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        p(words: string): VoiceResponse.SsmlP;
        p(attributes: object, words: string): VoiceResponse.SsmlP;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Adding A Pause Between Sentences in <Say>
         *
         * @function s
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        s(words: string): VoiceResponse.SsmlS;
        s(attributes: object, words: string): VoiceResponse.SsmlS;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         *
         * @function w
         * @memberof SsmlProsody
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        w(words: string): VoiceResponse.SsmlW;
        w(attributes: VoiceResponse.SsmlWAttributes, words: string): VoiceResponse.SsmlW;
    }
    export class SsmlS extends TwiML {
        ssmlS: XMLElement;
        /**
         * Adding A Pause Between Sentences in <Say>
         */
        constructor(ssmlS: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Specifying Another Language for Specific Words in <Say>
         *
         * @function lang
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        lang(words: string): VoiceResponse.SsmlLang;
        lang(attributes: VoiceResponse.SsmlLangAttributes, words: string): VoiceResponse.SsmlLang;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         *
         * @function w
         * @memberof SsmlS
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        w(words: string): VoiceResponse.SsmlW;
        w(attributes: VoiceResponse.SsmlWAttributes, words: string): VoiceResponse.SsmlW;
    }
    export class SsmlSayAs extends TwiML {
        ssmlSayAs: XMLElement;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         */
        constructor(ssmlSayAs: XMLElement);
    }
    export class SsmlSub extends TwiML {
        ssmlSub: XMLElement;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         */
        constructor(ssmlSub: XMLElement);
    }
    export class SsmlW extends TwiML {
        ssmlW: XMLElement;
        /**
         * Improving Pronunciation by Specifying Parts of Speech in <Say>
         */
        constructor(ssmlW: XMLElement);
        /**
         * Adding a Pause in <Say>
         *
         * @function break_
         * @memberof SsmlW
         *
         * @param attributes - TwiML attributes
         */
        break_(attributes?: VoiceResponse.SsmlBreakAttributes): VoiceResponse.SsmlBreak;
        /**
         * Emphasizing Words in <Say>
         *
         * @function emphasis
         * @memberof SsmlW
         *
         * @param attributes - TwiML attributes
         * @param words - Words to emphasize
         */
        emphasis(words: string): VoiceResponse.SsmlEmphasis;
        emphasis(attributes: VoiceResponse.SsmlEmphasisAttributes, words: string): VoiceResponse.SsmlEmphasis;
        /**
         * Using Phonetic Pronunciation in <Say>
         *
         * @function phoneme
         * @memberof SsmlW
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        phoneme(words: string): VoiceResponse.SsmlPhoneme;
        phoneme(attributes: VoiceResponse.SsmlPhonemeAttributes, words: string): VoiceResponse.SsmlPhoneme;
        /**
         * Controling Volume, Speaking Rate, and Pitch in <Say>
         *
         * @function prosody
         * @memberof SsmlW
         *
         * @param attributes - TwiML attributes
         * @param words - Words to speak
         */
        prosody(words: string): VoiceResponse.SsmlProsody;
        prosody(attributes: VoiceResponse.SsmlProsodyAttributes, words: string): VoiceResponse.SsmlProsody;
        /**
         * Controlling How Special Types of Words Are Spoken in <Say>
         *
         * @function sayAs
         * @memberof SsmlW
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be interpreted
         */
        sayAs(words: string): VoiceResponse.SsmlSayAs;
        sayAs(attributes: VoiceResponse.SsmlSayAsAttributes, words: string): VoiceResponse.SsmlSayAs;
        /**
         * Pronouncing Acronyms and Abbreviations in <Say>
         *
         * @function sub
         * @memberof SsmlW
         *
         * @param attributes - TwiML attributes
         * @param words - Words to be substituted
         */
        sub(words: string): VoiceResponse.SsmlSub;
        sub(attributes: VoiceResponse.SsmlSubAttributes, words: string): VoiceResponse.SsmlSub;
    }
    export class Start extends TwiML {
        start: XMLElement;
        /**
         * <Start> TwiML Verb
         */
        constructor(start: XMLElement);
        /**
         * <Siprec> TwiML Noun
         *
         * @function siprec
         * @memberof Start
         *
         * @param attributes - TwiML attributes
         */
        siprec(attributes?: VoiceResponse.SiprecAttributes): VoiceResponse.Siprec;
        /**
         * <Stream> TwiML Noun
         *
         * @function stream
         * @memberof Start
         *
         * @param attributes - TwiML attributes
         */
        stream(attributes?: VoiceResponse.StreamAttributes): VoiceResponse.Stream;
    }
    export class Stop extends TwiML {
        stop: XMLElement;
        /**
         * <Stop> TwiML Verb
         */
        constructor(stop: XMLElement);
        /**
         * <Siprec> TwiML Noun
         *
         * @function siprec
         * @memberof Stop
         *
         * @param attributes - TwiML attributes
         */
        siprec(attributes?: VoiceResponse.SiprecAttributes): VoiceResponse.Siprec;
        /**
         * <Stream> TwiML Noun
         *
         * @function stream
         * @memberof Stop
         *
         * @param attributes - TwiML attributes
         */
        stream(attributes?: VoiceResponse.StreamAttributes): VoiceResponse.Stream;
    }
    export class Stream extends TwiML {
        stream: XMLElement;
        /**
         * <Stream> TwiML Noun
         */
        constructor(stream: XMLElement);
        /**
         * <Parameter> TwiML Noun
         *
         * @function parameter
         * @memberof Stream
         *
         * @param attributes - TwiML attributes
         */
        parameter(attributes?: VoiceResponse.ParameterAttributes): VoiceResponse.Parameter;
    }
    export class Task extends TwiML {
        task: XMLElement;
        /**
         * <Task> TwiML Noun
         */
        constructor(task: XMLElement);
    }
    export class VirtualAgent extends TwiML {
        virtualAgent: XMLElement;
        /**
         * <VirtualAgent> TwiML Noun
         */
        constructor(virtualAgent: XMLElement);
        /**
         * <Config> TwiML Noun
         *
         * @function config
         * @memberof VirtualAgent
         *
         * @param attributes - TwiML attributes
         */
        config(attributes?: VoiceResponse.ConfigAttributes): VoiceResponse.Config;
        /**
         * <Parameter> TwiML Noun
         *
         * @function parameter
         * @memberof VirtualAgent
         *
         * @param attributes - TwiML attributes
         */
        parameter(attributes?: VoiceResponse.ParameterAttributes): VoiceResponse.Parameter;
    }
    export {};
}
export default VoiceResponse;
