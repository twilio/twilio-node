/// <reference types="node" />
/// <reference types="node" />
import { inspect, InspectOptions } from "util";
import V2 from "../../V2";
declare type AccessTokenFactorTypes = "push";
/**
 * Options to pass to create a AccessTokenInstance
 *
 * @property { string } identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user\\\'s UUID, GUID, or SID.
 * @property { AccessTokenFactorTypes } factorType
 * @property { string } [factorFriendlyName] The friendly name of the factor that is going to be created with this access token
 * @property { number } [ttl] How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60.
 */
export interface AccessTokenListInstanceCreateOptions {
    identity: string;
    factorType: AccessTokenFactorTypes;
    factorFriendlyName?: string;
    ttl?: number;
}
export interface AccessTokenContext {
    /**
     * Fetch a AccessTokenInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed AccessTokenInstance
     */
    fetch(callback?: (error: Error | null, item?: AccessTokenInstance) => any): Promise<AccessTokenInstance>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface AccessTokenContextSolution {
    serviceSid?: string;
    sid?: string;
}
export declare class AccessTokenContextImpl implements AccessTokenContext {
    protected _version: V2;
    protected _solution: AccessTokenContextSolution;
    protected _uri: string;
    constructor(_version: V2, serviceSid: string, sid: string);
    fetch(callback?: any): Promise<AccessTokenInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): AccessTokenContextSolution;
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
interface AccessTokenResource {
    sid?: string | null;
    account_sid?: string | null;
    service_sid?: string | null;
    entity_identity?: string | null;
    factor_type?: AccessTokenFactorTypes;
    factor_friendly_name?: string | null;
    token?: string | null;
    url?: string | null;
    ttl?: number | null;
    date_created?: Date | null;
}
export declare class AccessTokenInstance {
    protected _version: V2;
    protected _solution: AccessTokenContextSolution;
    protected _context?: AccessTokenContext;
    constructor(_version: V2, payload: AccessTokenResource, serviceSid: string, sid?: string);
    /**
     * A string that uniquely identifies this Access Token.
     */
    sid?: string | null;
    /**
     * Account Sid.
     */
    accountSid?: string | null;
    /**
     * Verify Service Sid.
     */
    serviceSid?: string | null;
    /**
     * Unique external identifier of the Entity
     */
    entityIdentity?: string | null;
    factorType?: AccessTokenFactorTypes;
    /**
     * A human readable description of this factor.
     */
    factorFriendlyName?: string | null;
    /**
     * Generated access token.
     */
    token?: string | null;
    /**
     * The URL of this resource.
     */
    url?: string | null;
    /**
     * How long, in seconds, the access token is valid.
     */
    ttl?: number | null;
    /**
     * The date this access token was created
     */
    dateCreated?: Date | null;
    private get _proxy();
    /**
     * Fetch a AccessTokenInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed AccessTokenInstance
     */
    fetch(callback?: (error: Error | null, item?: AccessTokenInstance) => any): Promise<AccessTokenInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): {
        sid: string | null | undefined;
        accountSid: string | null | undefined;
        serviceSid: string | null | undefined;
        entityIdentity: string | null | undefined;
        factorType: "push" | undefined;
        factorFriendlyName: string | null | undefined;
        token: string | null | undefined;
        url: string | null | undefined;
        ttl: number | null | undefined;
        dateCreated: Date | null | undefined;
    };
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
export interface AccessTokenListInstance {
    (sid: string): AccessTokenContext;
    get(sid: string): AccessTokenContext;
    /**
     * Create a AccessTokenInstance
     *
     * @param { AccessTokenListInstanceCreateOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed AccessTokenInstance
     */
    create(params: AccessTokenListInstanceCreateOptions, callback?: (error: Error | null, item?: AccessTokenInstance) => any): Promise<AccessTokenInstance>;
    create(params: any, callback?: any): Promise<AccessTokenInstance>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface AccessTokenSolution {
    serviceSid?: string;
}
export declare function AccessTokenListInstance(version: V2, serviceSid: string): AccessTokenListInstance;
export {};
