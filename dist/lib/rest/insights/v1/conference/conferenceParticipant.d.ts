/// <reference types="node" />
/// <reference types="node" />
import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import V1 from "../../V1";
declare type ConferenceParticipantCallDirection = "inbound" | "outbound";
declare type ConferenceParticipantCallStatus = "answered" | "completed" | "busy" | "fail" | "noanswer" | "ringing" | "canceled";
declare type ConferenceParticipantCallType = "carrier" | "client" | "sip";
declare type ConferenceParticipantJitterBufferSize = "large" | "small" | "medium" | "off";
declare type ConferenceParticipantProcessingState = "complete" | "in_progress" | "timeout";
declare type ConferenceParticipantRegion = "us1" | "us2" | "au1" | "br1" | "ie1" | "jp1" | "sg1" | "de1";
/**
 * Options to pass to fetch a ConferenceParticipantInstance
 *
 * @property { string } [events] Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
 * @property { string } [metrics] Object. Contains participant call quality metrics.
 */
export interface ConferenceParticipantContextFetchOptions {
    events?: string;
    metrics?: string;
}
/**
 * Options to pass to each
 *
 * @property { string } [participantSid] The unique SID identifier of the Participant.
 * @property { string } [label] User-specified label for a participant.
 * @property { string } [events] Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
 * @property { number } [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
 * @property { Function } [callback] -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property { Function } [done] - Function to be called upon completion of streaming
 * @property { number } [limit] -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 */
export interface ConferenceParticipantListInstanceEachOptions {
    participantSid?: string;
    label?: string;
    events?: string;
    pageSize?: number;
    callback?: (item: ConferenceParticipantInstance, done: (err?: Error) => void) => void;
    done?: Function;
    limit?: number;
}
/**
 * Options to pass to list
 *
 * @property { string } [participantSid] The unique SID identifier of the Participant.
 * @property { string } [label] User-specified label for a participant.
 * @property { string } [events] Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
 * @property { number } [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
 * @property { number } [limit] -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 */
export interface ConferenceParticipantListInstanceOptions {
    participantSid?: string;
    label?: string;
    events?: string;
    pageSize?: number;
    limit?: number;
}
/**
 * Options to pass to page
 *
 * @property { string } [participantSid] The unique SID identifier of the Participant.
 * @property { string } [label] User-specified label for a participant.
 * @property { string } [events] Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.
 * @property { number } [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
 * @property { number } [pageNumber] - Page Number, this value is simply for client state
 * @property { string } [pageToken] - PageToken provided by the API
 */
export interface ConferenceParticipantListInstancePageOptions {
    participantSid?: string;
    label?: string;
    events?: string;
    pageSize?: number;
    pageNumber?: number;
    pageToken?: string;
}
export interface ConferenceParticipantContext {
    /**
     * Fetch a ConferenceParticipantInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConferenceParticipantInstance
     */
    fetch(callback?: (error: Error | null, item?: ConferenceParticipantInstance) => any): Promise<ConferenceParticipantInstance>;
    /**
     * Fetch a ConferenceParticipantInstance
     *
     * @param { ConferenceParticipantContextFetchOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConferenceParticipantInstance
     */
    fetch(params: ConferenceParticipantContextFetchOptions, callback?: (error: Error | null, item?: ConferenceParticipantInstance) => any): Promise<ConferenceParticipantInstance>;
    fetch(params?: any, callback?: any): Promise<ConferenceParticipantInstance>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface ConferenceParticipantContextSolution {
    conferenceSid?: string;
    participantSid?: string;
}
export declare class ConferenceParticipantContextImpl implements ConferenceParticipantContext {
    protected _version: V1;
    protected _solution: ConferenceParticipantContextSolution;
    protected _uri: string;
    constructor(_version: V1, conferenceSid: string, participantSid: string);
    fetch(params?: any, callback?: any): Promise<ConferenceParticipantInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): ConferenceParticipantContextSolution;
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
interface ConferenceParticipantPayload extends TwilioResponsePayload {
    participants: ConferenceParticipantResource[];
}
interface ConferenceParticipantResource {
    participant_sid?: string | null;
    label?: string | null;
    conference_sid?: string | null;
    call_sid?: string | null;
    account_sid?: string | null;
    call_direction?: ConferenceParticipantCallDirection;
    from?: string | null;
    to?: string | null;
    call_status?: ConferenceParticipantCallStatus;
    country_code?: string | null;
    is_moderator?: boolean | null;
    join_time?: Date | null;
    leave_time?: Date | null;
    duration_seconds?: number | null;
    outbound_queue_length?: number | null;
    outbound_time_in_queue?: number | null;
    jitter_buffer_size?: ConferenceParticipantJitterBufferSize;
    is_coach?: boolean | null;
    coached_participants?: Array<string> | null;
    participant_region?: ConferenceParticipantRegion;
    conference_region?: ConferenceParticipantRegion;
    call_type?: ConferenceParticipantCallType;
    processing_state?: ConferenceParticipantProcessingState;
    properties?: any | null;
    events?: any | null;
    metrics?: any | null;
    url?: string | null;
}
export declare class ConferenceParticipantInstance {
    protected _version: V1;
    protected _solution: ConferenceParticipantContextSolution;
    protected _context?: ConferenceParticipantContext;
    constructor(_version: V1, payload: ConferenceParticipantResource, conferenceSid: string, participantSid?: string);
    /**
     * SID for this participant.
     */
    participantSid?: string | null;
    /**
     * The user-specified label of this participant.
     */
    label?: string | null;
    /**
     * Conference SID.
     */
    conferenceSid?: string | null;
    /**
     * Unique SID identifier of the call.
     */
    callSid?: string | null;
    /**
     * Account SID.
     */
    accountSid?: string | null;
    callDirection?: ConferenceParticipantCallDirection;
    /**
     * Caller ID of the calling party.
     */
    from?: string | null;
    /**
     * Called party.
     */
    to?: string | null;
    callStatus?: ConferenceParticipantCallStatus;
    /**
     * ISO alpha-2 country code of the participant.
     */
    countryCode?: string | null;
    /**
     * Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true.
     */
    isModerator?: boolean | null;
    /**
     * ISO 8601 timestamp of participant join event.
     */
    joinTime?: Date | null;
    /**
     * ISO 8601 timestamp of participant leave event.
     */
    leaveTime?: Date | null;
    /**
     * Participant durations in seconds.
     */
    durationSeconds?: number | null;
    /**
     * Estimated time in queue at call creation.
     */
    outboundQueueLength?: number | null;
    /**
     * Actual time in queue (seconds).
     */
    outboundTimeInQueue?: number | null;
    jitterBufferSize?: ConferenceParticipantJitterBufferSize;
    /**
     * Boolean. Indicated whether participant was a coach.
     */
    isCoach?: boolean | null;
    /**
     * Call SIDs coached by this participant.
     */
    coachedParticipants?: Array<string> | null;
    participantRegion?: ConferenceParticipantRegion;
    conferenceRegion?: ConferenceParticipantRegion;
    callType?: ConferenceParticipantCallType;
    processingState?: ConferenceParticipantProcessingState;
    /**
     * Participant properties and metadata.
     */
    properties?: any | null;
    /**
     * Object containing information of actions taken by participants. Nested resource URLs.
     */
    events?: any | null;
    /**
     * Object. Contains participant quality metrics.
     */
    metrics?: any | null;
    /**
     * The URL of this resource.
     */
    url?: string | null;
    private get _proxy();
    /**
     * Fetch a ConferenceParticipantInstance
     *
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConferenceParticipantInstance
     */
    fetch(callback?: (error: Error | null, item?: ConferenceParticipantInstance) => any): Promise<ConferenceParticipantInstance>;
    /**
     * Fetch a ConferenceParticipantInstance
     *
     * @param { ConferenceParticipantContextFetchOptions } params - Parameter for request
     * @param { function } [callback] - Callback to handle processed record
     *
     * @returns { Promise } Resolves to processed ConferenceParticipantInstance
     */
    fetch(params: ConferenceParticipantContextFetchOptions, callback?: (error: Error | null, item?: ConferenceParticipantInstance) => any): Promise<ConferenceParticipantInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): {
        participantSid: string | null | undefined;
        label: string | null | undefined;
        conferenceSid: string | null | undefined;
        callSid: string | null | undefined;
        accountSid: string | null | undefined;
        callDirection: ConferenceParticipantCallDirection | undefined;
        from: string | null | undefined;
        to: string | null | undefined;
        callStatus: ConferenceParticipantCallStatus | undefined;
        countryCode: string | null | undefined;
        isModerator: boolean | null | undefined;
        joinTime: Date | null | undefined;
        leaveTime: Date | null | undefined;
        durationSeconds: number | null | undefined;
        outboundQueueLength: number | null | undefined;
        outboundTimeInQueue: number | null | undefined;
        jitterBufferSize: ConferenceParticipantJitterBufferSize | undefined;
        isCoach: boolean | null | undefined;
        coachedParticipants: string[] | null | undefined;
        participantRegion: ConferenceParticipantRegion | undefined;
        conferenceRegion: ConferenceParticipantRegion | undefined;
        callType: ConferenceParticipantCallType | undefined;
        processingState: ConferenceParticipantProcessingState | undefined;
        properties: any;
        events: any;
        metrics: any;
        url: string | null | undefined;
    };
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
export interface ConferenceParticipantListInstance {
    (participantSid: string): ConferenceParticipantContext;
    get(participantSid: string): ConferenceParticipantContext;
    /**
     * Streams ConferenceParticipantInstance records from the API.
     *
     * This operation lazily loads records as efficiently as possible until the limit
     * is reached.
     *
     * The results are passed into the callback function, so this operation is memory
     * efficient.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { function } [callback] - Function to process each record
     */
    each(callback?: (item: ConferenceParticipantInstance, done: (err?: Error) => void) => void): void;
    /**
     * Streams ConferenceParticipantInstance records from the API.
     *
     * This operation lazily loads records as efficiently as possible until the limit
     * is reached.
     *
     * The results are passed into the callback function, so this operation is memory
     * efficient.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { ConferenceParticipantListInstanceEachOptions } [params] - Options for request
     * @param { function } [callback] - Function to process each record
     */
    each(params?: ConferenceParticipantListInstanceEachOptions, callback?: (item: ConferenceParticipantInstance, done: (err?: Error) => void) => void): void;
    each(params?: any, callback?: any): void;
    /**
     * Retrieve a single target page of ConferenceParticipantInstance records from the API.
     *
     * The request is executed immediately.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { function } [callback] - Callback to handle list of records
     */
    getPage(callback?: (error: Error | null, items: ConferenceParticipantPage) => any): Promise<ConferenceParticipantPage>;
    /**
     * Retrieve a single target page of ConferenceParticipantInstance records from the API.
     *
     * The request is executed immediately.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { string } [targetUrl] - API-generated URL for the requested results page
     * @param { function } [callback] - Callback to handle list of records
     */
    getPage(targetUrl?: string, callback?: (error: Error | null, items: ConferenceParticipantPage) => any): Promise<ConferenceParticipantPage>;
    getPage(params?: any, callback?: any): Promise<ConferenceParticipantPage>;
    /**
     * Lists ConferenceParticipantInstance records from the API as a list.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { function } [callback] - Callback to handle list of records
     */
    list(callback?: (error: Error | null, items: ConferenceParticipantInstance[]) => any): Promise<ConferenceParticipantInstance[]>;
    /**
     * Lists ConferenceParticipantInstance records from the API as a list.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { ConferenceParticipantListInstanceOptions } [params] - Options for request
     * @param { function } [callback] - Callback to handle list of records
     */
    list(params?: ConferenceParticipantListInstanceOptions, callback?: (error: Error | null, items: ConferenceParticipantInstance[]) => any): Promise<ConferenceParticipantInstance[]>;
    list(params?: any, callback?: any): Promise<ConferenceParticipantInstance[]>;
    /**
     * Retrieve a single page of ConferenceParticipantInstance records from the API.
     *
     * The request is executed immediately.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { function } [callback] - Callback to handle list of records
     */
    page(callback?: (error: Error | null, items: ConferenceParticipantPage) => any): Promise<ConferenceParticipantPage>;
    /**
     * Retrieve a single page of ConferenceParticipantInstance records from the API.
     *
     * The request is executed immediately.
     *
     * If a function is passed as the first argument, it will be used as the callback
     * function.
     *
     * @param { ConferenceParticipantListInstancePageOptions } [params] - Options for request
     * @param { function } [callback] - Callback to handle list of records
     */
    page(params: ConferenceParticipantListInstancePageOptions, callback?: (error: Error | null, items: ConferenceParticipantPage) => any): Promise<ConferenceParticipantPage>;
    page(params?: any, callback?: any): Promise<ConferenceParticipantPage>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface ConferenceParticipantSolution {
    conferenceSid?: string;
}
export declare function ConferenceParticipantListInstance(version: V1, conferenceSid: string): ConferenceParticipantListInstance;
export declare class ConferenceParticipantPage extends Page<V1, ConferenceParticipantPayload, ConferenceParticipantResource, ConferenceParticipantInstance> {
    /**
     * Initialize the ConferenceParticipantPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */
    constructor(version: V1, response: Response<string>, solution: ConferenceParticipantSolution);
    /**
     * Build an instance of ConferenceParticipantInstance
     *
     * @param payload - Payload response from the API
     */
    getInstance(payload: ConferenceParticipantResource): ConferenceParticipantInstance;
    [inspect.custom](depth: any, options: InspectOptions): string;
}
export {};
