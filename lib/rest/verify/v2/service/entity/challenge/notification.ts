/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../../../../V2";
const deserialize = require("../../../../../../base/deserialize");
const serialize = require("../../../../../../base/serialize");
import { isValidPathParam } from "../../../../../../base/utility";

/**
 * Options to pass to create a NotificationInstance
 */
export interface NotificationListInstanceCreateOptions {
  /** How long, in seconds, the notification is valid. Can be an integer between 0 and 300. Default is 300. Delivery is attempted until the TTL elapses, even if the device is offline. 0 means that the notification delivery is attempted immediately, only once, and is not stored for future delivery. */
  ttl?: number;
}

export interface NotificationListInstance {
  /**
   * Create a NotificationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed NotificationInstance
   */
  create(
    callback?: (error: Error | null, item?: NotificationInstance) => any
  ): Promise<NotificationInstance>;
  /**
   * Create a NotificationInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed NotificationInstance
   */
  create(
    params: NotificationListInstanceCreateOptions,
    callback?: (error: Error | null, item?: NotificationInstance) => any
  ): Promise<NotificationInstance>;
  create(params?: any, callback?: any): Promise<NotificationInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface NotificationSolution {
  serviceSid?: string;
  identity?: string;
  challengeSid?: string;
}

interface NotificationListInstanceImpl extends NotificationListInstance {}
class NotificationListInstanceImpl implements NotificationListInstance {
  _version?: V2;
  _solution?: NotificationSolution;
  _uri?: string;
}

export function NotificationListInstance(
  version: V2,
  serviceSid: string,
  identity: string,
  challengeSid: string
): NotificationListInstance {
  if (!isValidPathParam(serviceSid)) {
    throw new Error("Parameter 'serviceSid' is not valid.");
  }

  if (!isValidPathParam(identity)) {
    throw new Error("Parameter 'identity' is not valid.");
  }

  if (!isValidPathParam(challengeSid)) {
    throw new Error("Parameter 'challengeSid' is not valid.");
  }

  const instance = {} as NotificationListInstanceImpl;

  instance._version = version;
  instance._solution = { serviceSid, identity, challengeSid };
  instance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${challengeSid}/Notifications`;

  instance.create = function create(
    params?: any,
    callback?: any
  ): Promise<NotificationInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: this._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new NotificationInstance(
          operationVersion,
          payload,
          this._solution.serviceSid,
          this._solution.identity,
          this._solution.challengeSid
        )
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return this._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(this.toJSON(), options);
  };

  return instance;
}

interface NotificationPayload extends NotificationResource {}

interface NotificationResource {
  sid?: string | null;
  account_sid?: string | null;
  service_sid?: string | null;
  entity_sid?: string | null;
  identity?: string | null;
  challenge_sid?: string | null;
  priority?: string | null;
  ttl?: number | null;
  date_created?: Date | null;
}

export class NotificationInstance {
  constructor(
    protected _version: V2,
    payload: NotificationResource,
    serviceSid: string,
    identity: string,
    challengeSid: string
  ) {
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.serviceSid = payload.service_sid;
    this.entitySid = payload.entity_sid;
    this.identity = payload.identity;
    this.challengeSid = payload.challenge_sid;
    this.priority = payload.priority;
    this.ttl = deserialize.integer(payload.ttl);
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
  }

  /**
   * A string that uniquely identifies this Notification.
   */
  sid?: string | null;
  /**
   * Account Sid.
   */
  accountSid?: string | null;
  /**
   * Service Sid.
   */
  serviceSid?: string | null;
  /**
   * Entity Sid.
   */
  entitySid?: string | null;
  /**
   * Unique external identifier of the Entity
   */
  identity?: string | null;
  /**
   * Challenge Sid.
   */
  challengeSid?: string | null;
  /**
   * The priority of the notification.
   */
  priority?: string | null;
  /**
   * How long, in seconds, the notification is valid.
   */
  ttl?: number | null;
  /**
   * The date this Notification was created
   */
  dateCreated?: Date | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      serviceSid: this.serviceSid,
      entitySid: this.entitySid,
      identity: this.identity,
      challengeSid: this.challengeSid,
      priority: this.priority,
      ttl: this.ttl,
      dateCreated: this.dateCreated,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
