/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { DayListInstance } from "./export/day";
import { ExportCustomJobListInstance } from "./export/exportCustomJob";
import { JobListInstance } from "./export/job";

export interface ExportContext {
  days: DayListInstance;
  exportCustomJobs: ExportCustomJobListInstance;

  /**
   * Fetch a ExportInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ExportInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ExportInstance) => any
  ): Promise<ExportInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ExportContextSolution {
  resourceType: string;
}

export class ExportContextImpl implements ExportContext {
  protected _solution: ExportContextSolution;
  protected _uri: string;

  protected _days?: DayListInstance;
  protected _exportCustomJobs?: ExportCustomJobListInstance;

  constructor(protected _version: V1, resourceType: string) {
    if (!isValidPathParam(resourceType)) {
      throw new Error("Parameter 'resourceType' is not valid.");
    }

    this._solution = { resourceType };
    this._uri = `/Exports/${resourceType}`;
  }

  get days(): DayListInstance {
    this._days =
      this._days || DayListInstance(this._version, this._solution.resourceType);
    return this._days;
  }

  get exportCustomJobs(): ExportCustomJobListInstance {
    this._exportCustomJobs =
      this._exportCustomJobs ||
      ExportCustomJobListInstance(this._version, this._solution.resourceType);
    return this._exportCustomJobs;
  }

  fetch(
    callback?: (error: Error | null, item?: ExportInstance) => any
  ): Promise<ExportInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ExportInstance(
          operationVersion,
          payload,
          instance._solution.resourceType
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ExportPayload extends ExportResource {}

interface ExportResource {
  resource_type: string;
  url: string;
  links: Record<string, string>;
}

export class ExportInstance {
  protected _solution: ExportContextSolution;
  protected _context?: ExportContext;

  constructor(
    protected _version: V1,
    payload: ExportResource,
    resourceType?: string
  ) {
    this.resourceType = payload.resource_type;
    this.url = payload.url;
    this.links = payload.links;

    this._solution = { resourceType: resourceType || this.resourceType };
  }

  /**
   * The type of communication â€“ Messages, Calls, Conferences, and Participants
   */
  resourceType: string;
  /**
   * The URL of this resource.
   */
  url: string;
  /**
   * Contains a dictionary of URL links to nested resources of this Export.
   */
  links: Record<string, string>;

  private get _proxy(): ExportContext {
    this._context =
      this._context ||
      new ExportContextImpl(this._version, this._solution.resourceType);
    return this._context;
  }

  /**
   * Fetch a ExportInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ExportInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ExportInstance) => any
  ): Promise<ExportInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Access the days.
   */
  days(): DayListInstance {
    return this._proxy.days;
  }

  /**
   * Access the exportCustomJobs.
   */
  exportCustomJobs(): ExportCustomJobListInstance {
    return this._proxy.exportCustomJobs;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      resourceType: this.resourceType,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ExportSolution {}

export interface ExportListInstance {
  _version: V1;
  _solution: ExportSolution;
  _uri: string;

  (resourceType: string): ExportContext;
  get(resourceType: string): ExportContext;

  _jobs?: JobListInstance;
  jobs: JobListInstance;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ExportListInstance(version: V1): ExportListInstance {
  const instance = ((resourceType) =>
    instance.get(resourceType)) as ExportListInstance;

  instance.get = function get(resourceType): ExportContext {
    return new ExportContextImpl(version, resourceType);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Exports`;

  Object.defineProperty(instance, "jobs", {
    get: function jobs() {
      if (!instance._jobs) {
        instance._jobs = JobListInstance(instance._version);
      }
      return instance._jobs;
    },
  });

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
