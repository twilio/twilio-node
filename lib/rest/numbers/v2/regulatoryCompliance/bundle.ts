/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import V2 from "../../V2";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";
import { BundleCopyListInstance } from "./bundle/bundleCopy";
import { EvaluationListInstance } from "./bundle/evaluation";
import { ItemAssignmentListInstance } from "./bundle/itemAssignment";
import { ReplaceItemsListInstance } from "./bundle/replaceItems";

type BundleEndUserType = "individual" | "business";

type BundleSortBy = "valid-until" | "date-updated";

type BundleSortDirection = "ASC" | "DESC";

type BundleStatus =
  | "draft"
  | "pending-review"
  | "in-review"
  | "twilio-rejected"
  | "twilio-approved"
  | "provisionally-approved";

/**
 * Options to pass to update a BundleInstance
 */
export interface BundleContextUpdateOptions {
  /**  */
  status?: BundleStatus;
  /** The URL we call to inform your application of status changes. */
  statusCallback?: string;
  /** The string that you assigned to describe the resource. */
  friendlyName?: string;
  /** The email address that will receive updates when the Bundle resource changes status. */
  email?: string;
}

/**
 * Options to pass to create a BundleInstance
 */
export interface BundleListInstanceCreateOptions {
  /** The string that you assigned to describe the resource. */
  friendlyName: string;
  /** The email address that will receive updates when the Bundle resource changes status. */
  email: string;
  /** The URL we call to inform your application of status changes. */
  statusCallback?: string;
  /** The unique string of a regulation that is associated to the Bundle resource. */
  regulationSid?: string;
  /** The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle\\\'s phone number country ownership request. */
  isoCountry?: string;
  /**  */
  endUserType?: BundleEndUserType;
  /** The type of phone number of the Bundle\\\'s ownership request. Can be `local`, `mobile`, `national`, or `toll free`. */
  numberType?: string;
}
/**
 * Options to pass to each
 */
export interface BundleListInstanceEachOptions {
  /** The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. */
  status?: BundleStatus;
  /** The string that you assigned to describe the resource. The column can contain 255 variable characters. */
  friendlyName?: string;
  /** The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. */
  regulationSid?: string;
  /** The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle\'s phone number country ownership request. */
  isoCountry?: string;
  /** The type of phone number of the Bundle\'s ownership request. Can be `local`, `mobile`, `national`, or `tollfree`. */
  numberType?: string;
  /** Indicates that the Bundle is a valid Bundle until a specified expiration date. */
  hasValidUntilDate?: boolean;
  /** Can be `valid-until` or `date-updated`. Defaults to `date-created`. */
  sortBy?: BundleSortBy;
  /** Default is `DESC`. Can be `ASC` or `DESC`. */
  sortDirection?: BundleSortDirection;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDate?: Date;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDateBefore?: Date;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDateAfter?: Date;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: BundleInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface BundleListInstanceOptions {
  /** The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. */
  status?: BundleStatus;
  /** The string that you assigned to describe the resource. The column can contain 255 variable characters. */
  friendlyName?: string;
  /** The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. */
  regulationSid?: string;
  /** The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle\'s phone number country ownership request. */
  isoCountry?: string;
  /** The type of phone number of the Bundle\'s ownership request. Can be `local`, `mobile`, `national`, or `tollfree`. */
  numberType?: string;
  /** Indicates that the Bundle is a valid Bundle until a specified expiration date. */
  hasValidUntilDate?: boolean;
  /** Can be `valid-until` or `date-updated`. Defaults to `date-created`. */
  sortBy?: BundleSortBy;
  /** Default is `DESC`. Can be `ASC` or `DESC`. */
  sortDirection?: BundleSortDirection;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDate?: Date;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDateBefore?: Date;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDateAfter?: Date;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface BundleListInstancePageOptions {
  /** The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. */
  status?: BundleStatus;
  /** The string that you assigned to describe the resource. The column can contain 255 variable characters. */
  friendlyName?: string;
  /** The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. */
  regulationSid?: string;
  /** The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle\'s phone number country ownership request. */
  isoCountry?: string;
  /** The type of phone number of the Bundle\'s ownership request. Can be `local`, `mobile`, `national`, or `tollfree`. */
  numberType?: string;
  /** Indicates that the Bundle is a valid Bundle until a specified expiration date. */
  hasValidUntilDate?: boolean;
  /** Can be `valid-until` or `date-updated`. Defaults to `date-created`. */
  sortBy?: BundleSortBy;
  /** Default is `DESC`. Can be `ASC` or `DESC`. */
  sortDirection?: BundleSortDirection;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDate?: Date;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDateBefore?: Date;
  /** Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. */
  validUntilDateAfter?: Date;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface BundleContext {
  bundleCopies: BundleCopyListInstance;
  evaluations: EvaluationListInstance;
  itemAssignments: ItemAssignmentListInstance;
  replaceItems: ReplaceItemsListInstance;

  /**
   * Remove a BundleInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a BundleInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  fetch(
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance>;

  /**
   * Update a BundleInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  update(
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance>;
  /**
   * Update a BundleInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  update(
    params: BundleContextUpdateOptions,
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance>;
  update(params?: any, callback?: any): Promise<BundleInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface BundleContextSolution {
  sid?: string;
}

export class BundleContextImpl implements BundleContext {
  protected _solution: BundleContextSolution;
  protected _uri: string;

  protected _bundleCopies?: BundleCopyListInstance;
  protected _evaluations?: EvaluationListInstance;
  protected _itemAssignments?: ItemAssignmentListInstance;
  protected _replaceItems?: ReplaceItemsListInstance;

  constructor(protected _version: V2, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/RegulatoryCompliance/Bundles/${sid}`;
  }

  get bundleCopies(): BundleCopyListInstance {
    this._bundleCopies =
      this._bundleCopies ||
      BundleCopyListInstance(this._version, this._solution.sid);
    return this._bundleCopies;
  }

  get evaluations(): EvaluationListInstance {
    this._evaluations =
      this._evaluations ||
      EvaluationListInstance(this._version, this._solution.sid);
    return this._evaluations;
  }

  get itemAssignments(): ItemAssignmentListInstance {
    this._itemAssignments =
      this._itemAssignments ||
      ItemAssignmentListInstance(this._version, this._solution.sid);
    return this._itemAssignments;
  }

  get replaceItems(): ReplaceItemsListInstance {
    this._replaceItems =
      this._replaceItems ||
      ReplaceItemsListInstance(this._version, this._solution.sid);
    return this._replaceItems;
  }

  remove(callback?: any): Promise<boolean> {
    let operationVersion = this._version,
      operationPromise = operationVersion.remove({
        uri: this._uri,
        method: "delete",
      });

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(callback?: any): Promise<BundleInstance> {
    let operationVersion = this._version,
      operationPromise = operationVersion.fetch({
        uri: this._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new BundleInstance(operationVersion, payload, this._solution.sid)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(params?: any, callback?: any): Promise<BundleInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["status"] !== undefined) data["Status"] = params["status"];
    if (params["statusCallback"] !== undefined)
      data["StatusCallback"] = params["statusCallback"];
    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];
    if (params["email"] !== undefined) data["Email"] = params["email"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = this._version,
      operationPromise = operationVersion.update({
        uri: this._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new BundleInstance(operationVersion, payload, this._solution.sid)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface BundlePayload extends TwilioResponsePayload {
  results: BundleResource[];
}

interface BundleResource {
  sid?: string | null;
  account_sid?: string | null;
  regulation_sid?: string | null;
  friendly_name?: string | null;
  status?: BundleStatus;
  valid_until?: Date | null;
  email?: string | null;
  status_callback?: string | null;
  date_created?: Date | null;
  date_updated?: Date | null;
  url?: string | null;
  links?: object | null;
}

export class BundleInstance {
  protected _solution: BundleContextSolution;
  protected _context?: BundleContext;

  constructor(protected _version: V2, payload: BundleResource, sid?: string) {
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.regulationSid = payload.regulation_sid;
    this.friendlyName = payload.friendly_name;
    this.status = payload.status;
    this.validUntil = deserialize.iso8601DateTime(payload.valid_until);
    this.email = payload.email;
    this.statusCallback = payload.status_callback;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.url = payload.url;
    this.links = payload.links;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * The unique string that identifies the resource.
   */
  sid?: string | null;
  /**
   * The SID of the Account that created the resource
   */
  accountSid?: string | null;
  /**
   * The unique string of a regulation.
   */
  regulationSid?: string | null;
  /**
   * The string that you assigned to describe the resource
   */
  friendlyName?: string | null;
  status?: BundleStatus;
  /**
   * The ISO 8601 date and time in GMT when the resource will be valid until.
   */
  validUntil?: Date | null;
  /**
   * The email address
   */
  email?: string | null;
  /**
   * The URL we call to inform your application of status changes.
   */
  statusCallback?: string | null;
  /**
   * The ISO 8601 date and time in GMT when the resource was created
   */
  dateCreated?: Date | null;
  /**
   * The ISO 8601 date and time in GMT when the resource was last updated
   */
  dateUpdated?: Date | null;
  /**
   * The absolute URL of the Bundle resource
   */
  url?: string | null;
  /**
   * The URLs of the Assigned Items of the Bundle resource
   */
  links?: object | null;

  private get _proxy(): BundleContext {
    this._context =
      this._context || new BundleContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Remove a BundleInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a BundleInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  fetch(
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a BundleInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  update(
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance>;
  /**
   * Update a BundleInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  update(
    params: BundleContextUpdateOptions,
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance>;
  update(params?: any, callback?: any): Promise<BundleInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Access the bundleCopies.
   */
  bundleCopies(): BundleCopyListInstance {
    return this._proxy.bundleCopies;
  }

  /**
   * Access the evaluations.
   */
  evaluations(): EvaluationListInstance {
    return this._proxy.evaluations;
  }

  /**
   * Access the itemAssignments.
   */
  itemAssignments(): ItemAssignmentListInstance {
    return this._proxy.itemAssignments;
  }

  /**
   * Access the replaceItems.
   */
  replaceItems(): ReplaceItemsListInstance {
    return this._proxy.replaceItems;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      regulationSid: this.regulationSid,
      friendlyName: this.friendlyName,
      status: this.status,
      validUntil: this.validUntil,
      email: this.email,
      statusCallback: this.statusCallback,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface BundleListInstance {
  (sid: string): BundleContext;
  get(sid: string): BundleContext;

  /**
   * Create a BundleInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleInstance
   */
  create(
    params: BundleListInstanceCreateOptions,
    callback?: (error: Error | null, item?: BundleInstance) => any
  ): Promise<BundleInstance>;
  create(params: any, callback?: any): Promise<BundleInstance>;

  /**
   * Streams BundleInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: BundleInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Streams BundleInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { BundleListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    params?: BundleListInstanceEachOptions,
    callback?: (item: BundleInstance, done: (err?: Error) => void) => void
  ): void;
  each(params?: any, callback?: any): void;
  /**
   * Retrieve a single target page of BundleInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    callback?: (error: Error | null, items: BundlePage) => any
  ): Promise<BundlePage>;
  /**
   * Retrieve a single target page of BundleInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl?: string,
    callback?: (error: Error | null, items: BundlePage) => any
  ): Promise<BundlePage>;
  getPage(params?: any, callback?: any): Promise<BundlePage>;
  /**
   * Lists BundleInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: BundleInstance[]) => any
  ): Promise<BundleInstance[]>;
  /**
   * Lists BundleInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { BundleListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    params?: BundleListInstanceOptions,
    callback?: (error: Error | null, items: BundleInstance[]) => any
  ): Promise<BundleInstance[]>;
  list(params?: any, callback?: any): Promise<BundleInstance[]>;
  /**
   * Retrieve a single page of BundleInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: BundlePage) => any
  ): Promise<BundlePage>;
  /**
   * Retrieve a single page of BundleInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { BundleListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    params: BundleListInstancePageOptions,
    callback?: (error: Error | null, items: BundlePage) => any
  ): Promise<BundlePage>;
  page(params?: any, callback?: any): Promise<BundlePage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface BundleSolution {}

interface BundleListInstanceImpl extends BundleListInstance {}
class BundleListInstanceImpl implements BundleListInstance {
  _version?: V2;
  _solution?: BundleSolution;
  _uri?: string;
}

export function BundleListInstance(version: V2): BundleListInstance {
  const instance = ((sid) => instance.get(sid)) as BundleListInstanceImpl;

  instance.get = function get(sid): BundleContext {
    return new BundleContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/RegulatoryCompliance/Bundles`;

  instance.create = function create(
    params: any,
    callback?: any
  ): Promise<BundleInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (
      params["friendlyName"] === null ||
      params["friendlyName"] === undefined
    ) {
      throw new Error("Required parameter \"params['friendlyName']\" missing.");
    }

    if (params["email"] === null || params["email"] === undefined) {
      throw new Error("Required parameter \"params['email']\" missing.");
    }

    let data: any = {};

    data["FriendlyName"] = params["friendlyName"];

    data["Email"] = params["email"];
    if (params["statusCallback"] !== undefined)
      data["StatusCallback"] = params["statusCallback"];
    if (params["regulationSid"] !== undefined)
      data["RegulationSid"] = params["regulationSid"];
    if (params["isoCountry"] !== undefined)
      data["IsoCountry"] = params["isoCountry"];
    if (params["endUserType"] !== undefined)
      data["EndUserType"] = params["endUserType"];
    if (params["numberType"] !== undefined)
      data["NumberType"] = params["numberType"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: this._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new BundleInstance(operationVersion, payload)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?: any,
    callback?: any
  ): Promise<BundlePage> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["status"] !== undefined) data["Status"] = params["status"];
    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];
    if (params["regulationSid"] !== undefined)
      data["RegulationSid"] = params["regulationSid"];
    if (params["isoCountry"] !== undefined)
      data["IsoCountry"] = params["isoCountry"];
    if (params["numberType"] !== undefined)
      data["NumberType"] = params["numberType"];
    if (params["hasValidUntilDate"] !== undefined)
      data["HasValidUntilDate"] = serialize.bool(params["hasValidUntilDate"]);
    if (params["sortBy"] !== undefined) data["SortBy"] = params["sortBy"];
    if (params["sortDirection"] !== undefined)
      data["SortDirection"] = params["sortDirection"];
    if (params["validUntilDate"] !== undefined)
      data["ValidUntilDate"] = serialize.iso8601DateTime(
        params["validUntilDate"]
      );
    if (params["validUntilDateBefore"] !== undefined)
      data["ValidUntilDate<"] = serialize.iso8601DateTime(
        params["validUntilDateBefore"]
      );
    if (params["validUntilDateAfter"] !== undefined)
      data["ValidUntilDate>"] = serialize.iso8601DateTime(
        params["validUntilDateAfter"]
      );
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.page !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: this._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new BundlePage(operationVersion, payload, this._solution)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl?: any,
    callback?: any
  ): Promise<BundlePage> {
    let operationPromise = this._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    operationPromise = operationPromise.then(
      (payload) => new BundlePage(this._version, payload, this._solution)
    );
    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return this._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(this.toJSON(), options);
  };

  return instance;
}

export class BundlePage extends Page<
  V2,
  BundlePayload,
  BundleResource,
  BundleInstance
> {
  /**
   * Initialize the BundlePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V2,
    response: Response<string>,
    solution: BundleSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of BundleInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: BundleResource): BundleInstance {
    return new BundleInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
