/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../base/Page";
import Response from "../../../http/response";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { SupportingDocumentTypeListInstance } from "./regulatoryCompliance/supportingDocumentType";
import { SupportingDocumentListInstance } from "./regulatoryCompliance/supportingDocument";
import { BundleListInstance } from "./regulatoryCompliance/bundle";
import { EndUserTypeListInstance } from "./regulatoryCompliance/endUserType";
import { RegulationListInstance } from "./regulatoryCompliance/regulation";
import { EndUserListInstance } from "./regulatoryCompliance/endUser";


export interface RegulatoryComplianceListInstance {

  supporting_document_types: SupportingDocumentTypeListInstance;
  supporting_documents: SupportingDocumentListInstance;
  bundles: BundleListInstance;
  end_user_types: EndUserTypeListInstance;
  regulations: RegulationListInstance;
  end_users: EndUserListInstance;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

interface RegulatoryComplianceListInstanceImpl extends RegulatoryComplianceListInstance {}
class RegulatoryComplianceListInstanceImpl implements RegulatoryComplianceListInstance {
  _version?: V2;
  _solution?: RegulatoryComplianceSolution;
  _uri?: string;

  _supporting_document_types?: SupportingDocumentTypeListInstance;
  _supporting_documents?: SupportingDocumentListInstance;
  _bundles?: BundleListInstance;
  _end_user_types?: EndUserTypeListInstance;
  _regulations?: RegulationListInstance;
  _end_users?: EndUserListInstance;
}

export function RegulatoryComplianceListInstance(version: V2): RegulatoryComplianceListInstance {
  const instance = {} as RegulatoryComplianceListInstanceImpl;

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/RegulatoryCompliance`;

  Object.defineProperty(instance, "supporting_document_types", {
    get: function supporting_document_types() {
      if (!this._supporting_document_types) {
        this._supporting_document_types = SupportingDocumentTypeListInstance(this._version);
      }
      return this._supporting_document_types;
    }
  });

  Object.defineProperty(instance, "supporting_documents", {
    get: function supporting_documents() {
      if (!this._supporting_documents) {
        this._supporting_documents = SupportingDocumentListInstance(this._version);
      }
      return this._supporting_documents;
    }
  });

  Object.defineProperty(instance, "bundles", {
    get: function bundles() {
      if (!this._bundles) {
        this._bundles = BundleListInstance(this._version);
      }
      return this._bundles;
    }
  });

  Object.defineProperty(instance, "end_user_types", {
    get: function end_user_types() {
      if (!this._end_user_types) {
        this._end_user_types = EndUserTypeListInstance(this._version);
      }
      return this._end_user_types;
    }
  });

  Object.defineProperty(instance, "regulations", {
    get: function regulations() {
      if (!this._regulations) {
        this._regulations = RegulationListInstance(this._version);
      }
      return this._regulations;
    }
  });

  Object.defineProperty(instance, "end_users", {
    get: function end_users() {
      if (!this._end_users) {
        this._end_users = EndUserListInstance(this._version);
      }
      return this._end_users;
    }
  });

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

