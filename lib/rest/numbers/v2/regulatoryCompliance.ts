/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { BundleListInstance } from "./regulatoryCompliance/bundle";
import { EndUserListInstance } from "./regulatoryCompliance/endUser";
import { EndUserTypeListInstance } from "./regulatoryCompliance/endUserType";
import { RegulationListInstance } from "./regulatoryCompliance/regulation";
import { SupportingDocumentListInstance } from "./regulatoryCompliance/supportingDocument";
import { SupportingDocumentTypeListInstance } from "./regulatoryCompliance/supportingDocumentType";

export interface RegulatoryComplianceSolution {}

export interface RegulatoryComplianceListInstance {
  _version: V2;
  _solution: RegulatoryComplianceSolution;
  _uri: string;

  _bundles?: BundleListInstance;
  bundles: BundleListInstance;
  _endUsers?: EndUserListInstance;
  endUsers: EndUserListInstance;
  _endUserTypes?: EndUserTypeListInstance;
  endUserTypes: EndUserTypeListInstance;
  _regulations?: RegulationListInstance;
  regulations: RegulationListInstance;
  _supportingDocuments?: SupportingDocumentListInstance;
  supportingDocuments: SupportingDocumentListInstance;
  _supportingDocumentTypes?: SupportingDocumentTypeListInstance;
  supportingDocumentTypes: SupportingDocumentTypeListInstance;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function RegulatoryComplianceListInstance(
  version: V2
): RegulatoryComplianceListInstance {
  const instance = {} as RegulatoryComplianceListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/RegulatoryCompliance`;

  Object.defineProperty(instance, "bundles", {
    get: function bundles() {
      if (!instance._bundles) {
        instance._bundles = BundleListInstance(instance._version);
      }
      return instance._bundles;
    },
  });

  Object.defineProperty(instance, "endUsers", {
    get: function endUsers() {
      if (!instance._endUsers) {
        instance._endUsers = EndUserListInstance(instance._version);
      }
      return instance._endUsers;
    },
  });

  Object.defineProperty(instance, "endUserTypes", {
    get: function endUserTypes() {
      if (!instance._endUserTypes) {
        instance._endUserTypes = EndUserTypeListInstance(instance._version);
      }
      return instance._endUserTypes;
    },
  });

  Object.defineProperty(instance, "regulations", {
    get: function regulations() {
      if (!instance._regulations) {
        instance._regulations = RegulationListInstance(instance._version);
      }
      return instance._regulations;
    },
  });

  Object.defineProperty(instance, "supportingDocuments", {
    get: function supportingDocuments() {
      if (!instance._supportingDocuments) {
        instance._supportingDocuments = SupportingDocumentListInstance(
          instance._version
        );
      }
      return instance._supportingDocuments;
    },
  });

  Object.defineProperty(instance, "supportingDocumentTypes", {
    get: function supportingDocumentTypes() {
      if (!instance._supportingDocumentTypes) {
        instance._supportingDocumentTypes = SupportingDocumentTypeListInstance(
          instance._version
        );
      }
      return instance._supportingDocumentTypes;
    },
  });

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
