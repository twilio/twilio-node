/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../../base/Page";
import Response from "../../../../http/response";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");


/**
 * Options to pass to create a SettingsInstance
 *
 * @property { boolean } [dialingPermissionsInheritance] &#x60;true&#x60; for the sub-account to inherit voice dialing permissions from the Master Project; otherwise &#x60;false&#x60;.
 */
export interface SettingsListInstanceCreateOptions {
  dialingPermissionsInheritance?: boolean;
}

export interface SettingsListInstance {



  /**
   * Streams SettingsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Function to process each record
   */
  each(callback?: (item: SettingsInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams SettingsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { SettingsListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(params?: SettingsListInstanceEachOptions, callback?: (item: SettingsInstance, done: (err?: Error) => void) => void): void;
  each(params?: any, callback?: any): void;
  /**
   * Retrieve a single target page of SettingsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: SettingsPage) => any): Promise<SettingsPage>;
  /**
   * Retrieve a single target page of SettingsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: SettingsPage) => any): Promise<SettingsPage>;
  getPage(params?: any, callback?: any): Promise<SettingsPage>;
  /**
   * Lists SettingsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: SettingsInstance[]) => any): Promise<SettingsInstance[]>;
  /**
   * Lists SettingsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { SettingsListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(params?: SettingsListInstanceOptions, callback?: (error: Error | null, items: SettingsInstance[]) => any): Promise<SettingsInstance[]>;
  list(params?: any, callback?: any): Promise<SettingsInstance[]>;
  /**
   * Retrieve a single page of SettingsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: SettingsPage) => any): Promise<SettingsPage>;
  /**
   * Retrieve a single page of SettingsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { SettingsListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(params: SettingsListInstancePageOptions, callback?: (error: Error | null, items: SettingsPage) => any): Promise<SettingsPage>;
  page(params?: any, callback?: any): Promise<SettingsPage>;

  /**
   * Create a SettingsInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed SettingsInstance
   */
  create(callback?: (error: Error | null, item?: SettingsInstance) => any): Promise<SettingsInstance>;
  /**
   * Create a SettingsInstance
   *
   * @param { SettingsListInstanceCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed SettingsInstance
   */
  create(params: SettingsListInstanceCreateOptions, callback?: (error: Error | null, item?: SettingsInstance) => any): Promise<SettingsInstance>;
  create(params?: any, callback?: any): Promise<SettingsInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface SettingsSolution {
}

interface SettingsListInstanceImpl extends SettingsListInstance {}
class SettingsListInstanceImpl implements SettingsListInstance {
  _version?: V1;
  _solution?: SettingsSolution;
  _uri?: string;

}

export function SettingsListInstance(version: V1): SettingsListInstance {
  const instance = {} as SettingsListInstanceImpl;

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/Settings`;

  instance.page = function page(callback?: any): Promise<SettingsPage> {

    let operationVersion = version,
        operationPromise = operationVersion.page({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new SettingsPage(operationVersion, payload, this._solution));

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;

  }
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(targetUrl?: any, callback?: any): Promise<SettingsPage> {
    let operationPromise = this._version._domain.twilio.request({method: 'get', uri: targetUrl});

    operationPromise = operationPromise.then(payload => new SettingsPage(this._version, payload, this._solution));
    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;
  }



  instance.create = function create(params?: any, callback?: any): Promise<SettingsInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params.dialingPermissionsInheritance !== undefined) data['DialingPermissionsInheritance'] = serialize.bool(params.dialingPermissionsInheritance);

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post', params: data, headers });
    
    operationPromise = operationPromise.then(payload => new SettingsInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;



    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface SettingsPayload extends SettingsResource, Page.TwilioResponsePayload {
}

interface SettingsResource {
  dialing_permissions_inheritance?: boolean | null;
  url?: string | null;
}

export class SettingsInstance {

  constructor(protected _version: V1, payload: SettingsPayload) {
    this.dialingPermissionsInheritance = payload.dialing_permissions_inheritance;
    this.url = payload.url;

  }

  /**
   * `true` if the sub-account will inherit voice dialing permissions from the Master Project; otherwise `false`
   */
  dialingPermissionsInheritance?: boolean | null;
  /**
   * The absolute URL of this resource
   */
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      dialingPermissionsInheritance: this.dialingPermissionsInheritance, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export class SettingsPage extends Page<V1, SettingsPayload, SettingsResource, SettingsInstance> {
  /**
   * Initialize the SettingsPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: SettingsSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of SettingsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SettingsPayload): SettingsInstance {
    return new SettingsInstance(
      this._version,
      payload,
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

