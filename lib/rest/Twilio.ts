/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BaseTwilio, ClientOpts } from "../base/BaseTwilio";
import Accounts from "./Accounts";
import Api from "./Api";
import Autopilot from "./Autopilot";
import Bulkexports from "./Bulkexports";
import Chat from "./Chat";
import Content from "./Content";
import Conversations from "./Conversations";
import Events from "./Events";
import FlexApi from "./FlexApi";
import FrontlineApi from "./FrontlineApi";
import Insights from "./Insights";
import IpMessaging from "./IpMessaging";
import Lookups from "./Lookups";
import Media from "./Media";
import Messaging from "./Messaging";
import Microvisor from "./Microvisor";
import Monitor from "./Monitor";
import Notify from "./Notify";
import Numbers from "./Numbers";
import Oauth from "./Oauth";
import Preview from "./Preview";
import Pricing from "./Pricing";
import Proxy from "./Proxy";
import Routes from "./Routes";
import Serverless from "./Serverless";
import Studio from "./Studio";
import Supersim from "./Supersim";
import Sync from "./Sync";
import Taskrouter from "./Taskrouter";
import Trunking from "./Trunking";
import Trusthub from "./Trusthub";
import Verify from "./Verify";
import Video from "./Video";
import Voice from "./Voice";
import Wireless from "./Wireless";
import { AddressListInstance } from "./api/v2010/account/address";
import { ApplicationListInstance } from "./api/v2010/account/application";
import { AuthorizedConnectAppListInstance } from "./api/v2010/account/authorizedConnectApp";
import { AvailablePhoneNumberCountryListInstance } from "./api/v2010/account/availablePhoneNumberCountry";
import { BalanceListInstance } from "./api/v2010/account/balance";
import { CallListInstance } from "./api/v2010/account/call";
import { ConferenceListInstance } from "./api/v2010/account/conference";
import { ConnectAppListInstance } from "./api/v2010/account/connectApp";
import { IncomingPhoneNumberListInstance } from "./api/v2010/account/incomingPhoneNumber";
import { KeyListInstance } from "./api/v2010/account/key";
import { MessageListInstance } from "./api/v2010/account/message";
import { NewKeyListInstance } from "./api/v2010/account/newKey";
import { NewSigningKeyListInstance } from "./api/v2010/account/newSigningKey";
import { NotificationListInstance } from "./api/v2010/account/notification";
import { OutgoingCallerIdListInstance } from "./api/v2010/account/outgoingCallerId";
import { QueueListInstance } from "./api/v2010/account/queue";
import { RecordingListInstance } from "./api/v2010/account/recording";
import { ShortCodeListInstance } from "./api/v2010/account/shortCode";
import { SigningKeyListInstance } from "./api/v2010/account/signingKey";
import { SipListInstance } from "./api/v2010/account/sip";
import { TokenListInstance } from "./api/v2010/account/token";
import { TranscriptionListInstance } from "./api/v2010/account/transcription";
import { UsageListInstance } from "./api/v2010/account/usage";
import { ValidationRequestListInstance } from "./api/v2010/account/validationRequest";

/* jshint ignore:start */
/**
 * Twilio Client to interact with the Rest API
 *
 * @constructor Twilio
 * @property (Twilio.Accounts) accounts - accounts domain
 * @property (Twilio.Api) api - api domain
 * @property (Twilio.Autopilot) autopilot - autopilot domain
 * @property (Twilio.Bulkexports) bulkexports - bulkexports domain
 * @property (Twilio.Chat) chat - chat domain
 * @property (Twilio.Content) content - content domain
 * @property (Twilio.Conversations) conversations - conversations domain
 * @property (Twilio.Events) events - events domain
 * @property (Twilio.FlexApi) flexApi - flexApi domain
 * @property (Twilio.FrontlineApi) frontlineApi - frontlineApi domain
 * @property (Twilio.Insights) insights - insights domain
 * @property (Twilio.IpMessaging) ipMessaging - ipMessaging domain
 * @property (Twilio.Lookups) lookups - lookups domain
 * @property (Twilio.Media) media - media domain
 * @property (Twilio.Messaging) messaging - messaging domain
 * @property (Twilio.Microvisor) microvisor - microvisor domain
 * @property (Twilio.Monitor) monitor - monitor domain
 * @property (Twilio.Notify) notify - notify domain
 * @property (Twilio.Numbers) numbers - numbers domain
 * @property (Twilio.Oauth) oauth - oauth domain
 * @property (Twilio.Preview) preview - preview domain
 * @property (Twilio.Pricing) pricing - pricing domain
 * @property (Twilio.Proxy) proxy - proxy domain
 * @property (Twilio.Routes) routes - routes domain
 * @property (Twilio.Serverless) serverless - serverless domain
 * @property (Twilio.Studio) studio - studio domain
 * @property (Twilio.Supersim) supersim - supersim domain
 * @property (Twilio.Sync) sync - sync domain
 * @property (Twilio.Taskrouter) taskrouter - taskrouter domain
 * @property (Twilio.Trunking) trunking - trunking domain
 * @property (Twilio.Trusthub) trusthub - trusthub domain
 * @property (Twilio.Verify) verify - verify domain
 * @property (Twilio.Video) video - video domain
 * @property (Twilio.Voice) voice - voice domain
 * @property (Twilio.Wireless) wireless - wireless domain
 * @property (Twilio.Api.V2010.AccountContext.AddressesList) addresses - addresses resource
 * @property (Twilio.Api.V2010.AccountContext.ApplicationsList) applications - applications resource
 * @property (Twilio.Api.V2010.AccountContext.AuthorizedConnectAppsList) authorizedConnectApps - authorizedConnectApps resource
 * @property (Twilio.Api.V2010.AccountContext.AvailablePhoneNumbersList) availablePhoneNumbers - availablePhoneNumbers resource
 * @property (Twilio.Api.V2010.AccountContext.BalanceList) balance - balance resource
 * @property (Twilio.Api.V2010.AccountContext.CallsList) calls - calls resource
 * @property (Twilio.Api.V2010.AccountContext.ConferencesList) conferences - conferences resource
 * @property (Twilio.Api.V2010.AccountContext.ConnectAppsList) connectApps - connectApps resource
 * @property (Twilio.Api.V2010.AccountContext.IncomingPhoneNumbersList) incomingPhoneNumbers - incomingPhoneNumbers resource
 * @property (Twilio.Api.V2010.AccountContext.KeysList) keys - keys resource
 * @property (Twilio.Api.V2010.AccountContext.MessagesList) messages - messages resource
 * @property (Twilio.Api.V2010.AccountContext.NewKeysList) newKeys - newKeys resource
 * @property (Twilio.Api.V2010.AccountContext.NewSigningKeysList) newSigningKeys - newSigningKeys resource
 * @property (Twilio.Api.V2010.AccountContext.NotificationsList) notifications - notifications resource
 * @property (Twilio.Api.V2010.AccountContext.OutgoingCallerIdsList) outgoingCallerIds - outgoingCallerIds resource
 * @property (Twilio.Api.V2010.AccountContext.QueuesList) queues - queues resource
 * @property (Twilio.Api.V2010.AccountContext.RecordingsList) recordings - recordings resource
 * @property (Twilio.Api.V2010.AccountContext.ShortCodesList) shortCodes - shortCodes resource
 * @property (Twilio.Api.V2010.AccountContext.SigningKeysList) signingKeys - signingKeys resource
 * @property (Twilio.Api.V2010.AccountContext.SipList) sip - sip resource
 * @property (Twilio.Api.V2010.AccountContext.TokensList) tokens - tokens resource
 * @property (Twilio.Api.V2010.AccountContext.TranscriptionsList) transcriptions - transcriptions resource
 * @property (Twilio.Api.V2010.AccountContext.UsageList) usage - usage resource
 * @property (Twilio.Api.V2010.AccountContext.ValidationRequestsList) validationRequests - validationRequests resource
 *
 * @param {string} username -
 *          The username used for authentication. This is normally account sid, but if using key/secret auth will be the api key sid.
 * @param {string} password -
 *          The password used for authentication. This is normally auth token, but if using key/secret auth will be the secret.
 * @param {ClientOpts} [opts] - The options argument
 *
 * @returns {Twilio} A new instance of Twilio client
 */
/* jshint ignore:end */

class Twilio extends BaseTwilio {
  _accounts: Accounts;
  _api: Api;
  _autopilot: Autopilot;
  _bulkexports: Bulkexports;
  _chat: Chat;
  _content: Content;
  _conversations: Conversations;
  _events: Events;
  _flexApi: FlexApi;
  _frontlineApi: FrontlineApi;
  _insights: Insights;
  _ipMessaging: IpMessaging;
  _lookups: Lookups;
  _media: Media;
  _messaging: Messaging;
  _microvisor: Microvisor;
  _monitor: Monitor;
  _notify: Notify;
  _numbers: Numbers;
  _oauth: Oauth;
  _preview: Preview;
  _pricing: Pricing;
  _proxy: Proxy;
  _routes: Routes;
  _serverless: Serverless;
  _studio: Studio;
  _supersim: Supersim;
  _sync: Sync;
  _taskrouter: Taskrouter;
  _trunking: Trunking;
  _trusthub: Trusthub;
  _verify: Verify;
  _video: Video;
  _voice: Voice;
  _wireless: Wireless;

  constructor(username?: string, password?: string, opts?: ClientOpts) {
    super(username, password, opts);

    if (this.opts?.lazyLoading === false) {
      this.accounts;
      this.api;
      this.autopilot;
      this.bulkexports;
      this.chat;
      this.content;
      this.conversations;
      this.events;
      this.flexApi;
      this.frontlineApi;
      this.insights;
      this.ipMessaging;
      this.lookups;
      this.media;
      this.messaging;
      this.microvisor;
      this.monitor;
      this.notify;
      this.numbers;
      this.oauth;
      this.preview;
      this.pricing;
      this.proxy;
      this.routes;
      this.serverless;
      this.studio;
      this.supersim;
      this.sync;
      this.taskrouter;
      this.trunking;
      this.trusthub;
      this.verify;
      this.video;
      this.voice;
      this.wireless;
    }
  }

  //Domains
  get accounts(): Accounts {
    if (!this._accounts) {
      const Accounts = require("./Accounts"); /* jshint ignore:line */
      this._accounts = new Accounts(this);
    }
    return this._accounts;
  }
  get api(): Api {
    if (!this._api) {
      const Api = require("./Api"); /* jshint ignore:line */
      this._api = new Api(this);
    }
    return this._api;
  }
  get autopilot(): Autopilot {
    if (!this._autopilot) {
      const Autopilot = require("./Autopilot"); /* jshint ignore:line */
      this._autopilot = new Autopilot(this);
    }
    return this._autopilot;
  }
  get bulkexports(): Bulkexports {
    if (!this._bulkexports) {
      const Bulkexports = require("./Bulkexports"); /* jshint ignore:line */
      this._bulkexports = new Bulkexports(this);
    }
    return this._bulkexports;
  }
  get chat(): Chat {
    if (!this._chat) {
      const Chat = require("./Chat"); /* jshint ignore:line */
      this._chat = new Chat(this);
    }
    return this._chat;
  }
  get content(): Content {
    if (!this._content) {
      const Content = require("./Content"); /* jshint ignore:line */
      this._content = new Content(this);
    }
    return this._content;
  }
  get conversations(): Conversations {
    if (!this._conversations) {
      const Conversations = require("./Conversations"); /* jshint ignore:line */
      this._conversations = new Conversations(this);
    }
    return this._conversations;
  }
  get events(): Events {
    if (!this._events) {
      const Events = require("./Events"); /* jshint ignore:line */
      this._events = new Events(this);
    }
    return this._events;
  }
  get flexApi(): FlexApi {
    if (!this._flexApi) {
      const FlexApi = require("./FlexApi"); /* jshint ignore:line */
      this._flexApi = new FlexApi(this);
    }
    return this._flexApi;
  }
  get frontlineApi(): FrontlineApi {
    if (!this._frontlineApi) {
      const FrontlineApi = require("./FrontlineApi"); /* jshint ignore:line */
      this._frontlineApi = new FrontlineApi(this);
    }
    return this._frontlineApi;
  }
  get insights(): Insights {
    if (!this._insights) {
      const Insights = require("./Insights"); /* jshint ignore:line */
      this._insights = new Insights(this);
    }
    return this._insights;
  }
  get ipMessaging(): IpMessaging {
    if (!this._ipMessaging) {
      const IpMessaging = require("./IpMessaging"); /* jshint ignore:line */
      this._ipMessaging = new IpMessaging(this);
    }
    return this._ipMessaging;
  }
  get lookups(): Lookups {
    if (!this._lookups) {
      const Lookups = require("./Lookups"); /* jshint ignore:line */
      this._lookups = new Lookups(this);
    }
    return this._lookups;
  }
  get media(): Media {
    if (!this._media) {
      const Media = require("./Media"); /* jshint ignore:line */
      this._media = new Media(this);
    }
    return this._media;
  }
  get messaging(): Messaging {
    if (!this._messaging) {
      const Messaging = require("./Messaging"); /* jshint ignore:line */
      this._messaging = new Messaging(this);
    }
    return this._messaging;
  }
  get microvisor(): Microvisor {
    if (!this._microvisor) {
      const Microvisor = require("./Microvisor"); /* jshint ignore:line */
      this._microvisor = new Microvisor(this);
    }
    return this._microvisor;
  }
  get monitor(): Monitor {
    if (!this._monitor) {
      const Monitor = require("./Monitor"); /* jshint ignore:line */
      this._monitor = new Monitor(this);
    }
    return this._monitor;
  }
  get notify(): Notify {
    if (!this._notify) {
      const Notify = require("./Notify"); /* jshint ignore:line */
      this._notify = new Notify(this);
    }
    return this._notify;
  }
  get numbers(): Numbers {
    if (!this._numbers) {
      const Numbers = require("./Numbers"); /* jshint ignore:line */
      this._numbers = new Numbers(this);
    }
    return this._numbers;
  }
  get oauth(): Oauth {
    if (!this._oauth) {
      const Oauth = require("./Oauth"); /* jshint ignore:line */
      this._oauth = new Oauth(this);
    }
    return this._oauth;
  }
  get preview(): Preview {
    if (!this._preview) {
      const Preview = require("./Preview"); /* jshint ignore:line */
      this._preview = new Preview(this);
    }
    return this._preview;
  }
  get pricing(): Pricing {
    if (!this._pricing) {
      const Pricing = require("./Pricing"); /* jshint ignore:line */
      this._pricing = new Pricing(this);
    }
    return this._pricing;
  }
  get proxy(): Proxy {
    if (!this._proxy) {
      const Proxy = require("./Proxy"); /* jshint ignore:line */
      this._proxy = new Proxy(this);
    }
    return this._proxy;
  }
  get routes(): Routes {
    if (!this._routes) {
      const Routes = require("./Routes"); /* jshint ignore:line */
      this._routes = new Routes(this);
    }
    return this._routes;
  }
  get serverless(): Serverless {
    if (!this._serverless) {
      const Serverless = require("./Serverless"); /* jshint ignore:line */
      this._serverless = new Serverless(this);
    }
    return this._serverless;
  }
  get studio(): Studio {
    if (!this._studio) {
      const Studio = require("./Studio"); /* jshint ignore:line */
      this._studio = new Studio(this);
    }
    return this._studio;
  }
  get supersim(): Supersim {
    if (!this._supersim) {
      const Supersim = require("./Supersim"); /* jshint ignore:line */
      this._supersim = new Supersim(this);
    }
    return this._supersim;
  }
  get sync(): Sync {
    if (!this._sync) {
      const Sync = require("./Sync"); /* jshint ignore:line */
      this._sync = new Sync(this);
    }
    return this._sync;
  }
  get taskrouter(): Taskrouter {
    if (!this._taskrouter) {
      const Taskrouter = require("./Taskrouter"); /* jshint ignore:line */
      this._taskrouter = new Taskrouter(this);
    }
    return this._taskrouter;
  }
  get trunking(): Trunking {
    if (!this._trunking) {
      const Trunking = require("./Trunking"); /* jshint ignore:line */
      this._trunking = new Trunking(this);
    }
    return this._trunking;
  }
  get trusthub(): Trusthub {
    if (!this._trusthub) {
      const Trusthub = require("./Trusthub"); /* jshint ignore:line */
      this._trusthub = new Trusthub(this);
    }
    return this._trusthub;
  }
  get verify(): Verify {
    if (!this._verify) {
      const Verify = require("./Verify"); /* jshint ignore:line */
      this._verify = new Verify(this);
    }
    return this._verify;
  }
  get video(): Video {
    if (!this._video) {
      const Video = require("./Video"); /* jshint ignore:line */
      this._video = new Video(this);
    }
    return this._video;
  }
  get voice(): Voice {
    if (!this._voice) {
      const Voice = require("./Voice"); /* jshint ignore:line */
      this._voice = new Voice(this);
    }
    return this._voice;
  }
  get wireless(): Wireless {
    if (!this._wireless) {
      const Wireless = require("./Wireless"); /* jshint ignore:line */
      this._wireless = new Wireless(this);
    }
    return this._wireless;
  }

  get addresses(): AddressListInstance {
    return this.api.v2010.account.addresses;
  }
  get applications(): ApplicationListInstance {
    return this.api.v2010.account.applications;
  }
  get authorizedConnectApps(): AuthorizedConnectAppListInstance {
    return this.api.v2010.account.authorizedConnectApps;
  }
  get availablePhoneNumbers(): AvailablePhoneNumberCountryListInstance {
    return this.api.v2010.account.availablePhoneNumbers;
  }
  get balance(): BalanceListInstance {
    return this.api.v2010.account.balance;
  }
  get calls(): CallListInstance {
    return this.api.v2010.account.calls;
  }
  get conferences(): ConferenceListInstance {
    return this.api.v2010.account.conferences;
  }
  get connectApps(): ConnectAppListInstance {
    return this.api.v2010.account.connectApps;
  }
  get incomingPhoneNumbers(): IncomingPhoneNumberListInstance {
    return this.api.v2010.account.incomingPhoneNumbers;
  }
  get keys(): KeyListInstance {
    return this.api.v2010.account.keys;
  }
  get messages(): MessageListInstance {
    return this.api.v2010.account.messages;
  }
  get newKeys(): NewKeyListInstance {
    return this.api.v2010.account.newKeys;
  }
  get newSigningKeys(): NewSigningKeyListInstance {
    return this.api.v2010.account.newSigningKeys;
  }
  get notifications(): NotificationListInstance {
    return this.api.v2010.account.notifications;
  }
  get outgoingCallerIds(): OutgoingCallerIdListInstance {
    return this.api.v2010.account.outgoingCallerIds;
  }
  get queues(): QueueListInstance {
    return this.api.v2010.account.queues;
  }
  get recordings(): RecordingListInstance {
    return this.api.v2010.account.recordings;
  }
  get shortCodes(): ShortCodeListInstance {
    return this.api.v2010.account.shortCodes;
  }
  get signingKeys(): SigningKeyListInstance {
    return this.api.v2010.account.signingKeys;
  }
  get sip(): SipListInstance {
    return this.api.v2010.account.sip;
  }
  get tokens(): TokenListInstance {
    return this.api.v2010.account.tokens;
  }
  get transcriptions(): TranscriptionListInstance {
    return this.api.v2010.account.transcriptions;
  }
  get usage(): UsageListInstance {
    return this.api.v2010.account.usage;
  }
  get validationRequests(): ValidationRequestListInstance {
    return this.api.v2010.account.validationRequests;
  }
}

export = Twilio;
