/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BaseTwilio, ClientOpts } from "../base/BaseTwilio";

/* jshint ignore:start */
/**
 * Twilio Client to interact with the Rest API
 */
/* jshint ignore:end */

class Twilio extends BaseTwilio {
  /** (Twilio.Accounts) - accounts domain */
  _accounts: any;
  /** (Twilio.Api) - api domain */
  _api: any;
  /** (Twilio.Autopilot) - autopilot domain */
  _autopilot: any;
  /** (Twilio.Bulkexports) - bulkexports domain */
  _bulkexports: any;
  /** (Twilio.Chat) - chat domain */
  _chat: any;
  /** (Twilio.Content) - content domain */
  _content: any;
  /** (Twilio.Conversations) - conversations domain */
  _conversations: any;
  /** (Twilio.Events) - events domain */
  _events: any;
  /** (Twilio.FlexApi) - flexApi domain */
  _flexApi: any;
  /** (Twilio.FrontlineApi) - frontlineApi domain */
  _frontlineApi: any;
  /** (Twilio.Insights) - insights domain */
  _insights: any;
  /** (Twilio.IpMessaging) - ipMessaging domain */
  _ipMessaging: any;
  /** (Twilio.Lookups) - lookups domain */
  _lookups: any;
  /** (Twilio.Media) - media domain */
  _media: any;
  /** (Twilio.Messaging) - messaging domain */
  _messaging: any;
  /** (Twilio.Microvisor) - microvisor domain */
  _microvisor: any;
  /** (Twilio.Monitor) - monitor domain */
  _monitor: any;
  /** (Twilio.Notify) - notify domain */
  _notify: any;
  /** (Twilio.Numbers) - numbers domain */
  _numbers: any;
  /** (Twilio.Oauth) - oauth domain */
  _oauth: any;
  /** (Twilio.Preview) - preview domain */
  _preview: any;
  /** (Twilio.Pricing) - pricing domain */
  _pricing: any;
  /** (Twilio.Proxy) - proxy domain */
  _proxy: any;
  /** (Twilio.Routes) - routes domain */
  _routes: any;
  /** (Twilio.Serverless) - serverless domain */
  _serverless: any;
  /** (Twilio.Studio) - studio domain */
  _studio: any;
  /** (Twilio.Supersim) - supersim domain */
  _supersim: any;
  /** (Twilio.Sync) - sync domain */
  _sync: any;
  /** (Twilio.Taskrouter) - taskrouter domain */
  _taskrouter: any;
  /** (Twilio.Trunking) - trunking domain */
  _trunking: any;
  /** (Twilio.Trusthub) - trusthub domain */
  _trusthub: any;
  /** (Twilio.Verify) - verify domain */
  _verify: any;
  /** (Twilio.Video) - video domain */
  _video: any;
  /** (Twilio.Voice) - voice domain */
  _voice: any;
  /** (Twilio.Wireless) - wireless domain */
  _wireless: any;

  /* jshint ignore:start */
  /**
   * Creates a new instance of Twilio Client
   *
   * @param username -
   *          The username used for authentication. This is normally account sid, but if using key/secret auth will be the api key sid.
   * @param password -
   *          The password used for authentication. This is normally auth token, but if using key/secret auth will be the secret.
   * @param opts - The options argument
   *
   * @returns A new instance of Twilio client
   */
  /* jshint ignore:end */
  constructor(username?: string, password?: string, opts?: ClientOpts) {
    super(username, password, opts);

    if (this.opts?.lazyLoading === false) {
      this.accounts;
      this.api;
      this.autopilot;
      this.bulkexports;
      this.chat;
      this.content;
      this.conversations;
      this.events;
      this.flexApi;
      this.frontlineApi;
      this.insights;
      this.ipMessaging;
      this.lookups;
      this.media;
      this.messaging;
      this.microvisor;
      this.monitor;
      this.notify;
      this.numbers;
      this.oauth;
      this.preview;
      this.pricing;
      this.proxy;
      this.routes;
      this.serverless;
      this.studio;
      this.supersim;
      this.sync;
      this.taskrouter;
      this.trunking;
      this.trusthub;
      this.verify;
      this.video;
      this.voice;
      this.wireless;
    }
  }

  //Domains
  /** Getter for (Twilio.Accounts) domain */
  get accounts() {
    if (!this._accounts) {
      const Accounts = require("./Accounts"); /* jshint ignore:line */
      this._accounts = new Accounts(this);
    }
    return this._accounts;
  }
  /** Getter for (Twilio.Api) domain */
  get api() {
    if (!this._api) {
      const Api = require("./Api"); /* jshint ignore:line */
      this._api = new Api(this);
    }
    return this._api;
  }
  /** Getter for (Twilio.Autopilot) domain */
  get autopilot() {
    if (!this._autopilot) {
      const Autopilot = require("./Autopilot"); /* jshint ignore:line */
      this._autopilot = new Autopilot(this);
    }
    return this._autopilot;
  }
  /** Getter for (Twilio.Bulkexports) domain */
  get bulkexports() {
    if (!this._bulkexports) {
      const Bulkexports = require("./Bulkexports"); /* jshint ignore:line */
      this._bulkexports = new Bulkexports(this);
    }
    return this._bulkexports;
  }
  /** Getter for (Twilio.Chat) domain */
  get chat() {
    if (!this._chat) {
      const Chat = require("./Chat"); /* jshint ignore:line */
      this._chat = new Chat(this);
    }
    return this._chat;
  }
  /** Getter for (Twilio.Content) domain */
  get content() {
    if (!this._content) {
      const Content = require("./Content"); /* jshint ignore:line */
      this._content = new Content(this);
    }
    return this._content;
  }
  /** Getter for (Twilio.Conversations) domain */
  get conversations() {
    if (!this._conversations) {
      const Conversations = require("./Conversations"); /* jshint ignore:line */
      this._conversations = new Conversations(this);
    }
    return this._conversations;
  }
  /** Getter for (Twilio.Events) domain */
  get events() {
    if (!this._events) {
      const Events = require("./Events"); /* jshint ignore:line */
      this._events = new Events(this);
    }
    return this._events;
  }
  /** Getter for (Twilio.FlexApi) domain */
  get flexApi() {
    if (!this._flexApi) {
      const FlexApi = require("./FlexApi"); /* jshint ignore:line */
      this._flexApi = new FlexApi(this);
    }
    return this._flexApi;
  }
  /** Getter for (Twilio.FrontlineApi) domain */
  get frontlineApi() {
    if (!this._frontlineApi) {
      const FrontlineApi = require("./FrontlineApi"); /* jshint ignore:line */
      this._frontlineApi = new FrontlineApi(this);
    }
    return this._frontlineApi;
  }
  /** Getter for (Twilio.Insights) domain */
  get insights() {
    if (!this._insights) {
      const Insights = require("./Insights"); /* jshint ignore:line */
      this._insights = new Insights(this);
    }
    return this._insights;
  }
  /** Getter for (Twilio.IpMessaging) domain */
  get ipMessaging() {
    if (!this._ipMessaging) {
      const IpMessaging = require("./IpMessaging"); /* jshint ignore:line */
      this._ipMessaging = new IpMessaging(this);
    }
    return this._ipMessaging;
  }
  /** Getter for (Twilio.Lookups) domain */
  get lookups() {
    if (!this._lookups) {
      const Lookups = require("./Lookups"); /* jshint ignore:line */
      this._lookups = new Lookups(this);
    }
    return this._lookups;
  }
  /** Getter for (Twilio.Media) domain */
  get media() {
    if (!this._media) {
      const Media = require("./Media"); /* jshint ignore:line */
      this._media = new Media(this);
    }
    return this._media;
  }
  /** Getter for (Twilio.Messaging) domain */
  get messaging() {
    if (!this._messaging) {
      const Messaging = require("./Messaging"); /* jshint ignore:line */
      this._messaging = new Messaging(this);
    }
    return this._messaging;
  }
  /** Getter for (Twilio.Microvisor) domain */
  get microvisor() {
    if (!this._microvisor) {
      const Microvisor = require("./Microvisor"); /* jshint ignore:line */
      this._microvisor = new Microvisor(this);
    }
    return this._microvisor;
  }
  /** Getter for (Twilio.Monitor) domain */
  get monitor() {
    if (!this._monitor) {
      const Monitor = require("./Monitor"); /* jshint ignore:line */
      this._monitor = new Monitor(this);
    }
    return this._monitor;
  }
  /** Getter for (Twilio.Notify) domain */
  get notify() {
    if (!this._notify) {
      const Notify = require("./Notify"); /* jshint ignore:line */
      this._notify = new Notify(this);
    }
    return this._notify;
  }
  /** Getter for (Twilio.Numbers) domain */
  get numbers() {
    if (!this._numbers) {
      const Numbers = require("./Numbers"); /* jshint ignore:line */
      this._numbers = new Numbers(this);
    }
    return this._numbers;
  }
  /** Getter for (Twilio.Oauth) domain */
  get oauth() {
    if (!this._oauth) {
      const Oauth = require("./Oauth"); /* jshint ignore:line */
      this._oauth = new Oauth(this);
    }
    return this._oauth;
  }
  /** Getter for (Twilio.Preview) domain */
  get preview() {
    if (!this._preview) {
      const Preview = require("./Preview"); /* jshint ignore:line */
      this._preview = new Preview(this);
    }
    return this._preview;
  }
  /** Getter for (Twilio.Pricing) domain */
  get pricing() {
    if (!this._pricing) {
      const Pricing = require("./Pricing"); /* jshint ignore:line */
      this._pricing = new Pricing(this);
    }
    return this._pricing;
  }
  /** Getter for (Twilio.Proxy) domain */
  get proxy() {
    if (!this._proxy) {
      const Proxy = require("./Proxy"); /* jshint ignore:line */
      this._proxy = new Proxy(this);
    }
    return this._proxy;
  }
  /** Getter for (Twilio.Routes) domain */
  get routes() {
    if (!this._routes) {
      const Routes = require("./Routes"); /* jshint ignore:line */
      this._routes = new Routes(this);
    }
    return this._routes;
  }
  /** Getter for (Twilio.Serverless) domain */
  get serverless() {
    if (!this._serverless) {
      const Serverless = require("./Serverless"); /* jshint ignore:line */
      this._serverless = new Serverless(this);
    }
    return this._serverless;
  }
  /** Getter for (Twilio.Studio) domain */
  get studio() {
    if (!this._studio) {
      const Studio = require("./Studio"); /* jshint ignore:line */
      this._studio = new Studio(this);
    }
    return this._studio;
  }
  /** Getter for (Twilio.Supersim) domain */
  get supersim() {
    if (!this._supersim) {
      const Supersim = require("./Supersim"); /* jshint ignore:line */
      this._supersim = new Supersim(this);
    }
    return this._supersim;
  }
  /** Getter for (Twilio.Sync) domain */
  get sync() {
    if (!this._sync) {
      const Sync = require("./Sync"); /* jshint ignore:line */
      this._sync = new Sync(this);
    }
    return this._sync;
  }
  /** Getter for (Twilio.Taskrouter) domain */
  get taskrouter() {
    if (!this._taskrouter) {
      const Taskrouter = require("./Taskrouter"); /* jshint ignore:line */
      this._taskrouter = new Taskrouter(this);
    }
    return this._taskrouter;
  }
  /** Getter for (Twilio.Trunking) domain */
  get trunking() {
    if (!this._trunking) {
      const Trunking = require("./Trunking"); /* jshint ignore:line */
      this._trunking = new Trunking(this);
    }
    return this._trunking;
  }
  /** Getter for (Twilio.Trusthub) domain */
  get trusthub() {
    if (!this._trusthub) {
      const Trusthub = require("./Trusthub"); /* jshint ignore:line */
      this._trusthub = new Trusthub(this);
    }
    return this._trusthub;
  }
  /** Getter for (Twilio.Verify) domain */
  get verify() {
    if (!this._verify) {
      const Verify = require("./Verify"); /* jshint ignore:line */
      this._verify = new Verify(this);
    }
    return this._verify;
  }
  /** Getter for (Twilio.Video) domain */
  get video() {
    if (!this._video) {
      const Video = require("./Video"); /* jshint ignore:line */
      this._video = new Video(this);
    }
    return this._video;
  }
  /** Getter for (Twilio.Voice) domain */
  get voice() {
    if (!this._voice) {
      const Voice = require("./Voice"); /* jshint ignore:line */
      this._voice = new Voice(this);
    }
    return this._voice;
  }
  /** Getter for (Twilio.Wireless) domain */
  get wireless() {
    if (!this._wireless) {
      const Wireless = require("./Wireless"); /* jshint ignore:line */
      this._wireless = new Wireless(this);
    }
    return this._wireless;
  }

  /** Getter for (Twilio.Api.V2010.AccountContext.AddressesList) addresses resource */
  get addresses() {
    return this.api.v2010.account.addresses;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.ApplicationsList) applications resource */
  get applications() {
    return this.api.v2010.account.applications;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.AuthorizedConnectAppsList) authorizedConnectApps resource */
  get authorizedConnectApps() {
    return this.api.v2010.account.authorizedConnectApps;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.AvailablePhoneNumbersList) availablePhoneNumbers resource */
  get availablePhoneNumbers() {
    return this.api.v2010.account.availablePhoneNumbers;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.BalanceList) balance resource */
  get balance() {
    return this.api.v2010.account.balance;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.CallsList) calls resource */
  get calls() {
    return this.api.v2010.account.calls;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.ConferencesList) conferences resource */
  get conferences() {
    return this.api.v2010.account.conferences;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.ConnectAppsList) connectApps resource */
  get connectApps() {
    return this.api.v2010.account.connectApps;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.IncomingPhoneNumbersList) incomingPhoneNumbers resource */
  get incomingPhoneNumbers() {
    return this.api.v2010.account.incomingPhoneNumbers;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.KeysList) keys resource */
  get keys() {
    return this.api.v2010.account.keys;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.MessagesList) messages resource */
  get messages() {
    return this.api.v2010.account.messages;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.NewKeysList) newKeys resource */
  get newKeys() {
    return this.api.v2010.account.newKeys;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.NewSigningKeysList) newSigningKeys resource */
  get newSigningKeys() {
    return this.api.v2010.account.newSigningKeys;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.NotificationsList) notifications resource */
  get notifications() {
    return this.api.v2010.account.notifications;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.OutgoingCallerIdsList) outgoingCallerIds resource */
  get outgoingCallerIds() {
    return this.api.v2010.account.outgoingCallerIds;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.QueuesList) queues resource */
  get queues() {
    return this.api.v2010.account.queues;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.RecordingsList) recordings resource */
  get recordings() {
    return this.api.v2010.account.recordings;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.ShortCodesList) shortCodes resource */
  get shortCodes() {
    return this.api.v2010.account.shortCodes;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.SigningKeysList) signingKeys resource */
  get signingKeys() {
    return this.api.v2010.account.signingKeys;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.SipList) sip resource */
  get sip() {
    return this.api.v2010.account.sip;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.TokensList) tokens resource */
  get tokens() {
    return this.api.v2010.account.tokens;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.TranscriptionsList) transcriptions resource */
  get transcriptions() {
    return this.api.v2010.account.transcriptions;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.UsageList) usage resource */
  get usage() {
    return this.api.v2010.account.usage;
  }
  /** Getter for (Twilio.Api.V2010.AccountContext.ValidationRequestsList) validationRequests resource */
  get validationRequests() {
    return this.api.v2010.account.validationRequests;
  }
}

export = Twilio;
