/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

export interface ApprovalFetchContext {
  /**
   * Fetch a ApprovalFetchInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApprovalFetchInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ApprovalFetchInstance) => any
  ): Promise<ApprovalFetchInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ApprovalFetchContextSolution {
  sid?: string;
}

export class ApprovalFetchContextImpl implements ApprovalFetchContext {
  protected _solution: ApprovalFetchContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Content/${sid}/ApprovalRequests`;
  }

  fetch(callback?: any): Promise<ApprovalFetchInstance> {
    let operationVersion = this._version,
      operationPromise = operationVersion.fetch({
        uri: this._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ApprovalFetchInstance(operationVersion, payload, this._solution.sid)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ApprovalFetchPayload extends ApprovalFetchResource {}

interface ApprovalFetchResource {
  sid?: string | null;
  account_sid?: string | null;
  whatsapp?: any | null;
  url?: string | null;
}

export class ApprovalFetchInstance {
  protected _solution: ApprovalFetchContextSolution;
  protected _context?: ApprovalFetchContext;

  constructor(
    protected _version: V1,
    payload: ApprovalFetchResource,
    sid: string
  ) {
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.whatsapp = payload.whatsapp;
    this.url = payload.url;

    this._solution = { sid };
  }

  /**
   * The unique string that identifies the Content resource
   */
  sid?: string | null;
  /**
   * The SID of the Account that created the Content resource
   */
  accountSid?: string | null;
  /**
   * Contains the whatsapp approval information for the Content resource
   */
  whatsapp?: any | null;
  /**
   * The URL of the resource, relative to `https://content.twilio.com`
   */
  url?: string | null;

  private get _proxy(): ApprovalFetchContext {
    this._context =
      this._context ||
      new ApprovalFetchContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a ApprovalFetchInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApprovalFetchInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ApprovalFetchInstance) => any
  ): Promise<ApprovalFetchInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      whatsapp: this.whatsapp,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ApprovalFetchListInstance {
  (): ApprovalFetchContext;
  get(): ApprovalFetchContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ApprovalFetchSolution {
  sid?: string;
}

interface ApprovalFetchListInstanceImpl extends ApprovalFetchListInstance {}
class ApprovalFetchListInstanceImpl implements ApprovalFetchListInstance {
  _version?: V1;
  _solution?: ApprovalFetchSolution;
  _uri?: string;
}

export function ApprovalFetchListInstance(
  version: V1,
  sid: string
): ApprovalFetchListInstance {
  if (!isValidPathParam(sid)) {
    throw new Error("Parameter 'sid' is not valid.");
  }

  const instance = (() => instance.get()) as ApprovalFetchListInstanceImpl;

  instance.get = function get(): ApprovalFetchContext {
    return new ApprovalFetchContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = { sid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return this._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(this.toJSON(), options);
  };

  return instance;
}
