/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import TrustedComms from "../TrustedComms";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");

/**
 * Options to pass to fetch a CurrentCallInstance
 *
 * @property { string } [xXcnamSensitivePhoneNumberFrom] The originating Phone Number, given in [E.164 format](https://www.twilio.com/docs/glossary/what-e164). This phone number should be a Twilio number, otherwise it will return an error with HTTP Status Code 400.
 * @property { string } [xXcnamSensitivePhoneNumberTo] The terminating Phone Number, given in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
 */
export interface CurrentCallContextFetchOptions {
  xXcnamSensitivePhoneNumberFrom?: string;
  xXcnamSensitivePhoneNumberTo?: string;
}

export interface CurrentCallContext {
  /**
   * Fetch a CurrentCallInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CurrentCallInstance
   */
  fetch(
    callback?: (error: Error | null, item?: CurrentCallInstance) => any
  ): Promise<CurrentCallInstance>;
  /**
   * Fetch a CurrentCallInstance
   *
   * @param { CurrentCallContextFetchOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CurrentCallInstance
   */
  fetch(
    params: CurrentCallContextFetchOptions,
    callback?: (error: Error | null, item?: CurrentCallInstance) => any
  ): Promise<CurrentCallInstance>;
  fetch(params?: any, callback?: any): Promise<CurrentCallInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface CurrentCallContextSolution {}

export class CurrentCallContextImpl implements CurrentCallContext {
  protected _solution: CurrentCallContextSolution;
  protected _uri: string;

  constructor(protected _version: TrustedComms) {
    this._solution = {};
    this._uri = `/CurrentCall`;
  }

  fetch(params?: any, callback?: any): Promise<CurrentCallInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    const headers: any = {};
    if (params["xXcnamSensitivePhoneNumberFrom"] !== undefined)
      headers["X-Xcnam-Sensitive-Phone-Number-From"] =
        params["xXcnamSensitivePhoneNumberFrom"];
    if (params["xXcnamSensitivePhoneNumberTo"] !== undefined)
      headers["X-Xcnam-Sensitive-Phone-Number-To"] =
        params["xXcnamSensitivePhoneNumberTo"];

    let operationVersion = this._version,
      operationPromise = operationVersion.fetch({
        uri: this._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new CurrentCallInstance(operationVersion, payload)
    );

    operationPromise = this._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface CurrentCallPayload extends CurrentCallResource {}

interface CurrentCallResource {
  bg_color?: string | null;
  caller?: string | null;
  created_at?: Date | null;
  font_color?: string | null;
  from?: string | null;
  logo?: string | null;
  manager?: string | null;
  reason?: string | null;
  shield_img?: string | null;
  sid?: string | null;
  status?: string | null;
  to?: string | null;
  url?: string | null;
  use_case?: string | null;
}

export class CurrentCallInstance {
  protected _solution: CurrentCallContextSolution;
  protected _context?: CurrentCallContext;

  constructor(protected _version: TrustedComms, payload: CurrentCallPayload) {
    this.bgColor = payload.bg_color;
    this.caller = payload.caller;
    this.createdAt = deserialize.iso8601DateTime(payload.created_at);
    this.fontColor = payload.font_color;
    this.from = payload.from;
    this.logo = payload.logo;
    this.manager = payload.manager;
    this.reason = payload.reason;
    this.shieldImg = payload.shield_img;
    this.sid = payload.sid;
    this.status = payload.status;
    this.to = payload.to;
    this.url = payload.url;
    this.useCase = payload.use_case;

    this._solution = {};
  }

  /**
   * Background color of the current phone call
   */
  bgColor?: string | null;
  /**
   * Caller name of the current phone call
   */
  caller?: string | null;
  /**
   * The date this current phone call was created
   */
  createdAt?: Date | null;
  /**
   * Font color of the current phone call
   */
  fontColor?: string | null;
  /**
   * The originating phone number
   */
  from?: string | null;
  /**
   * Logo URL of the caller
   */
  logo?: string | null;
  /**
   * The name of the CPS organization
   */
  manager?: string | null;
  /**
   * The business reason for this current phone call
   */
  reason?: string | null;
  /**
   * Shield image URL that serves as authenticity proof of the current phone call
   */
  shieldImg?: string | null;
  /**
   * A string that uniquely identifies this current branded phone call.
   */
  sid?: string | null;
  /**
   * The status of the current phone call
   */
  status?: string | null;
  /**
   * The terminating phone number
   */
  to?: string | null;
  /**
   * The URL of this resource.
   */
  url?: string | null;
  /**
   * The use case for the current phone call
   */
  useCase?: string | null;

  private get _proxy(): CurrentCallContext {
    this._context = this._context || new CurrentCallContextImpl(this._version);
    return this._context;
  }

  /**
   * Fetch a CurrentCallInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CurrentCallInstance
   */
  fetch(
    callback?: (error: Error | null, item?: CurrentCallInstance) => any
  ): Promise<CurrentCallInstance>;
  /**
   * Fetch a CurrentCallInstance
   *
   * @param { CurrentCallContextFetchOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CurrentCallInstance
   */
  fetch(
    params: CurrentCallContextFetchOptions,
    callback?: (error: Error | null, item?: CurrentCallInstance) => any
  ): Promise<CurrentCallInstance>;
  fetch(params?: any, callback?: any): Promise<CurrentCallInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      bgColor: this.bgColor,
      caller: this.caller,
      createdAt: this.createdAt,
      fontColor: this.fontColor,
      from: this.from,
      logo: this.logo,
      manager: this.manager,
      reason: this.reason,
      shieldImg: this.shieldImg,
      sid: this.sid,
      status: this.status,
      to: this.to,
      url: this.url,
      useCase: this.useCase,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface CurrentCallListInstance {
  (): CurrentCallContext;
  get(): CurrentCallContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface CurrentCallSolution {}

interface CurrentCallListInstanceImpl extends CurrentCallListInstance {}
class CurrentCallListInstanceImpl implements CurrentCallListInstance {
  _version?: TrustedComms;
  _solution?: CurrentCallSolution;
  _uri?: string;
}

export function CurrentCallListInstance(
  version: TrustedComms
): CurrentCallListInstance {
  const instance = (() => instance.get()) as CurrentCallListInstanceImpl;

  instance.get = function get(): CurrentCallContext {
    return new CurrentCallContextImpl(version);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return this._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(this.toJSON(), options);
  };

  return instance;
}
