/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../../base/Page";
import Response from "../../../../http/response";
import Understand from "../../Understand";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");


/**
 * Options to pass to create a AssistantFallbackActionsInstance
 *
 * @property { any } [fallbackActions] 
 */
export interface AssistantFallbackActionsListInstanceCreateOptions {
  fallbackActions?: any;
}

export interface AssistantFallbackActionsListInstance {



  /**
   * Streams AssistantFallbackActionsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Function to process each record
   */
  each(callback?: (item: AssistantFallbackActionsInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams AssistantFallbackActionsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AssistantFallbackActionsListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(params?: AssistantFallbackActionsListInstanceEachOptions, callback?: (item: AssistantFallbackActionsInstance, done: (err?: Error) => void) => void): void;
  each(params?: any, callback?: any): void;
  /**
   * Retrieve a single target page of AssistantFallbackActionsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: AssistantFallbackActionsPage) => any): Promise<AssistantFallbackActionsPage>;
  /**
   * Retrieve a single target page of AssistantFallbackActionsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: AssistantFallbackActionsPage) => any): Promise<AssistantFallbackActionsPage>;
  getPage(params?: any, callback?: any): Promise<AssistantFallbackActionsPage>;
  /**
   * Lists AssistantFallbackActionsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: AssistantFallbackActionsInstance[]) => any): Promise<AssistantFallbackActionsInstance[]>;
  /**
   * Lists AssistantFallbackActionsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AssistantFallbackActionsListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(params?: AssistantFallbackActionsListInstanceOptions, callback?: (error: Error | null, items: AssistantFallbackActionsInstance[]) => any): Promise<AssistantFallbackActionsInstance[]>;
  list(params?: any, callback?: any): Promise<AssistantFallbackActionsInstance[]>;
  /**
   * Retrieve a single page of AssistantFallbackActionsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: AssistantFallbackActionsPage) => any): Promise<AssistantFallbackActionsPage>;
  /**
   * Retrieve a single page of AssistantFallbackActionsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AssistantFallbackActionsListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(params: AssistantFallbackActionsListInstancePageOptions, callback?: (error: Error | null, items: AssistantFallbackActionsPage) => any): Promise<AssistantFallbackActionsPage>;
  page(params?: any, callback?: any): Promise<AssistantFallbackActionsPage>;

  /**
   * Create a AssistantFallbackActionsInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed AssistantFallbackActionsInstance
   */
  create(callback?: (error: Error | null, item?: AssistantFallbackActionsInstance) => any): Promise<AssistantFallbackActionsInstance>;
  /**
   * Create a AssistantFallbackActionsInstance
   *
   * @param { AssistantFallbackActionsListInstanceCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed AssistantFallbackActionsInstance
   */
  create(params: AssistantFallbackActionsListInstanceCreateOptions, callback?: (error: Error | null, item?: AssistantFallbackActionsInstance) => any): Promise<AssistantFallbackActionsInstance>;
  create(params?: any, callback?: any): Promise<AssistantFallbackActionsInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

interface AssistantFallbackActionsListInstanceImpl extends AssistantFallbackActionsListInstance {}
class AssistantFallbackActionsListInstanceImpl implements AssistantFallbackActionsListInstance {
  _version?: Understand;
  _solution?: AssistantFallbackActionsSolution;
  _uri?: string;

}

export function AssistantFallbackActionsListInstance(version: Understand, assistantSid: string): AssistantFallbackActionsListInstance {
  const instance = {} as AssistantFallbackActionsListInstanceImpl;

  instance._version = version;
  instance._solution = { assistantSid };
  instance._uri = `/Assistants/${assistantSid}/FallbackActions`;

  instance.page = function page(callback?: any): Promise<AssistantFallbackActionsPage> {

    let operationVersion = version,
        operationPromise = operationVersion.page({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new AssistantFallbackActionsPage(operationVersion, payload, this._solution));

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;

  }
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(targetUrl?: any, callback?: any): Promise<AssistantFallbackActionsPage> {
    let operationPromise = this._version._domain.twilio.request({method: 'get', uri: targetUrl});

    operationPromise = operationPromise.then(payload => new AssistantFallbackActionsPage(this._version, payload, this._solution));
    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;
  }



  instance.create = function create(params?: any, callback?: any): Promise<AssistantFallbackActionsInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params.fallbackActions !== undefined) data['FallbackActions'] = params.fallbackActions;

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post', params: data, headers });
    
    operationPromise = operationPromise.then(payload => new AssistantFallbackActionsInstance(operationVersion, payload, this._solution.assistantSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;



    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface AssistantFallbackActionsPayload extends AssistantFallbackActionsResource, Page.TwilioResponsePayload {
}

interface AssistantFallbackActionsResource {
  account_sid?: string | null;
  assistant_sid?: string | null;
  url?: string | null;
  data?: any | null;
}

export class AssistantFallbackActionsInstance {
  protected _solution: AssistantFallbackActionsSolution;
  protected _context?: AssistantFallbackActionsListInstance;

  constructor(protected _version: Understand, payload: AssistantFallbackActionsPayload, assistantSid?: string) {
    this.accountSid = payload.account_sid;
    this.assistantSid = payload.assistant_sid;
    this.url = payload.url;
    this.data = payload.data;

    this._solution = { assistantSid: assistantSid || this.assistantSid };
  }

  accountSid?: string | null;
  assistantSid?: string | null;
  url?: string | null;
  data?: any | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      assistantSid: this.assistantSid, 
      url: this.url, 
      data: this.data
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
export interface AssistantFallbackActionsSolution {
  assistantSid?: string;
}

export class AssistantFallbackActionsPage extends Page<Understand, AssistantFallbackActionsPayload, AssistantFallbackActionsResource, AssistantFallbackActionsInstance> {
  /**
   * Initialize the AssistantFallbackActionsPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Understand, response: Response<string>, solution: AssistantFallbackActionsSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of AssistantFallbackActionsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AssistantFallbackActionsPayload): AssistantFallbackActionsInstance {
    return new AssistantFallbackActionsInstance(
      this._version,
      payload,
      this._solution.assistantSid,
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

