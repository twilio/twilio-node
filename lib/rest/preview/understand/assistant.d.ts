/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Understand = require('../Understand');
import serialize = require('../../../base/serialize');
import { FieldTypeList } from './assistant/fieldType';
import { IntentList } from './assistant/intent';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { ModelBuildList } from './assistant/modelBuild';
import { QueryList } from './assistant/query';
import { SerializableClass } from '../../../interfaces';

/**
 * @description Initialize the AssistantList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 */
declare function AssistantList(version: Understand): AssistantListInstance;

interface AssistantResource {
  account_sid: string;
  callback_events: string;
  callback_url: string;
  date_created: Date;
  date_updated: Date;
  friendly_name: string;
  latest_model_build_sid: string;
  links: string;
  log_queries: boolean;
  response_url: string;
  sid: string;
  ttl: number;
  unique_name: string;
  url: string;
}

interface AssistantPayload extends AssistantResource, Page.TwilioResponsePayload {
}

interface AssistantListInstance {
  /* jshint ignore:start */
  /**
   * create a AssistantInstance
   *
   * @function create
   * @memberof Twilio.Preview.Understand.AssistantList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.friendlyName] -
   *          A text description for the Assistant. It is non-unique and can up to 255 characters long.
   * @param {boolean} [opts.logQueries] -
   *          A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
   * @param {number} [opts.ttl] - The ttl
   * @param {string} [opts.uniqueName] -
   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   * @param {string} [opts.responseUrl] -
   *          The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   * @param {string} [opts.callbackUrl] - The callback_url
   * @param {string} [opts.callbackEvents] - The callback_events
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed AssistantInstance
   */
  /* jshint ignore:end */
  AssistantListInstance.create = function create(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'FriendlyName': _.get(opts, 'friendlyName'),
      'LogQueries': serialize.bool(_.get(opts, 'logQueries')),
      'Ttl': _.get(opts, 'ttl'),
      'UniqueName': _.get(opts, 'uniqueName'),
      'ResponseUrl': _.get(opts, 'responseUrl'),
      'CallbackUrl': _.get(opts, 'callbackUrl'),
      'CallbackEvents': _.get(opts, 'callbackEvents')
    });

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Streams AssistantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Preview.Understand.AssistantList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  AssistantListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single target page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Preview.Understand.AssistantList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  AssistantListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new AssistantPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * @description Lists AssistantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Preview.Understand.AssistantList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  AssistantListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single page of AssistantInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Preview.Understand.AssistantList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  AssistantListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new AssistantPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}

/**
 * Options to pass to update
 *
 * @property friendlyName - A text description for the Assistant. It is non-unique and can up to 255 characters long.
 * @property logQueries - A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
 * @property ttl - The ttl
 * @property uniqueName - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
 * @property responseUrl - The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
 * @property callbackUrl - The callback_url
 * @property callbackEvents - The callback_events
 */
export interface UpdateOptions {
  callbackEvents?: string;
  callbackUrl?: string;
  friendlyName?: string;
  logQueries?: boolean;
  responseUrl?: string;
  ttl?: number;
  uniqueName?: string;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - A text description for the Assistant. It is non-unique and can up to 255 characters long.
 * @property logQueries - A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
 * @property ttl - The ttl
 * @property uniqueName - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
 * @property responseUrl - The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
 * @property callbackUrl - The callback_url
 * @property callbackEvents - The callback_events
 */
export interface UpdateOptions {
  callbackEvents?: string;
  callbackUrl?: string;
  friendlyName?: string;
  logQueries?: boolean;
  responseUrl?: string;
  ttl?: number;
  uniqueName?: string;
}


declare class AssistantPage extends Page {
  /**
   * @constructor Twilio.Preview.Understand.AssistantPage
   * @augments Page
   * @description Initialize the AssistantPage
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Preview.Understand, response: object, solution: object);

  /**
   * Build an instance of AssistantInstance
   *
   * @function getInstance
   * @memberof Twilio.Preview.Understand.AssistantPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class AssistantInstance {
  /**
   * @constructor Twilio.Preview.Understand.AssistantInstance
   * @description Initialize the AssistantContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property accountSid - The unique ID of the Account that created this Assistant.
   * @property dateCreated - The date that this resource was created
   * @property dateUpdated - The date that this resource was last updated
   * @property friendlyName - A text description for the Assistant. It is non-unique and can up to 255 characters long.
   * @property latestModelBuildSid - The unique ID (Sid) of the latest model build. Null if no model has been built.
   * @property links - The links
   * @property logQueries - A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter.
   * @property sid - A 34 character string that uniquely identifies this resource.
   * @property ttl - The ttl
   * @property uniqueName - A user-provided string that uniquely identifies this resource as an alternative to the sid. You can use the unique name in the URL path. Unique up to 64 characters long.
   * @property url - The url
   * @property responseUrl - The webhook URL called to fetch the response to an incoming communication expressed in Assistant TwiML.
   * @property callbackUrl - The callback_url
   * @property callbackEvents - The callback_events
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Twilio.Preview.Understand, payload: object, sid: sid_like);

  _proxy?: AssistantContext;
  /**
   * fetch a AssistantInstance
   *
   * @function fetch
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the fieldTypes
   *
   * @function fieldTypes
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   */
  fieldTypes();
  /**
   * Access the intents
   *
   * @function intents
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   */
  intents();
  /**
   * Access the modelBuilds
   *
   * @function modelBuilds
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   */
  modelBuilds();
  /**
   * Access the queries
   *
   * @function queries
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   */
  queries();
  /**
   * remove a AssistantInstance
   *
   * @function remove
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the AssistantInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   */
  toJSON();
  /**
   * update a AssistantInstance
   *
   * @function update
   * @memberof Twilio.Preview.Understand.AssistantInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class AssistantContext {
  /**
   * @constructor Twilio.Preview.Understand.AssistantContext
   * @description Initialize the AssistantContext
   * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property fieldTypes - fieldTypes resource
   * @property intents - intents resource
   * @property modelBuilds - modelBuilds resource
   * @property queries - queries resource
   *
   * @param version - Version of the resource
   * @param sid - The sid
   */
  constructor(version: Twilio.Preview.Understand, sid: sid_like);

  /**
   * fetch a AssistantInstance
   *
   * @function fetch
   * @memberof Twilio.Preview.Understand.AssistantContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  fieldTypes?: Twilio.Preview.Understand.AssistantContext.FieldTypeList;
  intents?: Twilio.Preview.Understand.AssistantContext.IntentList;
  modelBuilds?: Twilio.Preview.Understand.AssistantContext.ModelBuildList;
  queries?: Twilio.Preview.Understand.AssistantContext.QueryList;
  /**
   * remove a AssistantInstance
   *
   * @function remove
   * @memberof Twilio.Preview.Understand.AssistantContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a AssistantInstance
   *
   * @function update
   * @memberof Twilio.Preview.Understand.AssistantContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { AssistantContext, AssistantInstance, AssistantList, AssistantListInstance, AssistantPage, AssistantPayload, AssistantResource }
