/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");



/**
 * Options to pass to fetch a DeactivationsInstance
 *
 * @property { Date } [date] The request will return a list of all United States Phone Numbers that were deactivated on the day specified by this parameter. This date should be specified in YYYY-MM-DD format.
 */
export interface DeactivationsListInstanceFetchOptions {
  "date"?: Date;
}

export interface DeactivationsListInstance {


  /**
   * Fetch a DeactivationsInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed DeactivationsInstance
   */
  fetch(callback?: (error: Error | null, item?: DeactivationsInstance) => any): Promise<DeactivationsInstance>;
  /**
   * Fetch a DeactivationsInstance
   *
   * @param { DeactivationsListInstanceFetchOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed DeactivationsInstance
   */
  fetch(params: DeactivationsListInstanceFetchOptions, callback?: (error: Error | null, item?: DeactivationsInstance) => any): Promise<DeactivationsInstance>;
  fetch(params?: any, callback?: any): Promise<DeactivationsInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface DeactivationsSolution {
}

interface DeactivationsListInstanceImpl extends DeactivationsListInstance {}
class DeactivationsListInstanceImpl implements DeactivationsListInstance {
  _version?: V1;
  _solution?: DeactivationsSolution;
  _uri?: string;

}

export function DeactivationsListInstance(version: V1): DeactivationsListInstance {
  const instance = {} as DeactivationsListInstanceImpl;

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/Deactivations`;

  instance.fetch = function fetch(params?: any, callback?: any): Promise<DeactivationsInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params["date"] !== undefined) data["Date"] = serialize.iso8601Date(params["date"]);

    const headers: any = {};

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: "get", params: data, headers });
    
    operationPromise = operationPromise.then(payload => new DeactivationsInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface DeactivationsPayload extends DeactivationsResource{
}

interface DeactivationsResource {
  redirect_to?: string | null;
}

export class DeactivationsInstance {

  constructor(protected _version: V1, payload: DeactivationsPayload) {
    this.redirectTo = payload.redirect_to;

  }

  /**
   * Redirect url to the list of deactivated numbers.
   */
  redirectTo?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      redirectTo: this.redirectTo
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


