/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { SerializableClass } from '../../../../interfaces';

/**
 * Initialize the UsAppToPersonList
 *
 * PLEASE NOTE that this class contains beta products that are subject to change.
 * Use them with caution.
 *
 * @param version - Version of the resource
 * @param messagingServiceSid - The SID of the Messaging Service the resource is associated with
 */
declare function UsAppToPersonList(version: V1, messagingServiceSid: string): UsAppToPersonListInstance;

interface UsAppToPersonListInstance {
  /**
   * create a UsAppToPersonInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: UsAppToPersonListInstanceCreateOptions, callback?: (error: Error | null, item: UsAppToPersonInstance) => any): Promise<UsAppToPersonInstance>;
  /**
   * fetch a UsAppToPersonInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: UsAppToPersonListInstance) => any): Promise<UsAppToPersonInstance>;
  /**
   * remove a UsAppToPersonInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: UsAppToPersonListInstance) => any): Promise<boolean>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

/**
 * Options to pass to create
 *
 * @property brandRegistrationSid - A2P Brand Registration SID
 * @property description - A short description of what this SMS campaign does
 * @property hasEmbeddedLinks - Indicates that this SMS campaign will send messages that contain links
 * @property hasEmbeddedPhone - Indicates that this SMS campaign will send messages that contain phone numbers
 * @property messageSamples - Message samples
 * @property usAppToPersonUsecase - A2P Campaign Use Case.
 */
interface UsAppToPersonListInstanceCreateOptions {
  brandRegistrationSid: string;
  description: string;
  hasEmbeddedLinks: boolean;
  hasEmbeddedPhone: boolean;
  messageSamples: string | string[];
  usAppToPersonUsecase: string;
}

interface UsAppToPersonPayload extends UsAppToPersonResource, Page.TwilioResponsePayload {
}

interface UsAppToPersonResource {
  account_sid: string;
  brand_registration_sid: string;
  campaign_id: string;
  date_created: Date;
  date_updated: Date;
  description: string;
  has_embedded_links: boolean;
  has_embedded_phone: boolean;
  is_externally_registered: boolean;
  message_samples: string[];
  messaging_service_sid: string;
  rate_limits: object;
  status: string;
  url: string;
  us_app_to_person_usecase: string;
}

interface UsAppToPersonSolution {
  messagingServiceSid?: string;
}


declare class UsAppToPersonInstance extends SerializableClass {
  /**
   * Initialize the UsAppToPersonContext
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param messagingServiceSid - The SID of the Messaging Service the resource is associated with
   */
  constructor(version: V1, payload: UsAppToPersonPayload, messagingServiceSid: string);

  accountSid: string;
  brandRegistrationSid: string;
  campaignId: string;
  dateCreated: Date;
  dateUpdated: Date;
  description: string;
  hasEmbeddedLinks: boolean;
  hasEmbeddedPhone: boolean;
  isExternallyRegistered: boolean;
  messageSamples: string[];
  messagingServiceSid: string;
  rateLimits: any;
  status: string;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  url: string;
  usAppToPersonUsecase: string;
}


declare class UsAppToPersonPage extends Page<V1, UsAppToPersonPayload, UsAppToPersonResource, UsAppToPersonInstance> {
  /**
   * Initialize the UsAppToPersonPage
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: UsAppToPersonSolution);

  /**
   * Build an instance of UsAppToPersonInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: UsAppToPersonPayload): UsAppToPersonInstance;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

export { UsAppToPersonInstance, UsAppToPersonList, UsAppToPersonListInstance, UsAppToPersonListInstanceCreateOptions, UsAppToPersonPage, UsAppToPersonPayload, UsAppToPersonResource, UsAppToPersonSolution }
