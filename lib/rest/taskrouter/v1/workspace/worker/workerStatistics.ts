/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../../../V1";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");



/**
 * Options to pass to fetch a WorkerStatisticsInstance
 *
 * @property { number } [minutes] Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @property { Date } [startDate] Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @property { Date } [endDate] Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @property { string } [taskChannel] Only calculate statistics on this TaskChannel. Can be the TaskChannel\&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;.
 */
export interface WorkerStatisticsListInstanceFetchOptions {
  "minutes"?: number;
  "startDate"?: Date;
  "endDate"?: Date;
  "taskChannel"?: string;
}

export interface WorkerStatisticsListInstance {


  /**
   * Fetch a WorkerStatisticsInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed WorkerStatisticsInstance
   */
  fetch(callback?: (error: Error | null, item?: WorkerStatisticsInstance) => any): Promise<WorkerStatisticsInstance>;
  /**
   * Fetch a WorkerStatisticsInstance
   *
   * @param { WorkerStatisticsListInstanceFetchOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed WorkerStatisticsInstance
   */
  fetch(params: WorkerStatisticsListInstanceFetchOptions, callback?: (error: Error | null, item?: WorkerStatisticsInstance) => any): Promise<WorkerStatisticsInstance>;
  fetch(params?: any, callback?: any): Promise<WorkerStatisticsInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface WorkerStatisticsSolution {
  workspaceSid?: string;
  workerSid?: string;
}

interface WorkerStatisticsListInstanceImpl extends WorkerStatisticsListInstance {}
class WorkerStatisticsListInstanceImpl implements WorkerStatisticsListInstance {
  _version?: V1;
  _solution?: WorkerStatisticsSolution;
  _uri?: string;

}

export function WorkerStatisticsListInstance(version: V1, workspaceSid: string, workerSid: string): WorkerStatisticsListInstance {
  const instance = {} as WorkerStatisticsListInstanceImpl;

  instance._version = version;
  instance._solution = { workspaceSid, workerSid };
  instance._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Statistics`;

  instance.fetch = function fetch(params?: any, callback?: any): Promise<WorkerStatisticsInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params["minutes"] !== undefined) data["Minutes"] = params["minutes"];
    if (params["startDate"] !== undefined) data["StartDate"] = serialize.iso8601DateTime(params["startDate"]);
    if (params["endDate"] !== undefined) data["EndDate"] = serialize.iso8601DateTime(params["endDate"]);
    if (params["taskChannel"] !== undefined) data["TaskChannel"] = params["taskChannel"];

    const headers: any = {};

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: "get", params: data, headers });
    
    operationPromise = operationPromise.then(payload => new WorkerStatisticsInstance(operationVersion, payload, this._solution.workspaceSid, this._solution.workerSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface WorkerStatisticsPayload extends WorkerStatisticsResource{
}

interface WorkerStatisticsResource {
  account_sid?: string | null;
  cumulative?: any | null;
  worker_sid?: string | null;
  workspace_sid?: string | null;
  url?: string | null;
}

export class WorkerStatisticsInstance {

  constructor(protected _version: V1, payload: WorkerStatisticsPayload, workspaceSid: string, workerSid?: string) {
    this.accountSid = payload.account_sid;
    this.cumulative = payload.cumulative;
    this.workerSid = payload.worker_sid;
    this.workspaceSid = payload.workspace_sid;
    this.url = payload.url;

  }

  /**
   * The SID of the Account that created the resource
   */
  accountSid?: string | null;
  /**
   * An object that contains the cumulative statistics for the Worker
   */
  cumulative?: any | null;
  /**
   * The SID of the Worker that contains the WorkerChannel
   */
  workerSid?: string | null;
  /**
   * The SID of the Workspace that contains the WorkerChannel
   */
  workspaceSid?: string | null;
  /**
   * The absolute URL of the WorkerChannel statistics resource
   */
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      cumulative: this.cumulative, 
      workerSid: this.workerSid, 
      workspaceSid: this.workspaceSid, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


