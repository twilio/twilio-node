'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var Page = require('../../../../../../base/Page');  /* jshint ignore:line */
var values = require('../../../../../../base/values');  /* jshint ignore:line */

var StepContextList;
var StepContextPage;
var StepContextInstance;
var StepContextContext;

/* jshint ignore:start */
/**
 * @description Initialize the StepContextList
 *
 * @param {Twilio.Studio.V1} version - Version of the resource
 * @param {string} flowSid - Flow Sid.
 * @param {string} engagementSid - Engagement Sid.
 * @param {string} stepSid - Step Sid.
 */
/* jshint ignore:end */
StepContextList = function StepContextList(version, flowSid, engagementSid,
                                            stepSid) {
  /* jshint ignore:start */
  /**
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext}
   */
  /* jshint ignore:end */
  function StepContextListInstance(sid) {
    return StepContextListInstance.get(sid);
  }

  StepContextListInstance._version = version;
  // Path Solution
  StepContextListInstance._solution = {
    flowSid: flowSid,
    engagementSid: engagementSid,
    stepSid: stepSid
  };
  /* jshint ignore:start */
  /**
   * Constructs a step_context
   *
   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextContext}
   */
  /* jshint ignore:end */
  StepContextListInstance.get = function get() {
    return new StepContextContext(
      this._version,
      this._solution.flowSid,
      this._solution.engagementSid,
      this._solution.stepSid
    );
  };

  return StepContextListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the StepContextPage
 *
 * @param {V1} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {StepContextSolution} solution - Path solution
 *
 * @returns StepContextPage
 */
/* jshint ignore:end */
StepContextPage = function StepContextPage(version, response, solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(StepContextPage.prototype, Page.prototype);
StepContextPage.prototype.constructor = StepContextPage;

/* jshint ignore:start */
/**
 * Build an instance of StepContextInstance
 *
 * @param {StepContextPayload} payload - Payload response from the API
 *
 * @returns StepContextInstance
 */
/* jshint ignore:end */
StepContextPage.prototype.getInstance = function getInstance(payload) {
  return new StepContextInstance(
    this._version,
    payload,
    this._solution.flowSid,
    this._solution.engagementSid,
    this._solution.stepSid
  );
};


/* jshint ignore:start */
/**
 * Initialize the StepContextContext
 *
 * @property {string} accountSid - Account Sid.
 * @property {string} context - Flow state.
 * @property {string} engagementSid - Engagement Sid.
 * @property {string} flowSid - Flow Sid.
 * @property {string} stepSid - Step Sid.
 * @property {string} url - The URL of this resource.
 *
 * @param {V1} version - Version of the resource
 * @param {StepContextPayload} payload - The instance payload
 * @param {sid} flowSid - Flow Sid.
 * @param {sid} engagementSid - Engagement Sid.
 * @param {sid} stepSid - Step Sid.
 */
/* jshint ignore:end */
StepContextInstance = function StepContextInstance(version, payload, flowSid,
                                                    engagementSid, stepSid) {
  this._version = version;

  // Marshaled Properties
  this.accountSid = payload.account_sid; // jshint ignore:line
  this.context = payload.context; // jshint ignore:line
  this.engagementSid = payload.engagement_sid; // jshint ignore:line
  this.flowSid = payload.flow_sid; // jshint ignore:line
  this.stepSid = payload.step_sid; // jshint ignore:line
  this.url = payload.url; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {flowSid: flowSid, engagementSid: engagementSid, stepSid: stepSid, };
};

Object.defineProperty(StepContextInstance.prototype,
  '_proxy', {
  get: function() {
    if (!this._context) {
      this._context = new StepContextContext(
        this._version,
        this._solution.flowSid,
        this._solution.engagementSid,
        this._solution.stepSid
      );
    }

    return this._context;
  }
});

/* jshint ignore:start */
/**
 * fetch a StepContextInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed StepContextInstance
 */
/* jshint ignore:end */
StepContextInstance.prototype.fetch = function fetch(callback) {
  return this._proxy.fetch(callback);
};

/* jshint ignore:start */
/**
 * Produce a plain JSON object version of the StepContextInstance for serialization.
 * Removes any circular references in the object.
 *
 * @returns Object
 */
/* jshint ignore:end */
StepContextInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};


/* jshint ignore:start */
/**
 * Initialize the StepContextContext
 *
 * @param {V1} version - Version of the resource
 * @param {sid} flowSid - Flow Sid.
 * @param {sid} engagementSid - Engagement Sid.
 * @param {sid} stepSid - Step Sid.
 */
/* jshint ignore:end */
StepContextContext = function StepContextContext(version, flowSid,
                                                  engagementSid, stepSid) {
  this._version = version;

  // Path Solution
  this._solution = {flowSid: flowSid, engagementSid: engagementSid, stepSid: stepSid, };
  this._uri = _.template(
    '/Flows/<%= flowSid %>/Engagements/<%= engagementSid %>/Steps/<%= stepSid %>/Context' // jshint ignore:line
  )(this._solution);
};

/* jshint ignore:start */
/**
 * fetch a StepContextInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed StepContextInstance
 */
/* jshint ignore:end */
StepContextContext.prototype.fetch = function fetch(callback) {
  var deferred = Q.defer();
  var promise = this._version.fetch({uri: this._uri, method: 'GET'});

  promise = promise.then(function(payload) {
    deferred.resolve(new StepContextInstance(
      this._version,
      payload,
      this._solution.flowSid,
      this._solution.engagementSid,
      this._solution.stepSid
    ));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

module.exports = {
  StepContextList: StepContextList,
  StepContextPage: StepContextPage,
  StepContextInstance: StepContextInstance,
  StepContextContext: StepContextContext
};
