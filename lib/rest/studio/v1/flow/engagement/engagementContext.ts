/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../../../V1";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");



export interface EngagementContextListInstance {


  /**
   * Fetch a EngagementContextInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed EngagementContextInstance
   */
  fetch(callback?: (error: Error | null, item?: EngagementContextInstance) => any): Promise<EngagementContextInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface EngagementContextSolution {
  flowSid?: string;
  engagementSid?: string;
}

interface EngagementContextListInstanceImpl extends EngagementContextListInstance {}
class EngagementContextListInstanceImpl implements EngagementContextListInstance {
  _version?: V1;
  _solution?: EngagementContextSolution;
  _uri?: string;

}

export function EngagementContextListInstance(version: V1, flowSid: string, engagementSid: string): EngagementContextListInstance {
  const instance = {} as EngagementContextListInstanceImpl;

  instance._version = version;
  instance._solution = { flowSid, engagementSid };
  instance._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Context`;

  instance.fetch = function fetch(callback?: any): Promise<EngagementContextInstance> {

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: "get" });
    
    operationPromise = operationPromise.then(payload => new EngagementContextInstance(operationVersion, payload, this._solution.flowSid, this._solution.engagementSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface EngagementContextPayload extends EngagementContextResource{
}

interface EngagementContextResource {
  account_sid?: string | null;
  context?: any | null;
  engagement_sid?: string | null;
  flow_sid?: string | null;
  url?: string | null;
}

export class EngagementContextInstance {

  constructor(protected _version: V1, payload: EngagementContextPayload, flowSid: string, engagementSid?: string) {
    this.accountSid = payload.account_sid;
    this.context = payload.context;
    this.engagementSid = payload.engagement_sid;
    this.flowSid = payload.flow_sid;
    this.url = payload.url;

  }

  /**
   * Account SID
   */
  accountSid?: string | null;
  /**
   * Flow state
   */
  context?: any | null;
  /**
   * Engagement SID
   */
  engagementSid?: string | null;
  /**
   * Flow SID
   */
  flowSid?: string | null;
  /**
   * The URL of the resource
   */
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      context: this.context, 
      engagementSid: this.engagementSid, 
      flowSid: this.flowSid, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


