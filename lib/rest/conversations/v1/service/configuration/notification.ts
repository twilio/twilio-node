/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../../../base/Page";
import Response from "../../../../../http/response";
import V1 from "../../../V1";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");


/**
 * Options to pass to create a NotificationInstance
 *
 * @property { boolean } [logEnabled] Weather the notification logging is enabled.
 * @property { boolean } [newMessageEnabled] Whether to send a notification when a new message is added to a conversation. The default is &#x60;false&#x60;.
 * @property { string } [newMessageTemplate] The template to use to create the notification text displayed when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;.
 * @property { string } [newMessageSound] The name of the sound to play when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;.
 * @property { boolean } [newMessageBadgeCountEnabled] Whether the new message badge is enabled. The default is &#x60;false&#x60;.
 * @property { boolean } [addedToConversationEnabled] Whether to send a notification when a participant is added to a conversation. The default is &#x60;false&#x60;.
 * @property { string } [addedToConversationTemplate] The template to use to create the notification text displayed when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;.
 * @property { string } [addedToConversationSound] The name of the sound to play when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;.
 * @property { boolean } [removedFromConversationEnabled] Whether to send a notification to a user when they are removed from a conversation. The default is &#x60;false&#x60;.
 * @property { string } [removedFromConversationTemplate] The template to use to create the notification text displayed to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;.
 * @property { string } [removedFromConversationSound] The name of the sound to play to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;.
 * @property { boolean } [newMessageWithMediaEnabled] Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is &#x60;false&#x60;.
 * @property { string } [newMessageWithMediaTemplate] The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and &#x60;new_message.attachments.enabled&#x60; is &#x60;true&#x60;.
 */
export interface NotificationListInstanceCreateOptions {
  logEnabled?: boolean;
  newMessageEnabled?: boolean;
  newMessageTemplate?: string;
  newMessageSound?: string;
  newMessageBadgeCountEnabled?: boolean;
  addedToConversationEnabled?: boolean;
  addedToConversationTemplate?: string;
  addedToConversationSound?: string;
  removedFromConversationEnabled?: boolean;
  removedFromConversationTemplate?: string;
  removedFromConversationSound?: string;
  newMessageWithMediaEnabled?: boolean;
  newMessageWithMediaTemplate?: string;
}

export interface NotificationListInstance {



  /**
   * Streams NotificationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Function to process each record
   */
  each(callback?: (item: NotificationInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams NotificationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { NotificationListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(params?: NotificationListInstanceEachOptions, callback?: (item: NotificationInstance, done: (err?: Error) => void) => void): void;
  each(params?: any, callback?: any): void;
  /**
   * Retrieve a single target page of NotificationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: NotificationPage) => any): Promise<NotificationPage>;
  /**
   * Retrieve a single target page of NotificationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: NotificationPage) => any): Promise<NotificationPage>;
  getPage(params?: any, callback?: any): Promise<NotificationPage>;
  /**
   * Lists NotificationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: NotificationInstance[]) => any): Promise<NotificationInstance[]>;
  /**
   * Lists NotificationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { NotificationListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(params?: NotificationListInstanceOptions, callback?: (error: Error | null, items: NotificationInstance[]) => any): Promise<NotificationInstance[]>;
  list(params?: any, callback?: any): Promise<NotificationInstance[]>;
  /**
   * Retrieve a single page of NotificationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: NotificationPage) => any): Promise<NotificationPage>;
  /**
   * Retrieve a single page of NotificationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { NotificationListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(params: NotificationListInstancePageOptions, callback?: (error: Error | null, items: NotificationPage) => any): Promise<NotificationPage>;
  page(params?: any, callback?: any): Promise<NotificationPage>;

  /**
   * Create a NotificationInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed NotificationInstance
   */
  create(callback?: (error: Error | null, item?: NotificationInstance) => any): Promise<NotificationInstance>;
  /**
   * Create a NotificationInstance
   *
   * @param { NotificationListInstanceCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed NotificationInstance
   */
  create(params: NotificationListInstanceCreateOptions, callback?: (error: Error | null, item?: NotificationInstance) => any): Promise<NotificationInstance>;
  create(params?: any, callback?: any): Promise<NotificationInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

interface NotificationListInstanceImpl extends NotificationListInstance {}
class NotificationListInstanceImpl implements NotificationListInstance {
  _version?: V1;
  _solution?: NotificationSolution;
  _uri?: string;

}

export function NotificationListInstance(version: V1, chatServiceSid: string): NotificationListInstance {
  const instance = {} as NotificationListInstanceImpl;

  instance._version = version;
  instance._solution = { chatServiceSid };
  instance._uri = `/Services/${chatServiceSid}/Configuration/Notifications`;

  instance.page = function page(callback?: any): Promise<NotificationPage> {

    let operationVersion = version,
        operationPromise = operationVersion.page({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new NotificationPage(operationVersion, payload, this._solution));

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;

  }
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(targetUrl?: any, callback?: any): Promise<NotificationPage> {
    let operationPromise = this._version._domain.twilio.request({method: 'get', uri: targetUrl});

    operationPromise = operationPromise.then(payload => new NotificationPage(this._version, payload, this._solution));
    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;
  }



  instance.create = function create(params?: any, callback?: any): Promise<NotificationInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params.logEnabled !== undefined) data['LogEnabled'] = serialize.bool(params.logEnabled);
    if (params.newMessageEnabled !== undefined) data['NewMessage.Enabled'] = serialize.bool(params.newMessageEnabled);
    if (params.newMessageTemplate !== undefined) data['NewMessage.Template'] = params.newMessageTemplate;
    if (params.newMessageSound !== undefined) data['NewMessage.Sound'] = params.newMessageSound;
    if (params.newMessageBadgeCountEnabled !== undefined) data['NewMessage.BadgeCountEnabled'] = serialize.bool(params.newMessageBadgeCountEnabled);
    if (params.addedToConversationEnabled !== undefined) data['AddedToConversation.Enabled'] = serialize.bool(params.addedToConversationEnabled);
    if (params.addedToConversationTemplate !== undefined) data['AddedToConversation.Template'] = params.addedToConversationTemplate;
    if (params.addedToConversationSound !== undefined) data['AddedToConversation.Sound'] = params.addedToConversationSound;
    if (params.removedFromConversationEnabled !== undefined) data['RemovedFromConversation.Enabled'] = serialize.bool(params.removedFromConversationEnabled);
    if (params.removedFromConversationTemplate !== undefined) data['RemovedFromConversation.Template'] = params.removedFromConversationTemplate;
    if (params.removedFromConversationSound !== undefined) data['RemovedFromConversation.Sound'] = params.removedFromConversationSound;
    if (params.newMessageWithMediaEnabled !== undefined) data['NewMessage.WithMedia.Enabled'] = serialize.bool(params.newMessageWithMediaEnabled);
    if (params.newMessageWithMediaTemplate !== undefined) data['NewMessage.WithMedia.Template'] = params.newMessageWithMediaTemplate;

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post', params: data, headers });
    
    operationPromise = operationPromise.then(payload => new NotificationInstance(operationVersion, payload, this._solution.chatServiceSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;



    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface NotificationPayload extends NotificationResource, Page.TwilioResponsePayload {
}

interface NotificationResource {
  account_sid?: string | null;
  chat_service_sid?: string | null;
  new_message?: any | null;
  added_to_conversation?: any | null;
  removed_from_conversation?: any | null;
  log_enabled?: boolean | null;
  url?: string | null;
}

export class NotificationInstance {
  protected _solution: NotificationSolution;
  protected _context?: NotificationListInstance;

  constructor(protected _version: V1, payload: NotificationPayload, chatServiceSid?: string) {
    this.accountSid = payload.account_sid;
    this.chatServiceSid = payload.chat_service_sid;
    this.newMessage = payload.new_message;
    this.addedToConversation = payload.added_to_conversation;
    this.removedFromConversation = payload.removed_from_conversation;
    this.logEnabled = payload.log_enabled;
    this.url = payload.url;

    this._solution = { chatServiceSid: chatServiceSid || this.chatServiceSid };
  }

  /**
   * The unique ID of the Account responsible for this configuration.
   */
  accountSid?: string | null;
  /**
   * The SID of the Conversation Service that the Configuration applies to.
   */
  chatServiceSid?: string | null;
  /**
   * The Push Notification configuration for New Messages.
   */
  newMessage?: any | null;
  /**
   * The Push Notification configuration for being added to a Conversation.
   */
  addedToConversation?: any | null;
  /**
   * The Push Notification configuration for being removed from a Conversation.
   */
  removedFromConversation?: any | null;
  /**
   * Weather the notification logging is enabled.
   */
  logEnabled?: boolean | null;
  /**
   * An absolute URL for this configuration.
   */
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      chatServiceSid: this.chatServiceSid, 
      newMessage: this.newMessage, 
      addedToConversation: this.addedToConversation, 
      removedFromConversation: this.removedFromConversation, 
      logEnabled: this.logEnabled, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
export interface NotificationSolution {
  chatServiceSid?: string;
}

export class NotificationPage extends Page<V1, NotificationPayload, NotificationResource, NotificationInstance> {
  /**
   * Initialize the NotificationPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: NotificationSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of NotificationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: NotificationPayload): NotificationInstance {
    return new NotificationInstance(
      this._version,
      payload,
      this._solution.chatServiceSid,
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

