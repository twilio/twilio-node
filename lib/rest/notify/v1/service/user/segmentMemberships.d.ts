/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import V1 = require('../../../V1');
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the SegmentMembershipList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param serviceSid - The service_sid
 * @param identity - The identity
 */
declare function SegmentMembershipList(version: V1, serviceSid: string, identity: string): SegmentMembershipListInstance;

interface SegmentMembershipResource {
  account_sid: string;
  identity: string;
  segment: string;
  service_sid: string;
  url: string;
}

interface SegmentMembershipPayload extends SegmentMembershipResource, Page.TwilioResponsePayload {
}

interface SegmentMembershipListInstance {
  /* jshint ignore:start */
  /**
   * create a SegmentMembershipInstance
   *
   * @function create
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipList
   * @instance
   *
   * @param {object} opts - ...
   * @param {string} opts.segment - The segment
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed SegmentMembershipInstance
   */
  /* jshint ignore:end */
  SegmentMembershipListInstance.create = function create(opts, callback) {
    if (_.isUndefined(opts)) {
      throw new Error('Required parameter "opts" missing.');
    }
    if (_.isUndefined(opts.segment)) {
      throw new Error('Required parameter "opts.segment" missing.');
    }

    var deferred = Q.defer();
    var data = values.of({'Segment': _.get(opts, 'segment')});

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new SegmentMembershipInstance(
        this._version,
        payload,
        this._solution.serviceSid,
        this._solution.identity,
        this._solution.segment
      ));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}


declare class SegmentMembershipPage extends Page {
  /**
   * @constructor Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipPage
   * @augments Page
   * @description Initialize the SegmentMembershipPage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Notify.V1, response: object, solution: object);

  /**
   * Build an instance of SegmentMembershipInstance
   *
   * @function getInstance
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class SegmentMembershipInstance {
  /**
   * @constructor Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipInstance
   * @description Initialize the SegmentMembershipContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property accountSid - The account_sid
   * @property serviceSid - The service_sid
   * @property identity - The identity
   * @property segment - The segment
   * @property url - The url
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param identity - The identity
   * @param segment - The segment
   */
  constructor(version: Twilio.Notify.V1, payload: object, serviceSid: sid, identity: string, segment: string);

  _proxy?: SegmentMembershipContext;
  /**
   * fetch a SegmentMembershipInstance
   *
   * @function fetch
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a SegmentMembershipInstance
   *
   * @function remove
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the SegmentMembershipInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipInstance
   * @instance
   */
  toJSON();
}


declare class SegmentMembershipContext {
  /**
   * @constructor Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipContext
   * @description Initialize the SegmentMembershipContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param serviceSid - The service_sid
   * @param identity - The identity
   * @param segment - The segment
   */
  constructor(version: Twilio.Notify.V1, serviceSid: sid, identity: sid_like, segment: string);

  /**
   * fetch a SegmentMembershipInstance
   *
   * @function fetch
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a SegmentMembershipInstance
   *
   * @function remove
   * @memberof Twilio.Notify.V1.ServiceContext.UserContext.SegmentMembershipContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { SegmentMembershipContext, SegmentMembershipInstance, SegmentMembershipList, SegmentMembershipListInstance, SegmentMembershipPage, SegmentMembershipPayload, SegmentMembershipResource }
