/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V1 = require('../../V1');
import serialize = require('../../../../base/serialize');
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the NotificationList
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @param version - Version of the resource
 * @param serviceSid - The service_sid
 */
declare function NotificationList(version: V1, serviceSid: string): NotificationListInstance;

interface NotificationResource {
  account_sid: string;
  action: string;
  alexa: string;
  apn: string;
  body: string;
  data: string;
  date_created: Date;
  facebook_messenger: string;
  fcm: string;
  gcm: string;
  identities: string;
  priority: NotificationPriority;
  segments: string;
  service_sid: string;
  sid: string;
  sms: string;
  sound: string;
  tags: string;
  title: string;
  ttl: number;
}

interface NotificationPayload extends NotificationResource, Page.TwilioResponsePayload {
}

interface NotificationListInstance {
  /* jshint ignore:start */
  /**
   * create a NotificationInstance
   *
   * @function create
   * @memberof Twilio.Notify.V1.ServiceContext.NotificationList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.body] - Indicates the notification body text.
   * @param {notification.priority} [opts.priority] -
   *          Two priorities defined: low and high.
   * @param {number} [opts.ttl] -
   *          This parameter specifies how long the notification is valid.
   * @param {string} [opts.title] - Indicates the notification title.
   * @param {string} [opts.sound] - Indicates a sound to be played.
   * @param {string} [opts.action] -
   *          Specifies the actions to be displayed for the notification.
   * @param {string} [opts.data] -
   *          This parameter specifies the custom key-value pairs of the notification's payload.
   * @param {string} [opts.apn] -
   *          APNS specific payload that overrides corresponding attributes in a generic payload for Bindings with the apn BindingType.
   * @param {string} [opts.gcm] -
   *          GCM specific payload that overrides corresponding attributes in generic payload for Bindings with gcm BindingType.
   * @param {string} [opts.sms] -
   *          SMS specific payload that overrides corresponding attributes in generic payload for Bindings with sms BindingType.
   * @param {string} [opts.facebookMessenger] -
   *          Messenger specific payload that overrides corresponding attributes in generic payload for Bindings with facebook-messenger BindingType.
   * @param {string} [opts.fcm] -
   *          FCM specific payload that overrides corresponding attributes in generic payload for Bindings with fcm BindingType.
   * @param {string|list} [opts.segment] - The segment
   * @param {string} [opts.alexa] - The alexa
   * @param {string|list} [opts.toBinding] -
   *          The destination address in a JSON object.
   * @param {string|list} [opts.identity] -
   *          Delivery will be attempted only to Bindings with an Identity in this list.
   * @param {string|list} [opts.tag] -
   *          Delivery will be attempted only to Bindings that have all of the Tags in this list.
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed NotificationInstance
   */
  /* jshint ignore:end */
  NotificationListInstance.create = function create(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'Identity': serialize.map(_.get(opts, 'identity'), function(e) { return e; }),
      'Tag': serialize.map(_.get(opts, 'tag'), function(e) { return e; }),
      'Body': _.get(opts, 'body'),
      'Priority': _.get(opts, 'priority'),
      'Ttl': _.get(opts, 'ttl'),
      'Title': _.get(opts, 'title'),
      'Sound': _.get(opts, 'sound'),
      'Action': _.get(opts, 'action'),
      'Data': serialize.object(_.get(opts, 'data')),
      'Apn': serialize.object(_.get(opts, 'apn')),
      'Gcm': serialize.object(_.get(opts, 'gcm')),
      'Sms': serialize.object(_.get(opts, 'sms')),
      'FacebookMessenger': serialize.object(_.get(opts, 'facebookMessenger')),
      'Fcm': serialize.object(_.get(opts, 'fcm')),
      'Segment': serialize.map(_.get(opts, 'segment'), function(e) { return e; }),
      'Alexa': serialize.object(_.get(opts, 'alexa')),
      'ToBinding': serialize.map(_.get(opts, 'toBinding'), function(e) { return e; })
    });

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new NotificationInstance(this._version, payload));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}


declare class NotificationPage extends Page {
  /**
   * @constructor Twilio.Notify.V1.ServiceContext.NotificationPage
   * @augments Page
   * @description Initialize the NotificationPage
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Notify.V1, response: object, solution: object);

  /**
   * Build an instance of NotificationInstance
   *
   * @function getInstance
   * @memberof Twilio.Notify.V1.ServiceContext.NotificationPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class NotificationInstance {
  /**
   * @constructor Twilio.Notify.V1.ServiceContext.NotificationInstance
   * @description Initialize the NotificationContext
   * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
   *
   * @property sid - The sid
   * @property accountSid - The account_sid
   * @property serviceSid - The service_sid
   * @property dateCreated - The date_created
   * @property identities - List of Identities.
   * @property tags - List of Tags
   * @property segments - The segments
   * @property priority - Two priorities defined: low and high.
   * @property ttl - This parameter specifies how long the notification is valid.
   * @property title - Indicates the notification title.
   * @property body - Indicates the notification body text.
   * @property sound - Indicates a sound to be played.
   * @property action - Specifies the actions to be displayed for the notification.
   * @property data - This parameter specifies the custom key-value pairs of the notification's payload.
   * @property apn - APNS specific payload that overrides corresponding attributes in a generic payload for Bindings with the apn BindingType.
   * @property gcm - GCM specific payload that overrides corresponding attributes in generic payload for Bindings with gcm BindingType.
   * @property fcm - FCM specific payload that overrides corresponding attributes in generic payload for Bindings with fcm BindingType.
   * @property sms - SMS specific payload that overrides corresponding attributes in generic payload for Bindings with sms BindingType.
   * @property facebookMessenger - Messenger specific payload that overrides corresponding attributes in generic payload for Bindings with facebook-messenger BindingType.
   * @property alexa - The alexa
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   */
  constructor(version: Twilio.Notify.V1, payload: object, serviceSid: sid);

  /**
   * Produce a plain JSON object version of the NotificationInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Notify.V1.ServiceContext.NotificationInstance
   * @instance
   */
  toJSON();
}

export { NotificationInstance, NotificationList, NotificationListInstance, NotificationPage, NotificationPayload, NotificationResource }
