/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");



/**
 * Options to pass to fetch a SettingInstance
 *
 * @property { string } [subaccountSid] 
 */
export interface SettingListInstanceFetchOptions {
  "subaccountSid"?: string;
}

/**
 * Options to pass to update a SettingInstance
 *
 * @property { boolean } [advancedFeatures] 
 * @property { boolean } [voiceTrace] 
 * @property { string } [subaccountSid] 
 */
export interface SettingListInstanceUpdateOptions {
  "advancedFeatures"?: boolean;
  "voiceTrace"?: boolean;
  "subaccountSid"?: string;
}

export interface SettingListInstance {


  /**
   * Fetch a SettingInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed SettingInstance
   */
  fetch(callback?: (error: Error | null, item?: SettingInstance) => any): Promise<SettingInstance>;
  /**
   * Fetch a SettingInstance
   *
   * @param { SettingListInstanceFetchOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed SettingInstance
   */
  fetch(params: SettingListInstanceFetchOptions, callback?: (error: Error | null, item?: SettingInstance) => any): Promise<SettingInstance>;
  fetch(params?: any, callback?: any): Promise<SettingInstance>


  /**
   * Update a SettingInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed SettingInstance
   */
  update(callback?: (error: Error | null, item?: SettingInstance) => any): Promise<SettingInstance>;
  /**
   * Update a SettingInstance
   *
   * @param { SettingListInstanceUpdateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed SettingInstance
   */
  update(params: SettingListInstanceUpdateOptions, callback?: (error: Error | null, item?: SettingInstance) => any): Promise<SettingInstance>;
  update(params?: any, callback?: any): Promise<SettingInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface SettingSolution {
}

interface SettingListInstanceImpl extends SettingListInstance {}
class SettingListInstanceImpl implements SettingListInstance {
  _version?: V1;
  _solution?: SettingSolution;
  _uri?: string;

}

export function SettingListInstance(version: V1): SettingListInstance {
  const instance = {} as SettingListInstanceImpl;

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/Voice/Settings`;

  instance.fetch = function fetch(params?: any, callback?: any): Promise<SettingInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params["subaccountSid"] !== undefined) data["SubaccountSid"] = params["subaccountSid"];

    const headers: any = {};

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: "get", params: data, headers });
    
    operationPromise = operationPromise.then(payload => new SettingInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.update = function update(params?: any, callback?: any): Promise<SettingInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params["advancedFeatures"] !== undefined) data["AdvancedFeatures"] = serialize.bool(params["advancedFeatures"]);
    if (params["voiceTrace"] !== undefined) data["VoiceTrace"] = serialize.bool(params["voiceTrace"]);
    if (params["subaccountSid"] !== undefined) data["SubaccountSid"] = params["subaccountSid"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded"

    let operationVersion = version,
        operationPromise = operationVersion.update({ uri: this._uri, method: "post", data, headers });
    
    operationPromise = operationPromise.then(payload => new SettingInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface SettingPayload extends SettingResource{
}

interface SettingResource {
  account_sid?: string | null;
  advanced_features?: boolean | null;
  voice_trace?: boolean | null;
  url?: string | null;
}

export class SettingInstance {

  constructor(protected _version: V1, payload: SettingPayload) {
    this.accountSid = payload.account_sid;
    this.advancedFeatures = payload.advanced_features;
    this.voiceTrace = payload.voice_trace;
    this.url = payload.url;

  }

  accountSid?: string | null;
  advancedFeatures?: boolean | null;
  voiceTrace?: boolean | null;
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      advancedFeatures: this.advancedFeatures, 
      voiceTrace: this.voiceTrace, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


