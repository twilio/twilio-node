/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { AnnotationListInstance } from "./call/annotation";
import { CallSummaryListInstance } from "./call/callSummary";
import { EventListInstance } from "./call/event";
import { MetricListInstance } from "./call/metric";



export interface CallListInstance {

  annotation: AnnotationListInstance;
  summary: CallSummaryListInstance;
  events: EventListInstance;
  metrics: MetricListInstance;

  /**
   * Fetch a CallInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CallInstance
   */
  fetch(callback?: (error: Error | null, item?: CallInstance) => any): Promise<CallInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface CallSolution {
}

interface CallListInstanceImpl extends CallListInstance {}
class CallListInstanceImpl implements CallListInstance {
  _version?: V1;
  _solution?: CallSolution;
  _uri?: string;

  _annotation?: AnnotationListInstance;
  _summary?: CallSummaryListInstance;
  _events?: EventListInstance;
  _metrics?: MetricListInstance;
}

export function CallListInstance(version: V1): CallListInstance {
  const instance = {} as CallListInstanceImpl;

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/Voice`;

  Object.defineProperty(instance, "annotation", {
    get: function annotation() {
      if (!this._annotation) {
        this._annotation = AnnotationListInstance(this._version);
      }
      return this._annotation;
    }
  });

  Object.defineProperty(instance, "summary", {
    get: function summary() {
      if (!this._summary) {
        this._summary = CallSummaryListInstance(this._version);
      }
      return this._summary;
    }
  });

  Object.defineProperty(instance, "events", {
    get: function events() {
      if (!this._events) {
        this._events = EventListInstance(this._version);
      }
      return this._events;
    }
  });

  Object.defineProperty(instance, "metrics", {
    get: function metrics() {
      if (!this._metrics) {
        this._metrics = MetricListInstance(this._version);
      }
      return this._metrics;
    }
  });

  instance.fetch = function fetch(callback?: any): Promise<CallInstance> {

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new CallInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface CallPayload extends CallResource{
}

interface CallResource {
  sid?: string | null;
  url?: string | null;
  links?: object | null;
}

export class CallInstance {

  constructor(protected _version: V1, payload: CallPayload) {
    this.sid = payload.sid;
    this.url = payload.url;
    this.links = payload.links;

  }

  sid?: string | null;
  url?: string | null;
  links?: object | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid, 
      url: this.url, 
      links: this.links
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


