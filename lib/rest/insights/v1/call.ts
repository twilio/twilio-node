/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { SettingListInstance } from "./call/setting";
import { CallSummariesListInstance } from "./call/callSummaries";
import { CallSummaryListInstance } from "./call/callSummary";
import { EventListInstance } from "./call/event";
import { MetricListInstance } from "./call/metric";
import { AnnotationListInstance } from "./call/annotation";



export interface CallListInstance {
  (sid: string): CallContext;
  get(sid: string): CallContext;

  settings: SettingListInstance;
  call_summaries: CallSummariesListInstance;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

interface CallListInstanceImpl extends CallListInstance {}
class CallListInstanceImpl implements CallListInstance {
  _version?: V1;
  _solution?: CallSolution;
  _uri?: string;

  _settings?: SettingListInstance;
  _call_summaries?: CallSummariesListInstance;
}

export function CallListInstance(version: V1): CallListInstance {
  const instance = ((sid) => instance.get(sid)) as CallListInstanceImpl;

  instance.get = function get(sid): CallContext {
    return new CallContextImpl(version, sid);
  }

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/Voice`;

  Object.defineProperty(instance, "settings", {
    get: function settings() {
      if (!this._settings) {
        this._settings = SettingListInstance(this._version);
      }
      return this._settings;
    }
  });

  Object.defineProperty(instance, "call_summaries", {
    get: function call_summaries() {
      if (!this._call_summaries) {
        this._call_summaries = CallSummariesListInstance(this._version);
      }
      return this._call_summaries;
    }
  });

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}


export interface CallContext {

  call_summary: CallSummaryListInstance;
  events: EventListInstance;
  metrics: MetricListInstance;
  annotation: AnnotationListInstance;

  /**
   * Fetch a CallInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CallInstance
   */
  fetch(callback?: (error: Error | null, item?: CallInstance) => any): Promise<CallInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export class CallContextImpl implements CallContext {
  protected _solution: CallSolution;
  protected _uri: string;

  protected _call_summary?: CallSummaryListInstance;
  protected _events?: EventListInstance;
  protected _metrics?: MetricListInstance;
  protected _annotation?: AnnotationListInstance;

  constructor(protected _version: V1, sid: string) {
    this._solution = { sid };
    this._uri = `/Voice/${sid}`;
  }

  get call_summary(): CallSummaryListInstance {
    this._call_summary = this._call_summary || CallSummaryListInstance(this._version, this._solution.sid);
    return this._call_summary;
  }

  get events(): EventListInstance {
    this._events = this._events || EventListInstance(this._version, this._solution.sid);
    return this._events;
  }

  get metrics(): MetricListInstance {
    this._metrics = this._metrics || MetricListInstance(this._version, this._solution.sid);
    return this._metrics;
  }

  get annotation(): AnnotationListInstance {
    this._annotation = this._annotation || AnnotationListInstance(this._version, this._solution.sid);
    return this._annotation;
  }

  fetch(callback?: any): Promise<CallInstance> {
  
    let operationVersion = this._version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new CallInstance(operationVersion, payload, this._solution.sid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;



  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface CallPayload extends CallResource, Page.TwilioResponsePayload {
}

interface CallResource {
  sid?: string | null;
  url?: string | null;
  links?: object | null;
}

export class CallInstance {
  protected _solution: CallSolution;
  protected _context?: CallContext;

  constructor(protected _version: V1, payload: CallPayload, sid?: string) {
    this.sid = payload.sid;
    this.url = payload.url;
    this.links = payload.links;

    this._solution = { sid: sid || this.sid };
  }

  sid?: string | null;
  url?: string | null;
  links?: object | null;

  private get _proxy(): CallContext {
    this._context = this._context || new CallContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a CallInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed CallInstance
   */
  fetch(callback?: (error: Error | null, item?: CallInstance) => any): Promise<CallInstance>
     {
    return this._proxy.fetch(callback);
  }

  /**
   * Access the call_summary.
   */
  call_summary(): CallSummaryListInstance {
    return this._proxy.call_summary;
  }

  /**
   * Access the events.
   */
  events(): EventListInstance {
    return this._proxy.events;
  }

  /**
   * Access the metrics.
   */
  metrics(): MetricListInstance {
    return this._proxy.metrics;
  }

  /**
   * Access the annotation.
   */
  annotation(): AnnotationListInstance {
    return this._proxy.annotation;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid, 
      url: this.url, 
      links: this.links
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
export interface CallSolution {
  sid?: string;
}

export class CallPage extends Page<V1, CallPayload, CallResource, CallInstance> {
  /**
   * Initialize the CallPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: CallSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of CallInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CallPayload): CallInstance {
    return new CallInstance(
      this._version,
      payload,
      this._solution.sid,
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

