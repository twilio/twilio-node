/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");


type RecordingRecordingMode = 'do-not-record'|'record-from-ringing'|'record-from-answer'|'record-from-ringing-dual'|'record-from-answer-dual';

type RecordingRecordingTrim = 'trim-silence'|'do-not-trim';


/**
 * Options to pass to update a RecordingInstance
 *
 * @property { RecordingRecordingMode } [mode] 
 * @property { RecordingRecordingTrim } [trim] 
 */
export interface RecordingListInstanceUpdateOptions {
  mode?: RecordingRecordingMode;
  trim?: RecordingRecordingTrim;
}

export interface RecordingListInstance {


  /**
   * Fetch a RecordingInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingInstance
   */
  fetch(callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>


  /**
   * Update a RecordingInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingInstance
   */
  update(callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
  /**
   * Update a RecordingInstance
   *
   * @param { RecordingListInstanceUpdateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingInstance
   */
  update(params: RecordingListInstanceUpdateOptions, callback?: (error: Error | null, item?: RecordingInstance) => any): Promise<RecordingInstance>;
  update(params?: any, callback?: any): Promise<RecordingInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface RecordingSolution {
  trunkSid?: string;
}

interface RecordingListInstanceImpl extends RecordingListInstance {}
class RecordingListInstanceImpl implements RecordingListInstance {
  _version?: V1;
  _solution?: RecordingSolution;
  _uri?: string;

}

export function RecordingListInstance(version: V1, trunkSid: string): RecordingListInstance {
  const instance = {} as RecordingListInstanceImpl;

  instance._version = version;
  instance._solution = { trunkSid };
  instance._uri = `/Trunks/${trunkSid}/Recording`;

  instance.fetch = function fetch(callback?: any): Promise<RecordingInstance> {

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new RecordingInstance(operationVersion, payload, this._solution.trunkSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.update = function update(params?: any, callback?: any): Promise<RecordingInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params.mode !== undefined) data['Mode'] = params.mode;
    if (params.trim !== undefined) data['Trim'] = params.trim;

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.update({ uri: this._uri, method: 'post', data, headers });
    
    operationPromise = operationPromise.then(payload => new RecordingInstance(operationVersion, payload, this._solution.trunkSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface RecordingPayload extends RecordingResource{
}

interface RecordingResource {
  mode?: RecordingRecordingMode;
  trim?: RecordingRecordingTrim;
}

export class RecordingInstance {

  constructor(protected _version: V1, payload: RecordingPayload, trunkSid?: string) {
    this.mode = payload.mode;
    this.trim = payload.trim;

  }

  mode?: RecordingRecordingMode;
  trim?: RecordingRecordingTrim;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      mode: this.mode, 
      trim: this.trim
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


