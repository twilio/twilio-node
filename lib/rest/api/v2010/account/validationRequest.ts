/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V2010 from "../../V2010";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");



/**
 * Options to pass to create a ValidationRequestInstance
 *
 * @property { string } phoneNumber The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
 * @property { string } [friendlyName] A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
 * @property { number } [callDelay] The number of seconds to delay before initiating the verification call. Can be an integer between &#x60;0&#x60; and &#x60;60&#x60;, inclusive. The default is &#x60;0&#x60;.
 * @property { string } [extension] The digits to dial after connecting the verification call.
 * @property { string } [statusCallback] The URL we should call using the &#x60;status_callback_method&#x60; to send status information about the verification process to your application.
 * @property { string } [statusCallbackMethod] The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;.
 */
export interface ValidationRequestListInstanceCreateOptions {
  'phoneNumber': string;
  'friendlyName'?: string;
  'callDelay'?: number;
  'extension'?: string;
  'statusCallback'?: string;
  'statusCallbackMethod'?: string;
}

export interface ValidationRequestListInstance {


  /**
   * Create a ValidationRequestInstance
   *
   * @param { ValidationRequestListInstanceCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed ValidationRequestInstance
   */
  create(params: ValidationRequestListInstanceCreateOptions, callback?: (error: Error | null, item?: ValidationRequestInstance) => any): Promise<ValidationRequestInstance>;
  create(params: any, callback?: any): Promise<ValidationRequestInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ValidationRequestSolution {
  accountSid?: string;
}

interface ValidationRequestListInstanceImpl extends ValidationRequestListInstance {}
class ValidationRequestListInstanceImpl implements ValidationRequestListInstance {
  _version?: V2010;
  _solution?: ValidationRequestSolution;
  _uri?: string;

}

export function ValidationRequestListInstance(version: V2010, accountSid: string): ValidationRequestListInstance {
  const instance = {} as ValidationRequestListInstanceImpl;

  instance._version = version;
  instance._solution = { accountSid };
  instance._uri = `/Accounts/${accountSid}/OutgoingCallerIds.json`;

  instance.create = function create(params: any, callback?: any): Promise<ValidationRequestInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params['phoneNumber'] === null || params['phoneNumber'] === undefined) {
      throw new Error('Required parameter "params[\'phoneNumber\']" missing.');
    }

    const data: any = {};

    data['PhoneNumber'] = params['phoneNumber'];
    if (params['friendlyName'] !== undefined) data['FriendlyName'] = params['friendlyName'];
    if (params['callDelay'] !== undefined) data['CallDelay'] = params['callDelay'];
    if (params['extension'] !== undefined) data['Extension'] = params['extension'];
    if (params['statusCallback'] !== undefined) data['StatusCallback'] = params['statusCallback'];
    if (params['statusCallbackMethod'] !== undefined) data['StatusCallbackMethod'] = params['statusCallbackMethod'];

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post', data, headers });
    
    operationPromise = operationPromise.then(payload => new ValidationRequestInstance(operationVersion, payload, this._solution.accountSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface ValidationRequestPayload extends ValidationRequestResource{
}

interface ValidationRequestResource {
  account_sid?: string | null;
  call_sid?: string | null;
  friendly_name?: string | null;
  phone_number?: string | null;
  validation_code?: string | null;
}

export class ValidationRequestInstance {

  constructor(protected _version: V2010, payload: ValidationRequestPayload, accountSid?: string) {
    this.accountSid = payload.account_sid;
    this.callSid = payload.call_sid;
    this.friendlyName = payload.friendly_name;
    this.phoneNumber = payload.phone_number;
    this.validationCode = payload.validation_code;

  }

  /**
   * The SID of the Account that created the resource
   */
  accountSid?: string | null;
  /**
   * The SID of the Call the resource is associated with
   */
  callSid?: string | null;
  /**
   * The string that you assigned to describe the resource
   */
  friendlyName?: string | null;
  /**
   * The phone number to verify in E.164 format
   */
  phoneNumber?: string | null;
  /**
   * The 6 digit validation code that someone must enter to validate the Caller ID  when `phone_number` is called
   */
  validationCode?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      callSid: this.callSid, 
      friendlyName: this.friendlyName, 
      phoneNumber: this.phoneNumber, 
      validationCode: this.validationCode
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


