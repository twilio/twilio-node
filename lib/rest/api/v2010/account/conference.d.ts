/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V2010 = require('../../V2010');
import serialize = require('../../../../base/serialize');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { ParticipantList } from './conference/participant';
import { RecordingList } from './conference/recording';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the ConferenceList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 */
declare function ConferenceList(version: V2010, accountSid: string): ConferenceListInstance;

interface ConferenceResource {
  account_sid: string;
  api_version: string;
  date_created: Date;
  date_updated: Date;
  friendly_name: string;
  region: string;
  sid: string;
  status: ConferenceStatus;
  subresource_uris: string;
  uri: string;
}

interface ConferencePayload extends ConferenceResource, Page.TwilioResponsePayload {
}

interface ConferenceListInstance {
  /* jshint ignore:start */
  /**
   * Streams ConferenceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {Date} [opts.dateCreatedBefore] - Filter by date created
   * @param {Date} [opts.dateCreated] - Filter by date created
   * @param {Date} [opts.dateCreatedAfter] - Filter by date created
   * @param {Date} [opts.dateUpdatedBefore] - Filter by date updated
   * @param {Date} [opts.dateUpdated] - Filter by date updated
   * @param {Date} [opts.dateUpdatedAfter] - Filter by date updated
   * @param {string} [opts.friendlyName] - Filter by friendly name
   * @param {conference.status} [opts.status] - The status of the conference
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  ConferenceListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single target page of ConferenceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  ConferenceListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new ConferencePage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * @description Lists ConferenceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {Date} [opts.dateCreatedBefore] - Filter by date created
   * @param {Date} [opts.dateCreated] - Filter by date created
   * @param {Date} [opts.dateCreatedAfter] - Filter by date created
   * @param {Date} [opts.dateUpdatedBefore] - Filter by date updated
   * @param {Date} [opts.dateUpdated] - Filter by date updated
   * @param {Date} [opts.dateUpdatedAfter] - Filter by date updated
   * @param {string} [opts.friendlyName] - Filter by friendly name
   * @param {conference.status} [opts.status] - The status of the conference
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  ConferenceListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single page of ConferenceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {Date} [opts.dateCreatedBefore] - Filter by date created
   * @param {Date} [opts.dateCreated] - Filter by date created
   * @param {Date} [opts.dateCreatedAfter] - Filter by date created
   * @param {Date} [opts.dateUpdatedBefore] - Filter by date updated
   * @param {Date} [opts.dateUpdated] - Filter by date updated
   * @param {Date} [opts.dateUpdatedAfter] - Filter by date updated
   * @param {string} [opts.friendlyName] - Filter by friendly name
   * @param {conference.status} [opts.status] - The status of the conference
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  ConferenceListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'DateCreated<': serialize.iso8601Date(_.get(opts, 'dateCreatedBefore')),
      'DateCreated': serialize.iso8601Date(_.get(opts, 'dateCreated')),
      'DateCreated>': serialize.iso8601Date(_.get(opts, 'dateCreatedAfter')),
      'DateUpdated<': serialize.iso8601Date(_.get(opts, 'dateUpdatedBefore')),
      'DateUpdated': serialize.iso8601Date(_.get(opts, 'dateUpdated')),
      'DateUpdated>': serialize.iso8601Date(_.get(opts, 'dateUpdatedAfter')),
      'FriendlyName': _.get(opts, 'friendlyName'),
      'Status': _.get(opts, 'status'),
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new ConferencePage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}

/**
 * Options to pass to update
 *
 * @property status - Specifying completed will end the conference and kick all participants
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something into a conference.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface UpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  status?: conference.update_status;
}

/**
 * Options to pass to update
 *
 * @property status - Specifying completed will end the conference and kick all participants
 * @property announceUrl - The 'AnnounceUrl' attribute lets you specify a URL for announcing something into a conference.
 * @property announceMethod - Specify GET or POST, defaults to POST
 */
export interface UpdateOptions {
  announceMethod?: string;
  announceUrl?: string;
  status?: conference.update_status;
}


declare class ConferencePage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferencePage
   * @augments Page
   * @description Initialize the ConferencePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of ConferenceInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.ConferencePage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class ConferenceInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @description Initialize the ConferenceContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property apiVersion - The api_version
   * @property friendlyName - A human readable description of this resource
   * @property region - A string representing the Twilio Region where the conference was mixed.
   * @property sid - A string that uniquely identifies this conference
   * @property status - The status of the conference
   * @property uri - The URI for this resource
   * @property subresourceUris - The subresource_uris
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique conference Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: ConferenceContext;
  /**
   * fetch a ConferenceInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the participants
   *
   * @function participants
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   */
  participants();
  /**
   * Access the recordings
   *
   * @function recordings
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   */
  recordings();
  /**
   * Produce a plain JSON object version of the ConferenceInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   */
  toJSON();
  /**
   * update a ConferenceInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class ConferenceContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext
   * @description Initialize the ConferenceContext
   *
   * @property participants - participants resource
   * @property recordings - recordings resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique conference Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  /**
   * fetch a ConferenceInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  participants?: Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList;
  recordings?: Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList;
  /**
   * update a ConferenceInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { ConferenceContext, ConferenceInstance, ConferenceList, ConferenceListInstance, ConferencePage, ConferencePayload, ConferenceResource }
