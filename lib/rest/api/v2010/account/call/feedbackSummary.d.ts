/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import V2010 = require('../../../V2010');
import serialize = require('../../../../../base/serialize');
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the FeedbackSummaryList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique id of the Account responsible for creating this Call
 */
declare function FeedbackSummaryList(version: V2010, accountSid: string): FeedbackSummaryListInstance;

interface FeedbackSummaryResource {
  account_sid: string;
  call_count: number;
  call_feedback_count: number;
  date_created: Date;
  date_updated: Date;
  end_date: Date;
  include_subaccounts: boolean;
  issues: string;
  quality_score_average: number;
  quality_score_median: number;
  quality_score_standard_deviation: number;
  sid: string;
  start_date: Date;
  status: FeedbackSummaryStatus;
}

interface FeedbackSummaryPayload extends FeedbackSummaryResource, Page.TwilioResponsePayload {
}

interface FeedbackSummaryListInstance {
  /* jshint ignore:start */
  /**
   * create a FeedbackSummaryInstance
   *
   * @function create
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryList
   * @instance
   *
   * @param {object} opts - ...
   * @param {Date} opts.startDate -
   *          Only include usage that has occurred on or after this date.
   * @param {Date} opts.endDate -
   *          Only include usage that has occurred on or before this date.
   * @param {boolean} [opts.includeSubaccounts] -
   *          true to include feedback entries for the master account and all subaccounts.
   * @param {string} [opts.statusCallback] -
   *          The URL that Twilio will request when the Feedback Summary is completed.
   * @param {string} [opts.statusCallbackMethod] -
   *          The HTTP method Twilio will use to make requests to the StatusCallback URL.
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed FeedbackSummaryInstance
   */
  /* jshint ignore:end */
  FeedbackSummaryListInstance.create = function create(opts, callback) {
    if (_.isUndefined(opts)) {
      throw new Error('Required parameter "opts" missing.');
    }
    if (_.isUndefined(opts.startDate)) {
      throw new Error('Required parameter "opts.startDate" missing.');
    }
    if (_.isUndefined(opts.endDate)) {
      throw new Error('Required parameter "opts.endDate" missing.');
    }

    var deferred = Q.defer();
    var data = values.of({
      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),
      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),
      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),
      'StatusCallback': _.get(opts, 'statusCallback'),
      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod')
    });

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new FeedbackSummaryInstance(
        this._version,
        payload,
        this._solution.accountSid,
        this._solution.sid
      ));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}


declare class FeedbackSummaryPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryPage
   * @augments Page
   * @description Initialize the FeedbackSummaryPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of FeedbackSummaryInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class FeedbackSummaryInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance
   * @description Initialize the FeedbackSummaryContext
   *
   * @property accountSid - The account_sid
   * @property callCount - The call_count
   * @property callFeedbackCount - The call_feedback_count
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   * @property endDate - The end_date
   * @property includeSubaccounts - The include_subaccounts
   * @property issues - The issues
   * @property qualityScoreAverage - The quality_score_average
   * @property qualityScoreMedian - The quality_score_median
   * @property qualityScoreStandardDeviation - The quality_score_standard_deviation
   * @property sid - The sid
   * @property startDate - The start_date
   * @property status - The status
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique id of the Account responsible for creating this Call
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: FeedbackSummaryContext;
  /**
   * fetch a FeedbackSummaryInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a FeedbackSummaryInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the FeedbackSummaryInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryInstance
   * @instance
   */
  toJSON();
}


declare class FeedbackSummaryContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext
   * @description Initialize the FeedbackSummaryContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  /**
   * fetch a FeedbackSummaryInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a FeedbackSummaryInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.FeedbackSummaryContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { FeedbackSummaryContext, FeedbackSummaryInstance, FeedbackSummaryList, FeedbackSummaryListInstance, FeedbackSummaryPage, FeedbackSummaryPayload, FeedbackSummaryResource }
