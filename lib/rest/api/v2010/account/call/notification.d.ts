/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import V2010 = require('../../../V2010');
import serialize = require('../../../../../base/serialize');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';
import { SerializableClass } from '../../../../../interfaces';

/**
 * @description Initialize the NotificationList
 *
 * @param version - Version of the resource
 * @param accountSid - The account_sid
 * @param callSid - The call_sid
 */
declare function NotificationList(version: V2010, accountSid: string, callSid: string): NotificationListInstance;

interface NotificationResource {
  account_sid: string;
  api_version: string;
  call_sid: string;
  date_created: Date;
  date_updated: Date;
  error_code: string;
  log: string;
  message_date: Date;
  message_text: string;
  more_info: string;
  request_method: string;
  request_url: string;
  request_variables?: string;
  response_body?: string;
  response_headers?: string;
  sid: string;
  uri: string;
}

interface NotificationPayload extends NotificationResource, Page.TwilioResponsePayload {
}

interface NotificationListInstance {
  /* jshint ignore:start */
  /**
   * Streams NotificationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.log] - The log
   * @param {Date} [opts.messageDateBefore] - The message_date
   * @param {Date} [opts.messageDate] - The message_date
   * @param {Date} [opts.messageDateAfter] - The message_date
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  NotificationListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single target page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  NotificationListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new NotificationPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * @description Lists NotificationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.log] - The log
   * @param {Date} [opts.messageDateBefore] - The message_date
   * @param {Date} [opts.messageDate] - The message_date
   * @param {Date} [opts.messageDateAfter] - The message_date
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  NotificationListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.log] - The log
   * @param {Date} [opts.messageDateBefore] - The message_date
   * @param {Date} [opts.messageDate] - The message_date
   * @param {Date} [opts.messageDateAfter] - The message_date
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  NotificationListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'Log': _.get(opts, 'log'),
      'MessageDate<': serialize.iso8601Date(_.get(opts, 'messageDateBefore')),
      'MessageDate': serialize.iso8601Date(_.get(opts, 'messageDate')),
      'MessageDate>': serialize.iso8601Date(_.get(opts, 'messageDateAfter')),
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new NotificationPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}


declare class NotificationPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationPage
   * @augments Page
   * @description Initialize the NotificationPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of NotificationInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class NotificationInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @description Initialize the NotificationContext
   *
   * @property accountSid - The account_sid
   * @property apiVersion - The api_version
   * @property callSid - The call_sid
   * @property dateCreated - The date_created
   * @property dateUpdated - The date_updated
   * @property errorCode - The error_code
   * @property log - The log
   * @property messageDate - The message_date
   * @property messageText - The message_text
   * @property moreInfo - The more_info
   * @property requestMethod - The request_method
   * @property requestUrl - The request_url
   * @property requestVariables - The request_variables
   * @property responseBody - The response_body
   * @property responseHeaders - The response_headers
   * @property sid - The sid
   * @property uri - The uri
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param callSid - The call_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, callSid: sid, sid: sid);

  _proxy?: NotificationContext;
  /**
   * fetch a NotificationInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a NotificationInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the NotificationInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance
   * @instance
   */
  toJSON();
}


declare class NotificationContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationContext
   * @description Initialize the NotificationContext
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param callSid - The call_sid
   * @param sid - The sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, callSid: sid, sid: sid);

  /**
   * fetch a NotificationInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a NotificationInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
}

export { NotificationContext, NotificationInstance, NotificationList, NotificationListInstance, NotificationPage, NotificationPayload, NotificationResource }
