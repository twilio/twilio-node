/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V2010 from "../../../V2010";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");


type CallFeedbackIssues = 'audio-latency'|'digits-not-captured'|'dropped-call'|'imperfect-audio'|'incorrect-caller-id'|'one-way-audio'|'post-dial-delay'|'unsolicited-call';


/**
 * Options to pass to update a FeedbackInstance
 *
 * @property { number } [qualityScore] The call quality expressed as an integer from &#x60;1&#x60; to &#x60;5&#x60; where &#x60;1&#x60; represents very poor call quality and &#x60;5&#x60; represents a perfect call.
 * @property { Array<CallFeedbackIssues> } [issue] One or more issues experienced during the call. The issues can be: &#x60;imperfect-audio&#x60;, &#x60;dropped-call&#x60;, &#x60;incorrect-caller-id&#x60;, &#x60;post-dial-delay&#x60;, &#x60;digits-not-captured&#x60;, &#x60;audio-latency&#x60;, &#x60;unsolicited-call&#x60;, or &#x60;one-way-audio&#x60;.
 */
export interface FeedbackListInstanceUpdateOptions {
  "qualityScore"?: number;
  "issue"?: Array<CallFeedbackIssues>;
}

export interface FeedbackListInstance {


  /**
   * Fetch a FeedbackInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed FeedbackInstance
   */
  fetch(callback?: (error: Error | null, item?: FeedbackInstance) => any): Promise<FeedbackInstance>


  /**
   * Update a FeedbackInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed FeedbackInstance
   */
  update(callback?: (error: Error | null, item?: FeedbackInstance) => any): Promise<FeedbackInstance>;
  /**
   * Update a FeedbackInstance
   *
   * @param { FeedbackListInstanceUpdateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed FeedbackInstance
   */
  update(params: FeedbackListInstanceUpdateOptions, callback?: (error: Error | null, item?: FeedbackInstance) => any): Promise<FeedbackInstance>;
  update(params?: any, callback?: any): Promise<FeedbackInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface FeedbackSolution {
  accountSid?: string;
  callSid?: string;
}

interface FeedbackListInstanceImpl extends FeedbackListInstance {}
class FeedbackListInstanceImpl implements FeedbackListInstance {
  _version?: V2010;
  _solution?: FeedbackSolution;
  _uri?: string;

}

export function FeedbackListInstance(version: V2010, accountSid: string, callSid: string): FeedbackListInstance {
  const instance = {} as FeedbackListInstanceImpl;

  instance._version = version;
  instance._solution = { accountSid, callSid };
  instance._uri = `/Accounts/${accountSid}/Calls/${callSid}/Feedback.json`;

  instance.fetch = function fetch(callback?: any): Promise<FeedbackInstance> {

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: "get" });
    
    operationPromise = operationPromise.then(payload => new FeedbackInstance(operationVersion, payload, this._solution.accountSid, this._solution.callSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.update = function update(params?: any, callback?: any): Promise<FeedbackInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params["qualityScore"] !== undefined) data["QualityScore"] = params["qualityScore"];
    if (params["issue"] !== undefined) data["Issue"] = serialize.map(params["issue"], ((e) => e));

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded"

    let operationVersion = version,
        operationPromise = operationVersion.update({ uri: this._uri, method: "post", data, headers });
    
    operationPromise = operationPromise.then(payload => new FeedbackInstance(operationVersion, payload, this._solution.accountSid, this._solution.callSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface FeedbackPayload extends FeedbackResource{
}

interface FeedbackResource {
  account_sid?: string | null;
  date_created?: string | null;
  date_updated?: string | null;
  issues?: Array<CallFeedbackIssues> | null;
  quality_score?: number | null;
  sid?: string | null;
}

export class FeedbackInstance {

  constructor(protected _version: V2010, payload: FeedbackPayload, accountSid: string, callSid?: string) {
    this.accountSid = payload.account_sid;
    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
    this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
    this.issues = payload.issues;
    this.qualityScore = deserialize.integer(payload.quality_score);
    this.sid = payload.sid;

  }

  /**
   * The unique sid that identifies this account
   */
  accountSid?: string | null;
  /**
   * The date this resource was created
   */
  dateCreated?: string | null;
  /**
   * The date this resource was last updated
   */
  dateUpdated?: string | null;
  /**
   * Issues experienced during the call
   */
  issues?: Array<CallFeedbackIssues> | null;
  /**
   * 1 to 5 quality score
   */
  qualityScore?: number | null;
  /**
   * A string that uniquely identifies this feedback resource
   */
  sid?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      dateCreated: this.dateCreated, 
      dateUpdated: this.dateUpdated, 
      issues: this.issues, 
      qualityScore: this.qualityScore, 
      sid: this.sid
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


