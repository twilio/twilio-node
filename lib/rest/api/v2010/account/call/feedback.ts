/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2010 from "../../../V2010";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");
import { isValidPathParam } from "../../../../../base/utility";

type CallFeedbackIssues =
  | "audio-latency"
  | "digits-not-captured"
  | "dropped-call"
  | "imperfect-audio"
  | "incorrect-caller-id"
  | "one-way-audio"
  | "post-dial-delay"
  | "unsolicited-call";

/**
 * Options to pass to update a FeedbackInstance
 */
export interface FeedbackContextUpdateOptions {
  /** The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call. */
  qualityScore?: number;
  /** One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`. */
  issue?: Array<CallFeedbackIssues>;
}

export interface FeedbackContext {
  /**
   * Fetch a FeedbackInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance>;

  /**
   * Update a FeedbackInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackInstance
   */
  update(
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance>;
  /**
   * Update a FeedbackInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackInstance
   */
  update(
    params: FeedbackContextUpdateOptions,
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface FeedbackContextSolution {
  accountSid: string;
  callSid: string;
}

export class FeedbackContextImpl implements FeedbackContext {
  protected _solution: FeedbackContextSolution;
  protected _uri: string;

  constructor(protected _version: V2010, accountSid: string, callSid: string) {
    if (!isValidPathParam(accountSid)) {
      throw new Error("Parameter 'accountSid' is not valid.");
    }

    if (!isValidPathParam(callSid)) {
      throw new Error("Parameter 'callSid' is not valid.");
    }

    this._solution = { accountSid, callSid };
    this._uri = `/Accounts/${accountSid}/Calls/${callSid}/Feedback.json`;
  }

  fetch(
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FeedbackInstance(
          operationVersion,
          payload,
          instance._solution.accountSid,
          instance._solution.callSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | FeedbackContextUpdateOptions
      | ((error: Error | null, item?: FeedbackInstance) => any),
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["qualityScore"] !== undefined)
      data["QualityScore"] = params["qualityScore"];
    if (params["issue"] !== undefined)
      data["Issue"] = serialize.map(
        params["issue"],
        (e: CallFeedbackIssues) => e
      );

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FeedbackInstance(
          operationVersion,
          payload,
          instance._solution.accountSid,
          instance._solution.callSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface FeedbackPayload extends FeedbackResource {}

interface FeedbackResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  issues: Array<CallFeedbackIssues>;
  quality_score: number;
  sid: string;
}

export class FeedbackInstance {
  protected _solution: FeedbackContextSolution;
  protected _context?: FeedbackContext;

  constructor(
    protected _version: V2010,
    payload: FeedbackResource,
    accountSid: string,
    callSid: string
  ) {
    this.accountSid = payload.account_sid;
    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
    this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
    this.issues = payload.issues;
    this.qualityScore = deserialize.integer(payload.quality_score);
    this.sid = payload.sid;

    this._solution = { accountSid, callSid };
  }

  /**
   * The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
   */
  accountSid: string;
  /**
   * The date that this resource was created, given in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  dateUpdated: Date;
  /**
   * A list of issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
   */
  issues: Array<CallFeedbackIssues>;
  /**
   * `1` to `5` quality score where `1` represents imperfect experience and `5` represents a perfect call.
   */
  qualityScore: number;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;

  private get _proxy(): FeedbackContext {
    this._context =
      this._context ||
      new FeedbackContextImpl(
        this._version,
        this._solution.accountSid,
        this._solution.callSid
      );
    return this._context;
  }

  /**
   * Fetch a FeedbackInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a FeedbackInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackInstance
   */
  update(
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance>;
  /**
   * Update a FeedbackInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackInstance
   */
  update(
    params: FeedbackContextUpdateOptions,
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: FeedbackInstance) => any
  ): Promise<FeedbackInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      issues: this.issues,
      qualityScore: this.qualityScore,
      sid: this.sid,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface FeedbackSolution {
  accountSid: string;
  callSid: string;
}

export interface FeedbackListInstance {
  _version: V2010;
  _solution: FeedbackSolution;
  _uri: string;

  (): FeedbackContext;
  get(): FeedbackContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function FeedbackListInstance(
  version: V2010,
  accountSid: string,
  callSid: string
): FeedbackListInstance {
  if (!isValidPathParam(accountSid)) {
    throw new Error("Parameter 'accountSid' is not valid.");
  }

  if (!isValidPathParam(callSid)) {
    throw new Error("Parameter 'callSid' is not valid.");
  }

  const instance = (() => instance.get()) as FeedbackListInstance;

  instance.get = function get(): FeedbackContext {
    return new FeedbackContextImpl(version, accountSid, callSid);
  };

  instance._version = version;
  instance._solution = { accountSid, callSid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
