/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2010 from "../../../V2010";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");
import { isValidPathParam } from "../../../../../base/utility";

type CallFeedbackSummaryStatus =
  | "queued"
  | "in-progress"
  | "completed"
  | "failed";

/**
 * Options to pass to create a FeedbackSummaryInstance
 */
export interface FeedbackSummaryListInstanceCreateOptions {
  /** Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC. */
  startDate: Date;
  /** Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC. */
  endDate: Date;
  /** Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account. */
  includeSubaccounts?: boolean;
  /** The URL that we will request when the feedback summary is complete. */
  statusCallback?: string;
  /** The HTTP method (`GET` or `POST`) we use to make the request to the `StatusCallback` URL. */
  statusCallbackMethod?: string;
}

export interface FeedbackSummaryContext {
  /**
   * Remove a FeedbackSummaryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a FeedbackSummaryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackSummaryInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FeedbackSummaryInstance) => any
  ): Promise<FeedbackSummaryInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface FeedbackSummaryContextSolution {
  accountSid: string;
  sid: string;
}

export class FeedbackSummaryContextImpl implements FeedbackSummaryContext {
  protected _solution: FeedbackSummaryContextSolution;
  protected _uri: string;

  constructor(protected _version: V2010, accountSid: string, sid: string) {
    if (!isValidPathParam(accountSid)) {
      throw new Error("Parameter 'accountSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { accountSid, sid };
    this._uri = `/Accounts/${accountSid}/Calls/FeedbackSummary/${sid}.json`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: FeedbackSummaryInstance) => any
  ): Promise<FeedbackSummaryInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FeedbackSummaryInstance(
          operationVersion,
          payload,
          instance._solution.accountSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface FeedbackSummaryPayload extends FeedbackSummaryResource {}

interface FeedbackSummaryResource {
  account_sid: string;
  call_count: number;
  call_feedback_count: number;
  date_created: Date;
  date_updated: Date;
  end_date: Date;
  include_subaccounts: boolean;
  issues: Array<any>;
  quality_score_average: number;
  quality_score_median: number;
  quality_score_standard_deviation: number;
  sid: string;
  start_date: Date;
  status: CallFeedbackSummaryStatus;
}

export class FeedbackSummaryInstance {
  protected _solution: FeedbackSummaryContextSolution;
  protected _context?: FeedbackSummaryContext;

  constructor(
    protected _version: V2010,
    payload: FeedbackSummaryResource,
    accountSid: string,
    sid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.callCount = deserialize.integer(payload.call_count);
    this.callFeedbackCount = deserialize.integer(payload.call_feedback_count);
    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
    this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
    this.endDate = deserialize.iso8601Date(payload.end_date);
    this.includeSubaccounts = payload.include_subaccounts;
    this.issues = payload.issues;
    this.qualityScoreAverage = payload.quality_score_average;
    this.qualityScoreMedian = payload.quality_score_median;
    this.qualityScoreStandardDeviation =
      payload.quality_score_standard_deviation;
    this.sid = payload.sid;
    this.startDate = deserialize.iso8601Date(payload.start_date);
    this.status = payload.status;

    this._solution = { accountSid, sid: sid || this.sid };
  }

  /**
   * The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
   */
  accountSid: string;
  /**
   * The total number of calls.
   */
  callCount: number;
  /**
   * The total number of calls with a feedback entry.
   */
  callFeedbackCount: number;
  /**
   * The date that this resource was created, given in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  dateUpdated: Date;
  /**
   * The last date for which feedback entries are included in this Feedback Summary, formatted as `YYYY-MM-DD` and specified in UTC.
   */
  endDate: Date;
  /**
   * Whether the feedback summary includes subaccounts; `true` if it does, otherwise `false`.
   */
  includeSubaccounts: boolean;
  /**
   * A list of issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, or `one-way-audio`.
   */
  issues: Array<any>;
  /**
   * The average QualityScore of the feedback entries.
   */
  qualityScoreAverage: number;
  /**
   * The median QualityScore of the feedback entries.
   */
  qualityScoreMedian: number;
  /**
   * The standard deviation of the quality scores.
   */
  qualityScoreStandardDeviation: number;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The first date for which feedback entries are included in this feedback summary, formatted as `YYYY-MM-DD` and specified in UTC.
   */
  startDate: Date;
  status: CallFeedbackSummaryStatus;

  private get _proxy(): FeedbackSummaryContext {
    this._context =
      this._context ||
      new FeedbackSummaryContextImpl(
        this._version,
        this._solution.accountSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Remove a FeedbackSummaryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a FeedbackSummaryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackSummaryInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FeedbackSummaryInstance) => any
  ): Promise<FeedbackSummaryInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      callCount: this.callCount,
      callFeedbackCount: this.callFeedbackCount,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      endDate: this.endDate,
      includeSubaccounts: this.includeSubaccounts,
      issues: this.issues,
      qualityScoreAverage: this.qualityScoreAverage,
      qualityScoreMedian: this.qualityScoreMedian,
      qualityScoreStandardDeviation: this.qualityScoreStandardDeviation,
      sid: this.sid,
      startDate: this.startDate,
      status: this.status,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface FeedbackSummarySolution {
  accountSid: string;
}

export interface FeedbackSummaryListInstance {
  _version: V2010;
  _solution: FeedbackSummarySolution;
  _uri: string;

  (sid: string): FeedbackSummaryContext;
  get(sid: string): FeedbackSummaryContext;

  /**
   * Create a FeedbackSummaryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FeedbackSummaryInstance
   */
  create(
    params: FeedbackSummaryListInstanceCreateOptions,
    callback?: (error: Error | null, item?: FeedbackSummaryInstance) => any
  ): Promise<FeedbackSummaryInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function FeedbackSummaryListInstance(
  version: V2010,
  accountSid: string
): FeedbackSummaryListInstance {
  if (!isValidPathParam(accountSid)) {
    throw new Error("Parameter 'accountSid' is not valid.");
  }

  const instance = ((sid) => instance.get(sid)) as FeedbackSummaryListInstance;

  instance.get = function get(sid): FeedbackSummaryContext {
    return new FeedbackSummaryContextImpl(version, accountSid, sid);
  };

  instance._version = version;
  instance._solution = { accountSid };
  instance._uri = `/Accounts/${accountSid}/Calls/FeedbackSummary.json`;

  instance.create = function create(
    params: FeedbackSummaryListInstanceCreateOptions,
    callback?: (error: Error | null, items: FeedbackSummaryInstance) => any
  ): Promise<FeedbackSummaryInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["startDate"] === null || params["startDate"] === undefined) {
      throw new Error("Required parameter \"params['startDate']\" missing.");
    }

    if (params["endDate"] === null || params["endDate"] === undefined) {
      throw new Error("Required parameter \"params['endDate']\" missing.");
    }

    let data: any = {};

    data["StartDate"] = serialize.iso8601Date(params["startDate"]);

    data["EndDate"] = serialize.iso8601Date(params["endDate"]);
    if (params["includeSubaccounts"] !== undefined)
      data["IncludeSubaccounts"] = serialize.bool(params["includeSubaccounts"]);
    if (params["statusCallback"] !== undefined)
      data["StatusCallback"] = params["statusCallback"];
    if (params["statusCallbackMethod"] !== undefined)
      data["StatusCallbackMethod"] = params["statusCallbackMethod"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FeedbackSummaryInstance(
          operationVersion,
          payload,
          instance._solution.accountSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
