/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V2010 = require('../../V2010');
import serialize = require('../../../../base/serialize');
import { AssignedAddOnList } from './incomingPhoneNumber/assignedAddOn';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the IncomingPhoneNumberList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 */
declare function IncomingPhoneNumberList(version: V2010, accountSid: string): IncomingPhoneNumberListInstance;

interface IncomingPhoneNumberResource {
  account_sid: string;
  address_requirements: IncomingPhoneNumberAddressRequirement;
  address_sid: string;
  api_version: string;
  beta: boolean;
  capabilities: string;
  date_created: Date;
  date_updated: Date;
  emergency_address_sid: string;
  emergency_status: IncomingPhoneNumberEmergencyStatus;
  friendly_name: string;
  identity_sid: string;
  origin: string;
  phone_number: string;
  sid: string;
  sms_application_sid: string;
  sms_fallback_method: string;
  sms_fallback_url: string;
  sms_method: string;
  sms_url: string;
  status_callback: string;
  status_callback_method: string;
  trunk_sid: string;
  uri: string;
  voice_application_sid: string;
  voice_caller_id_lookup: boolean;
  voice_fallback_method: string;
  voice_fallback_url: string;
  voice_method: string;
  voice_url: string;
}

interface IncomingPhoneNumberPayload extends IncomingPhoneNumberResource, Page.TwilioResponsePayload {
}

interface IncomingPhoneNumberListInstance {
  /* jshint ignore:start */
  /**
   * create a IncomingPhoneNumberInstance
   *
   * @function create
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.apiVersion] - The Twilio Rest API version to use
   * @param {string} [opts.friendlyName] -
   *          A human readable description of this resource
   * @param {string} [opts.smsApplicationSid] -
   *          Unique string that identifies the application
   * @param {string} [opts.smsFallbackMethod] -
   *          HTTP method used with sms fallback url
   * @param {string} [opts.smsFallbackUrl] -
   *          URL Twilio will request if an error occurs in executing TwiML
   * @param {string} [opts.smsMethod] - HTTP method to use with sms url
   * @param {string} [opts.smsUrl] - URL Twilio will request when receiving an SMS
   * @param {string} [opts.statusCallback] -
   *          URL Twilio will use to pass status parameters
   * @param {string} [opts.statusCallbackMethod] -
   *          HTTP method twilio will use with status callback
   * @param {string} [opts.voiceApplicationSid] -
   *          The unique sid of the application to handle this number
   * @param {boolean} [opts.voiceCallerIdLookup] - Look up the caller's caller-ID
   * @param {string} [opts.voiceFallbackMethod] - HTTP method used with fallback_url
   * @param {string} [opts.voiceFallbackUrl] -
   *          URL Twilio will request when an error occurs in TwiML
   * @param {string} [opts.voiceMethod] - HTTP method used with the voice url
   * @param {string} [opts.voiceUrl] - URL Twilio will request when receiving a call
   * @param {incoming_phone_number.emergency_status} [opts.emergencyStatus] -
   *          The emergency_status
   * @param {string} [opts.emergencyAddressSid] - The emergency_address_sid
   * @param {string} [opts.trunkSid] - Unique string to identify the trunk
   * @param {string} [opts.identitySid] -
   *          Unique string that identifies the identity associated with number
   * @param {string} [opts.addressSid] -
   *          Unique string that identifies the address associated with number
   * @param {string} [opts.phoneNumber] - The phone number
   * @param {string} [opts.areaCode] - The desired area code for the new number
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed IncomingPhoneNumberInstance
   */
  /* jshint ignore:end */
  IncomingPhoneNumberListInstance.create = function create(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'PhoneNumber': _.get(opts, 'phoneNumber'),
      'AreaCode': _.get(opts, 'areaCode'),
      'ApiVersion': _.get(opts, 'apiVersion'),
      'FriendlyName': _.get(opts, 'friendlyName'),
      'SmsApplicationSid': _.get(opts, 'smsApplicationSid'),
      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),
      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),
      'SmsMethod': _.get(opts, 'smsMethod'),
      'SmsUrl': _.get(opts, 'smsUrl'),
      'StatusCallback': _.get(opts, 'statusCallback'),
      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),
      'VoiceApplicationSid': _.get(opts, 'voiceApplicationSid'),
      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),
      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),
      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),
      'VoiceMethod': _.get(opts, 'voiceMethod'),
      'VoiceUrl': _.get(opts, 'voiceUrl'),
      'EmergencyStatus': _.get(opts, 'emergencyStatus'),
      'EmergencyAddressSid': _.get(opts, 'emergencyAddressSid'),
      'TrunkSid': _.get(opts, 'trunkSid'),
      'IdentitySid': _.get(opts, 'identitySid'),
      'AddressSid': _.get(opts, 'addressSid')
    });

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new IncomingPhoneNumberInstance(
        this._version,
        payload,
        this._solution.accountSid,
        this._solution.sid
      ));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Streams IncomingPhoneNumberInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {boolean} [opts.beta] - Include new phone numbers
   * @param {string} [opts.friendlyName] - Filter by friendly name
   * @param {string} [opts.phoneNumber] - Filter by incoming phone number
   * @param {string} [opts.origin] -
   *          Include phone numbers based on the origin, by default, phone numbers of all origin are included.
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  IncomingPhoneNumberListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single target page of IncomingPhoneNumberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  IncomingPhoneNumberListInstance.getPage = function getPage(targetUrl, callback)
                                                              {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new IncomingPhoneNumberPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * @description Lists IncomingPhoneNumberInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {boolean} [opts.beta] - Include new phone numbers
   * @param {string} [opts.friendlyName] - Filter by friendly name
   * @param {string} [opts.phoneNumber] - Filter by incoming phone number
   * @param {string} [opts.origin] -
   *          Include phone numbers based on the origin, by default, phone numbers of all origin are included.
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  IncomingPhoneNumberListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single page of IncomingPhoneNumberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {boolean} [opts.beta] - Include new phone numbers
   * @param {string} [opts.friendlyName] - Filter by friendly name
   * @param {string} [opts.phoneNumber] - Filter by incoming phone number
   * @param {string} [opts.origin] -
   *          Include phone numbers based on the origin, by default, phone numbers of all origin are included.
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  IncomingPhoneNumberListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'Beta': serialize.bool(_.get(opts, 'beta')),
      'FriendlyName': _.get(opts, 'friendlyName'),
      'PhoneNumber': _.get(opts, 'phoneNumber'),
      'Origin': _.get(opts, 'origin'),
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new IncomingPhoneNumberPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}

/**
 * Options to pass to update
 *
 * @property accountSid - The new owner of the phone number
 * @property apiVersion - The Twilio REST API version to use
 * @property friendlyName - A human readable description of this resource
 * @property smsApplicationSid - Unique string that identifies the application
 * @property smsFallbackMethod - HTTP method used with sms fallback url
 * @property smsFallbackUrl - URL Twilio will request if an error occurs in executing TwiML
 * @property smsMethod - HTTP method to use with sms url
 * @property smsUrl - URL Twilio will request when receiving an SMS
 * @property statusCallback - URL Twilio will use to pass status parameters
 * @property statusCallbackMethod - HTTP method twilio will use with status callback
 * @property voiceApplicationSid - The unique sid of the application to handle this number
 * @property voiceCallerIdLookup - Look up the caller's caller-ID
 * @property voiceFallbackMethod - HTTP method used with fallback_url
 * @property voiceFallbackUrl - URL Twilio will request when an error occurs in TwiML
 * @property voiceMethod - HTTP method used with the voice url
 * @property voiceUrl - URL Twilio will request when receiving a call
 * @property emergencyStatus - The emergency_status
 * @property emergencyAddressSid - The emergency_address_sid
 * @property trunkSid - Unique string to identify the trunk
 * @property voiceReceiveMode - The voice_receive_mode
 * @property identitySid - Unique string that identifies the identity associated with number
 * @property addressSid - Unique string that identifies the address associated with number
 */
export interface UpdateOptions {
  accountSid?: string;
  addressSid?: string;
  apiVersion?: string;
  emergencyAddressSid?: string;
  emergencyStatus?: incoming_phone_number.emergency_status;
  friendlyName?: string;
  identitySid?: string;
  smsApplicationSid?: string;
  smsFallbackMethod?: string;
  smsFallbackUrl?: string;
  smsMethod?: string;
  smsUrl?: string;
  statusCallback?: string;
  statusCallbackMethod?: string;
  trunkSid?: string;
  voiceApplicationSid?: string;
  voiceCallerIdLookup?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceReceiveMode?: incoming_phone_number.voice_receive_mode;
  voiceUrl?: string;
}

/**
 * Options to pass to update
 *
 * @property accountSid - The new owner of the phone number
 * @property apiVersion - The Twilio REST API version to use
 * @property friendlyName - A human readable description of this resource
 * @property smsApplicationSid - Unique string that identifies the application
 * @property smsFallbackMethod - HTTP method used with sms fallback url
 * @property smsFallbackUrl - URL Twilio will request if an error occurs in executing TwiML
 * @property smsMethod - HTTP method to use with sms url
 * @property smsUrl - URL Twilio will request when receiving an SMS
 * @property statusCallback - URL Twilio will use to pass status parameters
 * @property statusCallbackMethod - HTTP method twilio will use with status callback
 * @property voiceApplicationSid - The unique sid of the application to handle this number
 * @property voiceCallerIdLookup - Look up the caller's caller-ID
 * @property voiceFallbackMethod - HTTP method used with fallback_url
 * @property voiceFallbackUrl - URL Twilio will request when an error occurs in TwiML
 * @property voiceMethod - HTTP method used with the voice url
 * @property voiceUrl - URL Twilio will request when receiving a call
 * @property emergencyStatus - The emergency_status
 * @property emergencyAddressSid - The emergency_address_sid
 * @property trunkSid - Unique string to identify the trunk
 * @property voiceReceiveMode - The voice_receive_mode
 * @property identitySid - Unique string that identifies the identity associated with number
 * @property addressSid - Unique string that identifies the address associated with number
 */
export interface UpdateOptions {
  accountSid?: string;
  addressSid?: string;
  apiVersion?: string;
  emergencyAddressSid?: string;
  emergencyStatus?: incoming_phone_number.emergency_status;
  friendlyName?: string;
  identitySid?: string;
  smsApplicationSid?: string;
  smsFallbackMethod?: string;
  smsFallbackUrl?: string;
  smsMethod?: string;
  smsUrl?: string;
  statusCallback?: string;
  statusCallbackMethod?: string;
  trunkSid?: string;
  voiceApplicationSid?: string;
  voiceCallerIdLookup?: boolean;
  voiceFallbackMethod?: string;
  voiceFallbackUrl?: string;
  voiceMethod?: string;
  voiceReceiveMode?: incoming_phone_number.voice_receive_mode;
  voiceUrl?: string;
}


declare class IncomingPhoneNumberPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberPage
   * @augments Page
   * @description Initialize the IncomingPhoneNumberPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of IncomingPhoneNumberInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class IncomingPhoneNumberInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberInstance
   * @description Initialize the IncomingPhoneNumberContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property addressSid - Unique string that identifies the address associated with number
   * @property addressRequirements - Indicates if the customer requires an address
   * @property apiVersion - The Twilio REST API version to use
   * @property beta - Indicates if the phone number is a beta number
   * @property capabilities - Indicate if a phone can receive calls or messages
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property friendlyName - A human readable description of this resouce
   * @property identitySid - Unique string that identifies the identity associated with number
   * @property phoneNumber - The incoming phone number
   * @property origin - Twilio owned phone numbers are marked as twilio while hosted phone numbers are marked as hosted.
   * @property sid - A string that uniquely identifies this resource
   * @property smsApplicationSid - Unique string that identifies the application
   * @property smsFallbackMethod - HTTP method used with sms fallback url
   * @property smsFallbackUrl - URL Twilio will request if an error occurs in executing TwiML
   * @property smsMethod - HTTP method to use with sms url
   * @property smsUrl - URL Twilio will request when receiving an SMS
   * @property statusCallback - URL Twilio will use to pass status parameters
   * @property statusCallbackMethod - HTTP method twilio will use with status callback
   * @property trunkSid - Unique string to identify the trunk
   * @property uri - The URI for this resource
   * @property voiceApplicationSid - The unique sid of the application to handle this number
   * @property voiceCallerIdLookup - Look up the caller's caller-ID
   * @property voiceFallbackMethod - HTTP method used with fallback_url
   * @property voiceFallbackUrl - URL Twilio will request when an error occurs in TwiML
   * @property voiceMethod - HTTP method used with the voice url
   * @property voiceUrl - URL Twilio will request when receiving a call
   * @property emergencyStatus - The emergency_status
   * @property emergencyAddressSid - The emergency_address_sid
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique incoming-phone-number Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: IncomingPhoneNumberContext;
  /**
   * Access the assignedAddOns
   *
   * @function assignedAddOns
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberInstance
   * @instance
   */
  assignedAddOns();
  /**
   * fetch a IncomingPhoneNumberInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a IncomingPhoneNumberInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the IncomingPhoneNumberInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberInstance
   * @instance
   */
  toJSON();
  /**
   * update a IncomingPhoneNumberInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}


declare class IncomingPhoneNumberContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext
   * @description Initialize the IncomingPhoneNumberContext
   *
   * @property assignedAddOns - assignedAddOns resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique incoming-phone-number Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  assignedAddOns?: Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.AssignedAddOnList;
  /**
   * fetch a IncomingPhoneNumberInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * remove a IncomingPhoneNumberInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a IncomingPhoneNumberInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
}

export { IncomingPhoneNumberContext, IncomingPhoneNumberInstance, IncomingPhoneNumberList, IncomingPhoneNumberListInstance, IncomingPhoneNumberPage, IncomingPhoneNumberPayload, IncomingPhoneNumberResource }
