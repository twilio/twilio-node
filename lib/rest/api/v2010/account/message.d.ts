/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import V2010 = require('../../V2010');
import serialize = require('../../../../base/serialize');
import { FeedbackList } from './message/feedback';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { MediaList } from './message/media';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the MessageList
 *
 * @param version - Version of the resource
 * @param accountSid - The unique sid that identifies this account
 */
declare function MessageList(version: V2010, accountSid: string): MessageListInstance;

interface MessageResource {
  account_sid: string;
  api_version: string;
  body: string;
  date_created: Date;
  date_sent: Date;
  date_updated: Date;
  direction: MessageDirection;
  error_code: number;
  error_message: string;
  from: string;
  messaging_service_sid: string;
  num_media: string;
  num_segments: string;
  price: number;
  price_unit: string;
  sid: string;
  status: MessageStatus;
  subresource_uris: string;
  to: string;
  uri: string;
}

interface MessagePayload extends MessageResource, Page.TwilioResponsePayload {
}

interface MessageListInstance {
  /* jshint ignore:start */
  /**
   * create a MessageInstance
   *
   * @function create
   * @memberof Twilio.Api.V2010.AccountContext.MessageList
   * @instance
   *
   * @param {object} opts - ...
   * @param {string} opts.to - The phone number to receive the message
   * @param {string} [opts.statusCallback] -
   *          URL Twilio will request when the status changes
   * @param {string} [opts.applicationSid] - The application to use for callbacks
   * @param {number} [opts.maxPrice] -
   *          The total maximum price up to the fourth decimal in US dollars acceptable for the message to be delivered.
   * @param {boolean} [opts.provideFeedback] -
   *          Set this value to true if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the Message Feedback API.
   * @param {number} [opts.validityPeriod] -
   *          The number of seconds that the message can remain in a Twilio queue.
   * @param {string} [opts.maxRate] - The max_rate
   * @param {boolean} [opts.forceDelivery] - The force_delivery
   * @param {string} [opts.providerSid] - The provider_sid
   * @param {message.content_retention} [opts.contentRetention] -
   *          The content_retention
   * @param {message.address_retention} [opts.addressRetention] -
   *          The address_retention
   * @param {boolean} [opts.smartEncoded] - The smart_encoded
   * @param {string} [opts.from] - The phone number that initiated the message
   * @param {string} [opts.messagingServiceSid] -
   *          The 34 character unique id of the Messaging Service you want to associate with this Message.
   * @param {string} [opts.body] -
   *          The text of the message you want to send, limited to 1600 characters.
   * @param {string|list} [opts.mediaUrl] -
   *          The URL of the media you wish to send out with the message.
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed MessageInstance
   */
  /* jshint ignore:end */
  MessageListInstance.create = function create(opts, callback) {
    if (_.isUndefined(opts)) {
      throw new Error('Required parameter "opts" missing.');
    }
    if (_.isUndefined(opts.to)) {
      throw new Error('Required parameter "opts.to" missing.');
    }

    var deferred = Q.defer();
    var data = values.of({
      'To': _.get(opts, 'to'),
      'From': _.get(opts, 'from'),
      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),
      'Body': _.get(opts, 'body'),
      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function(e) { return e; }),
      'StatusCallback': _.get(opts, 'statusCallback'),
      'ApplicationSid': _.get(opts, 'applicationSid'),
      'MaxPrice': _.get(opts, 'maxPrice'),
      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),
      'ValidityPeriod': _.get(opts, 'validityPeriod'),
      'MaxRate': _.get(opts, 'maxRate'),
      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),
      'ProviderSid': _.get(opts, 'providerSid'),
      'ContentRetention': _.get(opts, 'contentRetention'),
      'AddressRetention': _.get(opts, 'addressRetention'),
      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded'))
    });

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new MessageInstance(
        this._version,
        payload,
        this._solution.accountSid,
        this._solution.sid
      ));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Streams MessageInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Api.V2010.AccountContext.MessageList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.to] - Filter by messages to this number
   * @param {string} [opts.from] - Filter by from number
   * @param {Date} [opts.dateSentBefore] - Filter by date sent
   * @param {Date} [opts.dateSent] - Filter by date sent
   * @param {Date} [opts.dateSentAfter] - Filter by date sent
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  MessageListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single target page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Api.V2010.AccountContext.MessageList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  MessageListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new MessagePage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * @description Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Api.V2010.AccountContext.MessageList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.to] - Filter by messages to this number
   * @param {string} [opts.from] - Filter by from number
   * @param {Date} [opts.dateSentBefore] - Filter by date sent
   * @param {Date} [opts.dateSent] - Filter by date sent
   * @param {Date} [opts.dateSentAfter] - Filter by date sent
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  MessageListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Api.V2010.AccountContext.MessageList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.to] - Filter by messages to this number
   * @param {string} [opts.from] - Filter by from number
   * @param {Date} [opts.dateSentBefore] - Filter by date sent
   * @param {Date} [opts.dateSent] - Filter by date sent
   * @param {Date} [opts.dateSentAfter] - Filter by date sent
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  MessageListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'To': _.get(opts, 'to'),
      'From': _.get(opts, 'from'),
      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),
      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),
      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new MessagePage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}

/**
 * Options to pass to update
 *
 * @property body - The text of the message you want to send, limited to 1600 characters.
 */
export interface UpdateOptions {
  body: string;
}

/**
 * Options to pass to update
 *
 * @property body - The text of the message you want to send, limited to 1600 characters.
 */
export interface UpdateOptions {
  body: string;
}


declare class MessagePage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessagePage
   * @augments Page
   * @description Initialize the MessagePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of MessageInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountContext.MessagePage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class MessageInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageInstance
   * @description Initialize the MessageContext
   *
   * @property accountSid - The unique sid that identifies this account
   * @property apiVersion - The version of the Twilio API used to process the message.
   * @property body - The text body of the message. Up to 1600 characters long.
   * @property dateCreated - The date this resource was created
   * @property dateUpdated - The date this resource was last updated
   * @property dateSent - The date the message was sent
   * @property direction - The direction of the message
   * @property errorCode - The error code associated with the message
   * @property errorMessage - Human readable description of the ErrorCode
   * @property from - The phone number that initiated the message
   * @property messagingServiceSid - The unique id of the Messaging Service used with the message.
   * @property numMedia - Number of media files associated with the message
   * @property numSegments - Indicates number of messages used to delivery the body
   * @property price - The amount billed for the message
   * @property priceUnit - The currency in which Price is measured
   * @property sid - A string that uniquely identifies this message
   * @property status - The status of this message
   * @property subresourceUris - The URI for any subresources
   * @property to - The phone number that received the message
   * @property uri - The URI for this resource
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The unique sid that identifies this account
   * @param sid - Fetch by unique message Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, accountSid: sid, sid: sid);

  _proxy?: MessageContext;
  /**
   * Access the feedback
   *
   * @function feedback
   * @memberof Twilio.Api.V2010.AccountContext.MessageInstance
   * @instance
   */
  feedback();
  /**
   * fetch a MessageInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.MessageInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the media
   *
   * @function media
   * @memberof Twilio.Api.V2010.AccountContext.MessageInstance
   * @instance
   */
  media();
  /**
   * remove a MessageInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.MessageInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * Produce a plain JSON object version of the MessageInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountContext.MessageInstance
   * @instance
   */
  toJSON();
  /**
   * update a MessageInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.MessageInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts: object, callback?: function);
}


declare class MessageContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext.MessageContext
   * @description Initialize the MessageContext
   *
   * @property media - media resource
   * @property feedback - feedback resource
   *
   * @param version - Version of the resource
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique message Sid
   */
  constructor(version: Twilio.Api.V2010, accountSid: sid, sid: sid);

  feedback?: Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList;
  /**
   * fetch a MessageInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  media?: Twilio.Api.V2010.AccountContext.MessageContext.MediaList;
  /**
   * remove a MessageInstance
   *
   * @function remove
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: function);
  /**
   * update a MessageInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext.MessageContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts: object, callback?: function);
}

export { MessageContext, MessageInstance, MessageList, MessageListInstance, MessagePage, MessagePayload, MessageResource }
