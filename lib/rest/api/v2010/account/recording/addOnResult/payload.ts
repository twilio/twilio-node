/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../../../base/Page";
import Response from "../../../../../../http/response";
import V2010 from "../../../../V2010";
const deserialize = require("../../../../../../base/deserialize");
const serialize = require("../../../../../../base/serialize");
import { isValidPathParam } from "../../../../../../base/utility";

/**
 * Options to pass to each
 */
export interface PayloadListInstanceEachOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: PayloadInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface PayloadListInstanceOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface PayloadListInstancePageOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface PayloadContext {
  /**
   * Remove a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PayloadInstance
   */
  fetch(
    callback?: (error: Error | null, item?: PayloadInstance) => any
  ): Promise<PayloadInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface PayloadContextSolution {
  accountSid: string;
  referenceSid: string;
  addOnResultSid: string;
  sid: string;
}

export class PayloadContextImpl implements PayloadContext {
  protected _solution: PayloadContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V2010,
    accountSid: string,
    referenceSid: string,
    addOnResultSid: string,
    sid: string
  ) {
    if (!isValidPathParam(accountSid)) {
      throw new Error("Parameter 'accountSid' is not valid.");
    }

    if (!isValidPathParam(referenceSid)) {
      throw new Error("Parameter 'referenceSid' is not valid.");
    }

    if (!isValidPathParam(addOnResultSid)) {
      throw new Error("Parameter 'addOnResultSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { accountSid, referenceSid, addOnResultSid, sid };
    this._uri = `/Accounts/${accountSid}/Recordings/${referenceSid}/AddOnResults/${addOnResultSid}/Payloads/${sid}.json`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: PayloadInstance) => any
  ): Promise<PayloadInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PayloadInstance(
          operationVersion,
          payload,
          instance._solution.accountSid,
          instance._solution.referenceSid,
          instance._solution.addOnResultSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface PayloadPayload extends TwilioResponsePayload {
  payloads: PayloadResource[];
}

interface PayloadResource {
  sid: string;
  add_on_result_sid: string;
  account_sid: string;
  label: string;
  add_on_sid: string;
  add_on_configuration_sid: string;
  content_type: string;
  date_created: Date;
  date_updated: Date;
  reference_sid: string;
  subresource_uris: Record<string, string>;
}

export class PayloadInstance {
  protected _solution: PayloadContextSolution;
  protected _context?: PayloadContext;

  constructor(
    protected _version: V2010,
    payload: PayloadResource,
    accountSid: string,
    referenceSid: string,
    addOnResultSid: string,
    sid?: string
  ) {
    this.sid = payload.sid;
    this.addOnResultSid = payload.add_on_result_sid;
    this.accountSid = payload.account_sid;
    this.label = payload.label;
    this.addOnSid = payload.add_on_sid;
    this.addOnConfigurationSid = payload.add_on_configuration_sid;
    this.contentType = payload.content_type;
    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
    this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
    this.referenceSid = payload.reference_sid;
    this.subresourceUris = payload.subresource_uris;

    this._solution = {
      accountSid,
      referenceSid,
      addOnResultSid,
      sid: sid || this.sid,
    };
  }

  /**
   * The unique string that that we created to identify the Recording AddOnResult Payload resource.
   */
  sid: string;
  /**
   * The SID of the AddOnResult to which the payload belongs.
   */
  addOnResultSid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource.
   */
  accountSid: string;
  /**
   * The string provided by the vendor that describes the payload.
   */
  label: string;
  /**
   * The SID of the Add-on to which the result belongs.
   */
  addOnSid: string;
  /**
   * The SID of the Add-on configuration.
   */
  addOnConfigurationSid: string;
  /**
   * The MIME type of the payload.
   */
  contentType: string;
  /**
   * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateUpdated: Date;
  /**
   * The SID of the recording to which the AddOnResult resource that contains the payload belongs.
   */
  referenceSid: string;
  /**
   * A list of related resources identified by their relative URIs.
   */
  subresourceUris: Record<string, string>;

  private get _proxy(): PayloadContext {
    this._context =
      this._context ||
      new PayloadContextImpl(
        this._version,
        this._solution.accountSid,
        this._solution.referenceSid,
        this._solution.addOnResultSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Remove a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PayloadInstance
   */
  fetch(
    callback?: (error: Error | null, item?: PayloadInstance) => any
  ): Promise<PayloadInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      addOnResultSid: this.addOnResultSid,
      accountSid: this.accountSid,
      label: this.label,
      addOnSid: this.addOnSid,
      addOnConfigurationSid: this.addOnConfigurationSid,
      contentType: this.contentType,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      referenceSid: this.referenceSid,
      subresourceUris: this.subresourceUris,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface PayloadSolution {
  accountSid: string;
  referenceSid: string;
  addOnResultSid: string;
}

export interface PayloadListInstance {
  _version: V2010;
  _solution: PayloadSolution;
  _uri: string;

  (sid: string): PayloadContext;
  get(sid: string): PayloadContext;

  /**
   * Streams PayloadInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PayloadListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: PayloadInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: PayloadListInstanceEachOptions,
    callback?: (item: PayloadInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of PayloadInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: PayloadPage) => any
  ): Promise<PayloadPage>;
  /**
   * Lists PayloadInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PayloadListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: PayloadInstance[]) => any
  ): Promise<PayloadInstance[]>;
  list(
    params: PayloadListInstanceOptions,
    callback?: (error: Error | null, items: PayloadInstance[]) => any
  ): Promise<PayloadInstance[]>;
  /**
   * Retrieve a single page of PayloadInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PayloadListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: PayloadPage) => any
  ): Promise<PayloadPage>;
  page(
    params: PayloadListInstancePageOptions,
    callback?: (error: Error | null, items: PayloadPage) => any
  ): Promise<PayloadPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PayloadListInstance(
  version: V2010,
  accountSid: string,
  referenceSid: string,
  addOnResultSid: string
): PayloadListInstance {
  if (!isValidPathParam(accountSid)) {
    throw new Error("Parameter 'accountSid' is not valid.");
  }

  if (!isValidPathParam(referenceSid)) {
    throw new Error("Parameter 'referenceSid' is not valid.");
  }

  if (!isValidPathParam(addOnResultSid)) {
    throw new Error("Parameter 'addOnResultSid' is not valid.");
  }

  const instance = ((sid) => instance.get(sid)) as PayloadListInstance;

  instance.get = function get(sid): PayloadContext {
    return new PayloadContextImpl(
      version,
      accountSid,
      referenceSid,
      addOnResultSid,
      sid
    );
  };

  instance._version = version;
  instance._solution = { accountSid, referenceSid, addOnResultSid };
  instance._uri = `/Accounts/${accountSid}/Recordings/${referenceSid}/AddOnResults/${addOnResultSid}/Payloads.json`;

  instance.page = function page(
    params?:
      | PayloadListInstancePageOptions
      | ((error: Error | null, items: PayloadPage) => any),
    callback?: (error: Error | null, items: PayloadPage) => any
  ): Promise<PayloadPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PayloadPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: PayloadPage) => any
  ): Promise<PayloadPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new PayloadPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class PayloadPage extends Page<
  V2010,
  PayloadPayload,
  PayloadResource,
  PayloadInstance
> {
  /**
   * Initialize the PayloadPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V2010,
    response: Response<string>,
    solution: PayloadSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of PayloadInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: PayloadResource): PayloadInstance {
    return new PayloadInstance(
      this._version,
      payload,
      this._solution.accountSid,
      this._solution.referenceSid,
      this._solution.addOnResultSid
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
