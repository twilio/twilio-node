/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2010 from "../../../../V2010";
const deserialize = require("../../../../../../base/deserialize");
const serialize = require("../../../../../../base/serialize");
import { isValidPathParam } from "../../../../../../base/utility";
import { AuthTypeCallsListInstance } from "./authTypes/authTypeCalls";
import { AuthTypeRegistrationsListInstance } from "./authTypes/authTypeRegistrations";

export interface AuthTypesSolution {
  accountSid: string;
  domainSid: string;
}

export interface AuthTypesListInstance {
  _version: V2010;
  _solution: AuthTypesSolution;
  _uri: string;

  _calls?: AuthTypeCallsListInstance;
  calls: AuthTypeCallsListInstance;
  _registrations?: AuthTypeRegistrationsListInstance;
  registrations: AuthTypeRegistrationsListInstance;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function AuthTypesListInstance(
  version: V2010,
  accountSid: string,
  domainSid: string
): AuthTypesListInstance {
  if (!isValidPathParam(accountSid)) {
    throw new Error("Parameter 'accountSid' is not valid.");
  }

  if (!isValidPathParam(domainSid)) {
    throw new Error("Parameter 'domainSid' is not valid.");
  }

  const instance = {} as AuthTypesListInstance;

  instance._version = version;
  instance._solution = { accountSid, domainSid };
  instance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth.json`;

  Object.defineProperty(instance, "calls", {
    get: function calls() {
      if (!instance._calls) {
        instance._calls = AuthTypeCallsListInstance(
          instance._version,
          instance._solution.accountSid,
          instance._solution.domainSid
        );
      }
      return instance._calls;
    },
  });

  Object.defineProperty(instance, "registrations", {
    get: function registrations() {
      if (!instance._registrations) {
        instance._registrations = AuthTypeRegistrationsListInstance(
          instance._version,
          instance._solution.accountSid,
          instance._solution.domainSid
        );
      }
      return instance._registrations;
    },
  });

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
