/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import V2010 = require('../V2010');
import { AddressList } from './account/address';
import { ApplicationList } from './account/application';
import { AuthorizedConnectAppList } from './account/authorizedConnectApp';
import { AvailablePhoneNumberCountryList } from './account/availablePhoneNumber';
import { CallList } from './account/call';
import { ConferenceList } from './account/conference';
import { ConnectAppList } from './account/connectApp';
import { IncomingPhoneNumberList } from './account/incomingPhoneNumber';
import { KeyList } from './account/key';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { MessageList } from './account/message';
import { NewKeyList } from './account/newKey';
import { NewSigningKeyList } from './account/newSigningKey';
import { NotificationList } from './account/notification';
import { OutgoingCallerIdList } from './account/outgoingCallerId';
import { QueueList } from './account/queue';
import { RecordingList } from './account/recording';
import { SerializableClass } from '../../../interfaces';
import { ShortCodeList } from './account/shortCode';
import { SigningKeyList } from './account/signingKey';
import { SipList } from './account/sip';
import { TokenList } from './account/token';
import { TranscriptionList } from './account/transcription';
import { UsageList } from './account/usage';
import { ValidationRequestList } from './account/validationRequest';

/**
 * @description Initialize the AccountList
 *
 * @param version - Version of the resource
 */
declare function AccountList(version: V2010): AccountListInstance;

interface AccountResource {
  auth_token: string;
  date_created: Date;
  date_updated: Date;
  friendly_name: string;
  owner_account_sid: string;
  sid: string;
  status: AccountStatus;
  subresource_uris: string;
  type: AccountType;
  uri: string;
}

interface AccountPayload extends AccountResource, Page.TwilioResponsePayload {
}

interface AccountListInstance {
  /* jshint ignore:start */
  /**
   * create a AccountInstance
   *
   * @function create
   * @memberof Twilio.Api.V2010.AccountList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.friendlyName] -
   *          A human readable description of the account
   * @param {function} [callback] - Callback to handle processed record
   *
   * @returns {Promise} Resolves to processed AccountInstance
   */
  /* jshint ignore:end */
  AccountListInstance.create = function create(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});

    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new AccountInstance(this._version, payload, this._solution.sid));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Streams AccountInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Api.V2010.AccountList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.friendlyName] - FriendlyName to filter on
   * @param {account.status} [opts.status] - Status to filter on
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  AccountListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single target page of AccountInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Api.V2010.AccountList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  AccountListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new AccountPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * @description Lists AccountInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Api.V2010.AccountList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.friendlyName] - FriendlyName to filter on
   * @param {account.status} [opts.status] - Status to filter on
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  AccountListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };
  /* jshint ignore:start */
  /**
   * Retrieve a single page of AccountInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Api.V2010.AccountList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.friendlyName] - FriendlyName to filter on
   * @param {account.status} [opts.status] - Status to filter on
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  AccountListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'FriendlyName': _.get(opts, 'friendlyName'),
      'Status': _.get(opts, 'status'),
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new AccountPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };
}

/**
 * Options to pass to update
 *
 * @property friendlyName - FriendlyName to update
 * @property status - Status to update the Account with
 */
export interface UpdateOptions {
  friendlyName?: string;
  status?: account.status;
}

/**
 * Options to pass to update
 *
 * @property friendlyName - FriendlyName to update
 * @property status - Status to update the Account with
 */
export interface UpdateOptions {
  friendlyName?: string;
  status?: account.status;
}


declare class AccountPage extends Page {
  /**
   * @constructor Twilio.Api.V2010.AccountPage
   * @augments Page
   * @description Initialize the AccountPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Twilio.Api.V2010, response: object, solution: object);

  /**
   * Build an instance of AccountInstance
   *
   * @function getInstance
   * @memberof Twilio.Api.V2010.AccountPage
   * @instance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: object);
}


declare class AccountInstance {
  /**
   * @constructor Twilio.Api.V2010.AccountInstance
   * @description Initialize the AccountContext
   *
   * @property authToken - The authorization token for this account
   * @property dateCreated - The date this account was created
   * @property dateUpdated - The date this account was last updated
   * @property friendlyName - A human readable description of this account
   * @property ownerAccountSid - The unique 34 character id representing the parent of this account
   * @property sid - A 34 character string that uniquely identifies this resource.
   * @property status - The status of this account
   * @property subresourceUris - Account Instance Subresources
   * @property type - The type of this account
   * @property uri - The URI for this resource, relative to `https://api.twilio.com`
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - Fetch by unique Account Sid
   */
  constructor(version: Twilio.Api.V2010, payload: object, sid: sid);

  _proxy?: AccountContext;
  /**
   * Access the addresses
   *
   * @function addresses
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  addresses();
  /**
   * Access the applications
   *
   * @function applications
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  applications();
  /**
   * Access the authorizedConnectApps
   *
   * @function authorizedConnectApps
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  authorizedConnectApps();
  /**
   * Access the availablePhoneNumbers
   *
   * @function availablePhoneNumbers
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  availablePhoneNumbers();
  /**
   * Access the calls
   *
   * @function calls
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  calls();
  /**
   * Access the conferences
   *
   * @function conferences
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  conferences();
  /**
   * Access the connectApps
   *
   * @function connectApps
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  connectApps();
  /**
   * fetch a AccountInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  /**
   * Access the incomingPhoneNumbers
   *
   * @function incomingPhoneNumbers
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  incomingPhoneNumbers();
  /**
   * Access the keys
   *
   * @function keys
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  keys();
  /**
   * Access the messages
   *
   * @function messages
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  messages();
  /**
   * Access the newKeys
   *
   * @function newKeys
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  newKeys();
  /**
   * Access the newSigningKeys
   *
   * @function newSigningKeys
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  newSigningKeys();
  /**
   * Access the notifications
   *
   * @function notifications
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  notifications();
  /**
   * Access the outgoingCallerIds
   *
   * @function outgoingCallerIds
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  outgoingCallerIds();
  /**
   * Access the queues
   *
   * @function queues
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  queues();
  /**
   * Access the recordings
   *
   * @function recordings
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  recordings();
  /**
   * Access the shortCodes
   *
   * @function shortCodes
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  shortCodes();
  /**
   * Access the signingKeys
   *
   * @function signingKeys
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  signingKeys();
  /**
   * Access the sip
   *
   * @function sip
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  sip();
  /**
   * Produce a plain JSON object version of the AccountInstance for serialization.
   * Removes any circular references in the object.
   *
   * @function toJSON
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  toJSON();
  /**
   * Access the tokens
   *
   * @function tokens
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  tokens();
  /**
   * Access the transcriptions
   *
   * @function transcriptions
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  transcriptions();
  /**
   * update a AccountInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
  /**
   * Access the usage
   *
   * @function usage
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  usage();
  /**
   * Access the validationRequests
   *
   * @function validationRequests
   * @memberof Twilio.Api.V2010.AccountInstance
   * @instance
   */
  validationRequests();
}


declare class AccountContext {
  /**
   * @constructor Twilio.Api.V2010.AccountContext
   * @description Initialize the AccountContext
   *
   * @property addresses - addresses resource
   * @property applications - applications resource
   * @property authorizedConnectApps - authorizedConnectApps resource
   * @property availablePhoneNumbers - availablePhoneNumbers resource
   * @property calls - calls resource
   * @property conferences - conferences resource
   * @property connectApps - connectApps resource
   * @property incomingPhoneNumbers - incomingPhoneNumbers resource
   * @property keys - keys resource
   * @property messages - messages resource
   * @property newKeys - newKeys resource
   * @property newSigningKeys - newSigningKeys resource
   * @property notifications - notifications resource
   * @property outgoingCallerIds - outgoingCallerIds resource
   * @property queues - queues resource
   * @property recordings - recordings resource
   * @property signingKeys - signingKeys resource
   * @property sip - sip resource
   * @property shortCodes - shortCodes resource
   * @property tokens - tokens resource
   * @property transcriptions - transcriptions resource
   * @property usage - usage resource
   * @property validationRequests - validationRequests resource
   *
   * @param version - Version of the resource
   * @param sid - Fetch by unique Account Sid
   */
  constructor(version: Twilio.Api.V2010, sid: sid);

  addresses?: Twilio.Api.V2010.AccountContext.AddressList;
  applications?: Twilio.Api.V2010.AccountContext.ApplicationList;
  authorizedConnectApps?: Twilio.Api.V2010.AccountContext.AuthorizedConnectAppList;
  availablePhoneNumbers?: Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList;
  calls?: Twilio.Api.V2010.AccountContext.CallList;
  conferences?: Twilio.Api.V2010.AccountContext.ConferenceList;
  connectApps?: Twilio.Api.V2010.AccountContext.ConnectAppList;
  /**
   * fetch a AccountInstance
   *
   * @function fetch
   * @memberof Twilio.Api.V2010.AccountContext
   * @instance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: function);
  incomingPhoneNumbers?: Twilio.Api.V2010.AccountContext.IncomingPhoneNumberList;
  keys?: Twilio.Api.V2010.AccountContext.KeyList;
  messages?: Twilio.Api.V2010.AccountContext.MessageList;
  newKeys?: Twilio.Api.V2010.AccountContext.NewKeyList;
  newSigningKeys?: Twilio.Api.V2010.AccountContext.NewSigningKeyList;
  notifications?: Twilio.Api.V2010.AccountContext.NotificationList;
  outgoingCallerIds?: Twilio.Api.V2010.AccountContext.OutgoingCallerIdList;
  queues?: Twilio.Api.V2010.AccountContext.QueueList;
  recordings?: Twilio.Api.V2010.AccountContext.RecordingList;
  shortCodes?: Twilio.Api.V2010.AccountContext.ShortCodeList;
  signingKeys?: Twilio.Api.V2010.AccountContext.SigningKeyList;
  sip?: Twilio.Api.V2010.AccountContext.SipList;
  tokens?: Twilio.Api.V2010.AccountContext.TokenList;
  transcriptions?: Twilio.Api.V2010.AccountContext.TranscriptionList;
  /**
   * update a AccountInstance
   *
   * @function update
   * @memberof Twilio.Api.V2010.AccountContext
   * @instance
   *
   * @param opts - ...
   * @param callback - Callback to handle processed record
   */
  update(opts?: object, callback?: function);
  usage?: Twilio.Api.V2010.AccountContext.UsageList;
  validationRequests?: Twilio.Api.V2010.AccountContext.ValidationRequestList;
}

export { AccountContext, AccountInstance, AccountList, AccountListInstance, AccountPage, AccountPayload, AccountResource }
