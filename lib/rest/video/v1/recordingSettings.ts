/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to create a RecordingSettingsInstance
 */
export interface RecordingSettingsContextCreateOptions {
  /** A descriptive string that you create to describe the resource and be shown to users in the console */
  friendlyName: string;
  /** The SID of the stored Credential resource. */
  awsCredentialsSid?: string;
  /** The SID of the Public Key resource to use for encryption. */
  encryptionKeySid?: string;
  /** The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the <a href=\\\'https://tools.ietf.org/html/rfc3986#section-2\\\'>RFC 3986</a>. */
  awsS3Url?: string;
  /** Whether all recordings should be written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud. */
  awsStorageEnabled?: boolean;
  /** Whether all recordings should be stored in an encrypted form. The default is `false`. */
  encryptionEnabled?: boolean;
}

export interface RecordingSettingsContext {
  /**
   * Create a RecordingSettingsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed RecordingSettingsInstance
   */
  create(
    params: RecordingSettingsContextCreateOptions,
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance>;

  /**
   * Fetch a RecordingSettingsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed RecordingSettingsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface RecordingSettingsContextSolution {}

export class RecordingSettingsContextImpl implements RecordingSettingsContext {
  protected _solution: RecordingSettingsContextSolution;
  protected _uri: string;

  constructor(protected _version: V1) {
    this._solution = {};
    this._uri = `/RecordingSettings/Default`;
  }

  create(
    params: RecordingSettingsContextCreateOptions,
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (
      params["friendlyName"] === null ||
      params["friendlyName"] === undefined
    ) {
      throw new Error("Required parameter \"params['friendlyName']\" missing.");
    }

    let data: any = {};

    data["FriendlyName"] = params["friendlyName"];
    if (params["awsCredentialsSid"] !== undefined)
      data["AwsCredentialsSid"] = params["awsCredentialsSid"];
    if (params["encryptionKeySid"] !== undefined)
      data["EncryptionKeySid"] = params["encryptionKeySid"];
    if (params["awsS3Url"] !== undefined) data["AwsS3Url"] = params["awsS3Url"];
    if (params["awsStorageEnabled"] !== undefined)
      data["AwsStorageEnabled"] = serialize.bool(params["awsStorageEnabled"]);
    if (params["encryptionEnabled"] !== undefined)
      data["EncryptionEnabled"] = serialize.bool(params["encryptionEnabled"]);

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new RecordingSettingsInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) => new RecordingSettingsInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface RecordingSettingsPayload extends RecordingSettingsResource {}

interface RecordingSettingsResource {
  account_sid: string;
  friendly_name: string;
  aws_credentials_sid: string;
  aws_s3_url: string;
  aws_storage_enabled: boolean;
  encryption_key_sid: string;
  encryption_enabled: boolean;
  url: string;
}

export class RecordingSettingsInstance {
  protected _solution: RecordingSettingsContextSolution;
  protected _context?: RecordingSettingsContext;

  constructor(protected _version: V1, payload: RecordingSettingsResource) {
    this.accountSid = payload.account_sid;
    this.friendlyName = payload.friendly_name;
    this.awsCredentialsSid = payload.aws_credentials_sid;
    this.awsS3Url = payload.aws_s3_url;
    this.awsStorageEnabled = payload.aws_storage_enabled;
    this.encryptionKeySid = payload.encryption_key_sid;
    this.encryptionEnabled = payload.encryption_enabled;
    this.url = payload.url;

    this._solution = {};
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RecordingSettings resource.
   */
  accountSid: string;
  /**
   * The string that you assigned to describe the resource and show the user in the console
   */
  friendlyName: string;
  /**
   * The SID of the stored Credential resource.
   */
  awsCredentialsSid: string;
  /**
   * The URL of the AWS S3 bucket where the recordings are stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the <a href=\'https://tools.ietf.org/html/rfc3986#section-2\'>RFC 3986</a>.
   */
  awsS3Url: string;
  /**
   * Whether all recordings are written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud.
   */
  awsStorageEnabled: boolean;
  /**
   * The SID of the Public Key resource used for encryption.
   */
  encryptionKeySid: string;
  /**
   * Whether all recordings are stored in an encrypted form. The default is `false`.
   */
  encryptionEnabled: boolean;
  /**
   * The absolute URL of the resource.
   */
  url: string;

  private get _proxy(): RecordingSettingsContext {
    this._context =
      this._context || new RecordingSettingsContextImpl(this._version);
    return this._context;
  }

  /**
   * Create a RecordingSettingsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed RecordingSettingsInstance
   */
  create(
    params: RecordingSettingsContextCreateOptions,
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance>;

  create(
    params?: any,
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance> {
    return this._proxy.create(params, callback);
  }

  /**
   * Fetch a RecordingSettingsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed RecordingSettingsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: RecordingSettingsInstance) => any
  ): Promise<RecordingSettingsInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      friendlyName: this.friendlyName,
      awsCredentialsSid: this.awsCredentialsSid,
      awsS3Url: this.awsS3Url,
      awsStorageEnabled: this.awsStorageEnabled,
      encryptionKeySid: this.encryptionKeySid,
      encryptionEnabled: this.encryptionEnabled,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface RecordingSettingsSolution {}

export interface RecordingSettingsListInstance {
  _version: V1;
  _solution: RecordingSettingsSolution;
  _uri: string;

  (): RecordingSettingsContext;
  get(): RecordingSettingsContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function RecordingSettingsListInstance(
  version: V1
): RecordingSettingsListInstance {
  const instance = (() => instance.get()) as RecordingSettingsListInstance;

  instance.get = function get(): RecordingSettingsContext {
    return new RecordingSettingsContextImpl(version);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
