/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");




/**
 * Options to pass to create a RecordingSettingsInstance
 *
 * @property { string } friendlyName A descriptive string that you create to describe the resource and be shown to users in the console
 * @property { string } [awsCredentialsSid] The SID of the stored Credential resource.
 * @property { string } [encryptionKeySid] The SID of the Public Key resource to use for encryption.
 * @property { string } [awsS3Url] The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like &#x60;https://documentation-example-twilio-bucket/recordings&#x60;, where &#x60;recordings&#x60; is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the &lt;a href&#x3D;\\\&#39;https://tools.ietf.org/html/rfc3986#section-2\\\&#39;&gt;RFC 3986&lt;/a&gt;.
 * @property { boolean } [awsStorageEnabled] Whether all recordings should be written to the &#x60;aws_s3_url&#x60;. When &#x60;false&#x60;, all recordings are stored in our cloud.
 * @property { boolean } [encryptionEnabled] Whether all recordings should be stored in an encrypted form. The default is &#x60;false&#x60;.
 */
export interface RecordingSettingsContextCreateOptions {
  'friendlyName': string;
  'awsCredentialsSid'?: string;
  'encryptionKeySid'?: string;
  'awsS3Url'?: string;
  'awsStorageEnabled'?: boolean;
  'encryptionEnabled'?: boolean;
}

export interface RecordingSettingsContext {


  /**
   * Create a RecordingSettingsInstance
   *
   * @param { RecordingSettingsContextCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingSettingsInstance
   */
  create(params: RecordingSettingsContextCreateOptions, callback?: (error: Error | null, item?: RecordingSettingsInstance) => any): Promise<RecordingSettingsInstance>;
  create(params: any, callback?: any): Promise<RecordingSettingsInstance>


  /**
   * Fetch a RecordingSettingsInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingSettingsInstance
   */
  fetch(callback?: (error: Error | null, item?: RecordingSettingsInstance) => any): Promise<RecordingSettingsInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface RecordingSettingsContextSolution {
}

export class RecordingSettingsContextImpl implements RecordingSettingsContext {
  protected _solution: RecordingSettingsContextSolution;
  protected _uri: string;


  constructor(protected _version: V1) {
    this._solution = {  };
    this._uri = `/RecordingSettings/Default`;
  }

  create(params: any, callback?: any): Promise<RecordingSettingsInstance> {
      if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params['friendlyName'] === null || params['friendlyName'] === undefined) {
      throw new Error('Required parameter "params[\'friendlyName\']" missing.');
    }

    const data: any = {};

    data['FriendlyName'] = params['friendlyName'];
    if (params['awsCredentialsSid'] !== undefined) data['AwsCredentialsSid'] = params['awsCredentialsSid'];
    if (params['encryptionKeySid'] !== undefined) data['EncryptionKeySid'] = params['encryptionKeySid'];
    if (params['awsS3Url'] !== undefined) data['AwsS3Url'] = params['awsS3Url'];
    if (params['awsStorageEnabled'] !== undefined) data['AwsStorageEnabled'] = serialize.bool(params['awsStorageEnabled']);
    if (params['encryptionEnabled'] !== undefined) data['EncryptionEnabled'] = serialize.bool(params['encryptionEnabled']);

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = this._version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post', data, headers });
    
    operationPromise = operationPromise.then(payload => new RecordingSettingsInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


  }

  fetch(callback?: any): Promise<RecordingSettingsInstance> {
  
    let operationVersion = this._version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new RecordingSettingsInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface RecordingSettingsPayload extends RecordingSettingsResource{
}

interface RecordingSettingsResource {
  account_sid?: string | null;
  friendly_name?: string | null;
  aws_credentials_sid?: string | null;
  aws_s3_url?: string | null;
  aws_storage_enabled?: boolean | null;
  encryption_key_sid?: string | null;
  encryption_enabled?: boolean | null;
  url?: string | null;
}

export class RecordingSettingsInstance {
  protected _solution: RecordingSettingsContextSolution;
  protected _context?: RecordingSettingsContext;

  constructor(protected _version: V1, payload: RecordingSettingsPayload) {
    this.accountSid = payload.account_sid;
    this.friendlyName = payload.friendly_name;
    this.awsCredentialsSid = payload.aws_credentials_sid;
    this.awsS3Url = payload.aws_s3_url;
    this.awsStorageEnabled = payload.aws_storage_enabled;
    this.encryptionKeySid = payload.encryption_key_sid;
    this.encryptionEnabled = payload.encryption_enabled;
    this.url = payload.url;

    this._solution = {  };
  }

  /**
   * The SID of the Account that created the resource
   */
  accountSid?: string | null;
  /**
   * The string that you assigned to describe the resource
   */
  friendlyName?: string | null;
  /**
   * The SID of the stored Credential resource
   */
  awsCredentialsSid?: string | null;
  /**
   * The URL of the AWS S3 bucket where the recordings are stored
   */
  awsS3Url?: string | null;
  /**
   * Whether all recordings are written to the aws_s3_url
   */
  awsStorageEnabled?: boolean | null;
  /**
   * The SID of the Public Key resource used for encryption
   */
  encryptionKeySid?: string | null;
  /**
   * Whether all recordings are stored in an encrypted form
   */
  encryptionEnabled?: boolean | null;
  /**
   * The absolute URL of the resource
   */
  url?: string | null;

  private get _proxy(): RecordingSettingsContext {
    this._context = this._context || new RecordingSettingsContextImpl(this._version);
    return this._context;
  }

  /**
   * Create a RecordingSettingsInstance
   *
   * @param { RecordingSettingsContextCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingSettingsInstance
   */
  create(params: RecordingSettingsContextCreateOptions, callback?: (error: Error | null, item?: RecordingSettingsInstance) => any): Promise<RecordingSettingsInstance>;
  create(params: any, callback?: any): Promise<RecordingSettingsInstance>
     {
    return this._proxy.create(params, callback);
  }

  /**
   * Fetch a RecordingSettingsInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingSettingsInstance
   */
  fetch(callback?: (error: Error | null, item?: RecordingSettingsInstance) => any): Promise<RecordingSettingsInstance>
     {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid, 
      friendlyName: this.friendlyName, 
      awsCredentialsSid: this.awsCredentialsSid, 
      awsS3Url: this.awsS3Url, 
      awsStorageEnabled: this.awsStorageEnabled, 
      encryptionKeySid: this.encryptionKeySid, 
      encryptionEnabled: this.encryptionEnabled, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


export interface RecordingSettingsListInstance {
  (): RecordingSettingsContext;
  get(): RecordingSettingsContext;


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface Solution {
}

interface RecordingSettingsListInstanceImpl extends RecordingSettingsListInstance {}
class RecordingSettingsListInstanceImpl implements RecordingSettingsListInstance {
  _version?: V1;
  _solution?: Solution;
  _uri?: string;

}

export function RecordingSettingsListInstance(version: V1): RecordingSettingsListInstance {
  const instance = (() => instance.get()) as RecordingSettingsListInstanceImpl;

  instance.get = function get(): RecordingSettingsContext {
    return new RecordingSettingsContextImpl(version);
  }

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/RecordingSettings/Default`;

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}



