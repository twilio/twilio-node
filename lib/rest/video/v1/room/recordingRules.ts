/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../../base/Page";
import Response from "../../../../http/response";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");


/**
 * Options to pass to create a RecordingRulesInstance
 *
 * @property { any } [rules] A JSON-encoded array of recording rules.
 */
export interface RecordingRulesListInstanceCreateOptions {
  rules?: any;
}

export interface RecordingRulesListInstance {



  /**
   * Streams RecordingRulesInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Function to process each record
   */
  each(callback?: (item: RecordingRulesInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams RecordingRulesInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { RecordingRulesListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(params?: RecordingRulesListInstanceEachOptions, callback?: (item: RecordingRulesInstance, done: (err?: Error) => void) => void): void;
  each(params?: any, callback?: any): void;
  /**
   * Retrieve a single target page of RecordingRulesInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: RecordingRulesPage) => any): Promise<RecordingRulesPage>;
  /**
   * Retrieve a single target page of RecordingRulesInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: RecordingRulesPage) => any): Promise<RecordingRulesPage>;
  getPage(params?: any, callback?: any): Promise<RecordingRulesPage>;
  /**
   * Lists RecordingRulesInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: RecordingRulesInstance[]) => any): Promise<RecordingRulesInstance[]>;
  /**
   * Lists RecordingRulesInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { RecordingRulesListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(params?: RecordingRulesListInstanceOptions, callback?: (error: Error | null, items: RecordingRulesInstance[]) => any): Promise<RecordingRulesInstance[]>;
  list(params?: any, callback?: any): Promise<RecordingRulesInstance[]>;
  /**
   * Retrieve a single page of RecordingRulesInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { function } [callback] - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: RecordingRulesPage) => any): Promise<RecordingRulesPage>;
  /**
   * Retrieve a single page of RecordingRulesInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { RecordingRulesListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(params: RecordingRulesListInstancePageOptions, callback?: (error: Error | null, items: RecordingRulesPage) => any): Promise<RecordingRulesPage>;
  page(params?: any, callback?: any): Promise<RecordingRulesPage>;

  /**
   * Create a RecordingRulesInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingRulesInstance
   */
  create(callback?: (error: Error | null, item?: RecordingRulesInstance) => any): Promise<RecordingRulesInstance>;
  /**
   * Create a RecordingRulesInstance
   *
   * @param { RecordingRulesListInstanceCreateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed RecordingRulesInstance
   */
  create(params: RecordingRulesListInstanceCreateOptions, callback?: (error: Error | null, item?: RecordingRulesInstance) => any): Promise<RecordingRulesInstance>;
  create(params?: any, callback?: any): Promise<RecordingRulesInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

interface RecordingRulesListInstanceImpl extends RecordingRulesListInstance {}
class RecordingRulesListInstanceImpl implements RecordingRulesListInstance {
  _version?: V1;
  _solution?: RecordingRulesSolution;
  _uri?: string;

}

export function RecordingRulesListInstance(version: V1, roomSid: string): RecordingRulesListInstance {
  const instance = {} as RecordingRulesListInstanceImpl;

  instance._version = version;
  instance._solution = { roomSid };
  instance._uri = `/Rooms/${roomSid}/RecordingRules`;

  instance.page = function page(callback?: any): Promise<RecordingRulesPage> {

    let operationVersion = version,
        operationPromise = operationVersion.page({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new RecordingRulesPage(operationVersion, payload, this._solution));

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;

  }
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(targetUrl?: any, callback?: any): Promise<RecordingRulesPage> {
    let operationPromise = this._version._domain.twilio.request({method: 'get', uri: targetUrl});

    operationPromise = operationPromise.then(payload => new RecordingRulesPage(this._version, payload, this._solution));
    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;
  }



  instance.create = function create(params?: any, callback?: any): Promise<RecordingRulesInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params.rules !== undefined) data['Rules'] = params.rules;

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post', params: data, headers });
    
    operationPromise = operationPromise.then(payload => new RecordingRulesInstance(operationVersion, payload, this._solution.roomSid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;



    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface RecordingRulesPayload extends RecordingRulesResource, Page.TwilioResponsePayload {
}

interface RecordingRulesResource {
  room_sid?: string | null;
  rules?: Array<object> | null;
  date_created?: Date | null;
  date_updated?: Date | null;
}

export class RecordingRulesInstance {
  protected _solution: RecordingRulesSolution;
  protected _context?: RecordingRulesListInstance;

  constructor(protected _version: V1, payload: RecordingRulesPayload, roomSid?: string) {
    this.roomSid = payload.room_sid;
    this.rules = payload.rules;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);

    this._solution = { roomSid: roomSid || this.roomSid };
  }

  /**
   * The SID of the Room resource for the Recording Rules
   */
  roomSid?: string | null;
  /**
   * A collection of recording Rules that describe how to include or exclude matching tracks for recording
   */
  rules?: Array<object> | null;
  /**
   * The ISO 8601 date and time in GMT when the resource was created
   */
  dateCreated?: Date | null;
  /**
   * The ISO 8601 date and time in GMT when the resource was last updated
   */
  dateUpdated?: Date | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      roomSid: this.roomSid, 
      rules: this.rules, 
      dateCreated: this.dateCreated, 
      dateUpdated: this.dateUpdated
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
export interface RecordingRulesSolution {
  roomSid?: string;
}

export class RecordingRulesPage extends Page<V1, RecordingRulesPayload, RecordingRulesResource, RecordingRulesInstance> {
  /**
   * Initialize the RecordingRulesPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: RecordingRulesSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of RecordingRulesInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: RecordingRulesPayload): RecordingRulesInstance {
    return new RecordingRulesInstance(
      this._version,
      payload,
      this._solution.roomSid,
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

