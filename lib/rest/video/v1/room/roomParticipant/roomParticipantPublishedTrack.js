'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var Page = require('../../../../../base/Page');  /* jshint ignore:line */
var deserialize = require(
    '../../../../../base/deserialize');  /* jshint ignore:line */
var values = require('../../../../../base/values');  /* jshint ignore:line */

var PublishedTrackList;
var PublishedTrackPage;
var PublishedTrackInstance;
var PublishedTrackContext;

/* jshint ignore:start */
/**
 * @description Initialize the PublishedTrackList
 *
 * @param {Twilio.Video.V1} version - Version of the resource
 * @param {string} roomSid - Unique Room identifier where this Track is published.
 * @param {string} participantSid -
 *          Unique Participant identifier that publishes this Track.
 */
/* jshint ignore:end */
PublishedTrackList = function PublishedTrackList(version, roomSid,
                                                  participantSid) {
  /* jshint ignore:start */
  /**
   * @function publishedTracks
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext
   * @instance
   *
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext}
   */
  /* jshint ignore:end */
  function PublishedTrackListInstance(sid) {
    return PublishedTrackListInstance.get(sid);
  }

  PublishedTrackListInstance._version = version;
  // Path Solution
  PublishedTrackListInstance._solution = {roomSid: roomSid, participantSid: participantSid};
  PublishedTrackListInstance._uri = _.template(
    '/Rooms/<%= roomSid %>/Participants/<%= participantSid %>/PublishedTracks' // jshint ignore:line
  )(PublishedTrackListInstance._solution);
  /* jshint ignore:start */
  /**
   * Streams PublishedTrackInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function each
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  PublishedTrackListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };

  /* jshint ignore:start */
  /**
   * @description Lists PublishedTrackInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function list
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  PublishedTrackListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };

  /* jshint ignore:start */
  /**
   * Retrieve a single page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function page
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList
   * @instance
   *
   * @param {object} [opts] - ...
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  PublishedTrackListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});

    promise = promise.then(function(payload) {
      deferred.resolve(new PublishedTrackPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };

  /* jshint ignore:start */
  /**
   * Retrieve a single target page of PublishedTrackInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @function getPage
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList
   * @instance
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  PublishedTrackListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new PublishedTrackPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };

  /* jshint ignore:start */
  /**
   * Constructs a published_track
   *
   * @function get
   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList
   * @instance
   *
   * @param {string} sid -
   *          A 34 character string that uniquely identifies this resource.
   *
   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext}
   */
  /* jshint ignore:end */
  PublishedTrackListInstance.get = function get(sid) {
    return new PublishedTrackContext(
      this._version,
      this._solution.roomSid,
      this._solution.participantSid,
      sid
    );
  };

  return PublishedTrackListInstance;
};


/* jshint ignore:start */
/**
 * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage
 * @augments Page
 * @description Initialize the PublishedTrackPage
 *
 * @param {Twilio.Video.V1} version - Version of the resource
 * @param {object} response - Response from the API
 * @param {object} solution - Path solution
 *
 * @returns PublishedTrackPage
 */
/* jshint ignore:end */
PublishedTrackPage = function PublishedTrackPage(version, response, solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(PublishedTrackPage.prototype, Page.prototype);
PublishedTrackPage.prototype.constructor = PublishedTrackPage;

/* jshint ignore:start */
/**
 * Build an instance of PublishedTrackInstance
 *
 * @function getInstance
 * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage
 * @instance
 *
 * @param {object} payload - Payload response from the API
 *
 * @returns PublishedTrackInstance
 */
/* jshint ignore:end */
PublishedTrackPage.prototype.getInstance = function getInstance(payload) {
  return new PublishedTrackInstance(
    this._version,
    payload,
    this._solution.roomSid,
    this._solution.participantSid
  );
};


/* jshint ignore:start */
/**
 * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance
 * @description Initialize the PublishedTrackContext
 *
 * @property {string} sid -
 *          A 34 character string that uniquely identifies this resource.
 * @property {string} participantSid -
 *          Unique Participant identifier that publishes this Track.
 * @property {string} roomSid -
 *          Unique Room identifier where this Track is published.
 * @property {string} name - Track name. Limited to 128 characters.
 * @property {Date} dateCreated - The date that this resource was created.
 * @property {Date} dateUpdated - The date that this resource was last updated.
 * @property {boolean} enabled - Specifies whether the Track is enabled or not.
 * @property {published_track.kind} kind -
 *          Specifies whether Track represents `audio`, `video` or `data`
 * @property {string} url - The absolute URL for this resource.
 *
 * @param {Twilio.Video.V1} version - Version of the resource
 * @param {object} payload - The instance payload
 * @param {sid} roomSid - Unique Room identifier where this Track is published.
 * @param {sid} participantSid -
 *          Unique Participant identifier that publishes this Track.
 * @param {sid_like} sid -
 *          A 34 character string that uniquely identifies this resource.
 */
/* jshint ignore:end */
PublishedTrackInstance = function PublishedTrackInstance(version, payload,
                                                          roomSid,
                                                          participantSid, sid) {
  this._version = version;

  // Marshaled Properties
  this.sid = payload.sid; // jshint ignore:line
  this.participantSid = payload.participant_sid; // jshint ignore:line
  this.roomSid = payload.room_sid; // jshint ignore:line
  this.name = payload.name; // jshint ignore:line
  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line
  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line
  this.enabled = payload.enabled; // jshint ignore:line
  this.kind = payload.kind; // jshint ignore:line
  this.url = payload.url; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {roomSid: roomSid, participantSid: participantSid, sid: sid || this.sid, };
};

Object.defineProperty(PublishedTrackInstance.prototype,
  '_proxy', {
  get: function() {
    if (!this._context) {
      this._context = new PublishedTrackContext(
        this._version,
        this._solution.roomSid,
        this._solution.participantSid,
        this._solution.sid
      );
    }

    return this._context;
  }
});

/* jshint ignore:start */
/**
 * fetch a PublishedTrackInstance
 *
 * @function fetch
 * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance
 * @instance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed PublishedTrackInstance
 */
/* jshint ignore:end */
PublishedTrackInstance.prototype.fetch = function fetch(callback) {
  return this._proxy.fetch(callback);
};

/* jshint ignore:start */
/**
 * Produce a plain JSON object version of the PublishedTrackInstance for serialization.
 * Removes any circular references in the object.
 *
 * @function toJSON
 * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance
 * @instance
 *
 * @returns Object
 */
/* jshint ignore:end */
PublishedTrackInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};


/* jshint ignore:start */
/**
 * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext
 * @description Initialize the PublishedTrackContext
 *
 * @param {Twilio.Video.V1} version - Version of the resource
 * @param {sid_like} roomSid -
 *          Unique Room identifier where this Track is published.
 * @param {sid_like} participantSid -
 *          Unique Participant identifier that publishes this Track.
 * @param {sid_like} sid -
 *          A 34 character string that uniquely identifies this resource.
 */
/* jshint ignore:end */
PublishedTrackContext = function PublishedTrackContext(version, roomSid,
                                                        participantSid, sid) {
  this._version = version;

  // Path Solution
  this._solution = {roomSid: roomSid, participantSid: participantSid, sid: sid, };
  this._uri = _.template(
    '/Rooms/<%= roomSid %>/Participants/<%= participantSid %>/PublishedTracks/<%= sid %>' // jshint ignore:line
  )(this._solution);
};

/* jshint ignore:start */
/**
 * fetch a PublishedTrackInstance
 *
 * @function fetch
 * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext
 * @instance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed PublishedTrackInstance
 */
/* jshint ignore:end */
PublishedTrackContext.prototype.fetch = function fetch(callback) {
  var deferred = Q.defer();
  var promise = this._version.fetch({uri: this._uri, method: 'GET'});

  promise = promise.then(function(payload) {
    deferred.resolve(new PublishedTrackInstance(
      this._version,
      payload,
      this._solution.roomSid,
      this._solution.participantSid,
      this._solution.sid
    ));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

module.exports = {
  PublishedTrackList: PublishedTrackList,
  PublishedTrackPage: PublishedTrackPage,
  PublishedTrackInstance: PublishedTrackInstance,
  PublishedTrackContext: PublishedTrackContext
};
