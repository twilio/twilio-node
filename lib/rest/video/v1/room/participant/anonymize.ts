/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page from "../../../../../base/Page";
import Response from "../../../../../http/response";
import V1 from "../../../V1";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");

type RoomParticipantAnonymizeStatus = 'connected'|'disconnected';


export interface AnonymizeListInstance {


  /**
   * Create a AnonymizeInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed AnonymizeInstance
   */
  create(callback?: (error: Error | null, item?: AnonymizeInstance) => any): Promise<AnonymizeInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

interface AnonymizeListInstanceImpl extends AnonymizeListInstance {}
class AnonymizeListInstanceImpl implements AnonymizeListInstance {
  _version?: V1;
  _solution?: AnonymizeSolution;
  _uri?: string;

}

export function AnonymizeListInstance(version: V1, roomSid: string, sid: string): AnonymizeListInstance {
  const instance = {} as AnonymizeListInstanceImpl;

  instance._version = version;
  instance._solution = { roomSid, sid };
  instance._uri = `/Rooms/${roomSid}/Participants/${sid}/Anonymize`;

  instance.create = function create(callback?: any): Promise<AnonymizeInstance> {

    let operationVersion = version,
        operationPromise = operationVersion.create({ uri: this._uri, method: 'post' });
    
    operationPromise = operationPromise.then(payload => new AnonymizeInstance(operationVersion, payload, this._solution.roomSid, this._solution.sid));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;



    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface AnonymizePayload extends AnonymizeResource, Page.TwilioResponsePayload {
}

interface AnonymizeResource {
  sid?: string | null;
  room_sid?: string | null;
  account_sid?: string | null;
  status?: RoomParticipantAnonymizeStatus;
  identity?: string | null;
  date_created?: Date | null;
  date_updated?: Date | null;
  start_time?: Date | null;
  end_time?: Date | null;
  duration?: number | null;
  url?: string | null;
}

export class AnonymizeInstance {
  protected _solution: AnonymizeSolution;
  protected _context?: AnonymizeListInstance;

  constructor(protected _version: V1, payload: AnonymizePayload, roomSid: string, sid?: string) {
    this.sid = payload.sid;
    this.roomSid = payload.room_sid;
    this.accountSid = payload.account_sid;
    this.status = payload.status;
    this.identity = payload.identity;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.startTime = deserialize.iso8601DateTime(payload.start_time);
    this.endTime = deserialize.iso8601DateTime(payload.end_time);
    this.duration = deserialize.integer(payload.duration);
    this.url = payload.url;

    this._solution = { roomSid, sid: sid || this.sid };
  }

  /**
   * The unique string that identifies the resource
   */
  sid?: string | null;
  /**
   * The SID of the participant\'s room
   */
  roomSid?: string | null;
  /**
   * The SID of the Account that created the resource
   */
  accountSid?: string | null;
  status?: RoomParticipantAnonymizeStatus;
  /**
   * The SID of the participant
   */
  identity?: string | null;
  /**
   * The ISO 8601 date and time in GMT when the resource was created
   */
  dateCreated?: Date | null;
  /**
   * The ISO 8601 date and time in GMT when the resource was last updated
   */
  dateUpdated?: Date | null;
  /**
   * The time of participant connected to the room in ISO 8601 format
   */
  startTime?: Date | null;
  /**
   * The time when the participant disconnected from the room in ISO 8601 format
   */
  endTime?: Date | null;
  /**
   * Duration of time in seconds the participant was connected
   */
  duration?: number | null;
  /**
   * The absolute URL of the resource
   */
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid, 
      roomSid: this.roomSid, 
      accountSid: this.accountSid, 
      status: this.status, 
      identity: this.identity, 
      dateCreated: this.dateCreated, 
      dateUpdated: this.dateUpdated, 
      startTime: this.startTime, 
      endTime: this.endTime, 
      duration: this.duration, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
export interface AnonymizeSolution {
  roomSid?: string;
  sid?: string;
}

export class AnonymizePage extends Page<V1, AnonymizePayload, AnonymizeResource, AnonymizeInstance> {
  /**
   * Initialize the AnonymizePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: AnonymizeSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of AnonymizeInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AnonymizePayload): AnonymizeInstance {
    return new AnonymizeInstance(
      this._version,
      payload,
      this._solution.roomSid,
      this._solution.sid,
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

