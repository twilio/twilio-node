/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Frontline
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");


type UserStateType = 'active'|'deactivated';


/**
 * Options to pass to update a UserInstance
 *
 * @property { string } [friendlyName] The string that you assigned to describe the User.
 * @property { string } [avatar] The avatar URL which will be shown in Frontline application.
 * @property { UserStateType } [state] 
 * @property { boolean } [isAvailable] Whether the User is available for new conversations. Set to &#x60;false&#x60; to prevent User from receiving new inbound conversations if you are using [Pool Routing](https://www.twilio.com/docs/frontline/handle-incoming-conversations#3-pool-routing).
 */
export interface UserListInstanceUpdateOptions {
  'friendlyName'?: string;
  'avatar'?: string;
  'state'?: UserStateType;
  'isAvailable'?: boolean;
}

export interface UserListInstance {


  /**
   * Fetch a UserInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed UserInstance
   */
  fetch(callback?: (error: Error | null, item?: UserInstance) => any): Promise<UserInstance>


  /**
   * Update a UserInstance
   *
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed UserInstance
   */
  update(callback?: (error: Error | null, item?: UserInstance) => any): Promise<UserInstance>;
  /**
   * Update a UserInstance
   *
   * @param { UserListInstanceUpdateOptions } params - Parameter for request
   * @param { function } [callback] - Callback to handle processed record
   *
   * @returns { Promise } Resolves to processed UserInstance
   */
  update(params: UserListInstanceUpdateOptions, callback?: (error: Error | null, item?: UserInstance) => any): Promise<UserInstance>;
  update(params?: any, callback?: any): Promise<UserInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface UserSolution {
}

interface UserListInstanceImpl extends UserListInstance {}
class UserListInstanceImpl implements UserListInstance {
  _version?: V1;
  _solution?: UserSolution;
  _uri?: string;

}

export function UserListInstance(version: V1): UserListInstance {
  const instance = {} as UserListInstanceImpl;

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/Users`;

  instance.fetch = function fetch(callback?: any): Promise<UserInstance> {

    let operationVersion = version,
        operationPromise = operationVersion.fetch({ uri: this._uri, method: 'get' });
    
    operationPromise = operationPromise.then(payload => new UserInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.update = function update(params?: any, callback?: any): Promise<UserInstance> {
    if (typeof params === "function") {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    const data: any = {};

    if (params['friendlyName'] !== undefined) data['FriendlyName'] = params['friendlyName'];
    if (params['avatar'] !== undefined) data['Avatar'] = params['avatar'];
    if (params['state'] !== undefined) data['State'] = params['state'];
    if (params['isAvailable'] !== undefined) data['IsAvailable'] = serialize.bool(params['isAvailable']);

    const headers: any = {};
    headers['Content-Type'] = 'application/x-www-form-urlencoded'

    let operationVersion = version,
        operationPromise = operationVersion.update({ uri: this._uri, method: 'post', data, headers });
    
    operationPromise = operationPromise.then(payload => new UserInstance(operationVersion, payload));
    

    operationPromise = this._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


    }

  instance.toJSON = function toJSON() {
    return this._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }

  return instance;
}

interface UserPayload extends UserResource{
}

interface UserResource {
  sid?: string | null;
  identity?: string | null;
  friendly_name?: string | null;
  avatar?: string | null;
  state?: UserStateType;
  is_available?: boolean | null;
  url?: string | null;
}

export class UserInstance {

  constructor(protected _version: V1, payload: UserPayload) {
    this.sid = payload.sid;
    this.identity = payload.identity;
    this.friendlyName = payload.friendly_name;
    this.avatar = payload.avatar;
    this.state = payload.state;
    this.isAvailable = payload.is_available;
    this.url = payload.url;

  }

  /**
   * The unique string that identifies the resource
   */
  sid?: string | null;
  /**
   * The string that identifies the resource\'s User
   */
  identity?: string | null;
  /**
   * The string that you assigned to describe the User
   */
  friendlyName?: string | null;
  /**
   * The avatar URL which will be shown in Frontline application
   */
  avatar?: string | null;
  state?: UserStateType;
  /**
   * Whether the User is available for new conversations
   */
  isAvailable?: boolean | null;
  /**
   * An absolute URL for this user.
   */
  url?: string | null;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid, 
      identity: this.identity, 
      friendlyName: this.friendlyName, 
      avatar: this.avatar, 
      state: this.state, 
      isAvailable: this.isAvailable, 
      url: this.url
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


