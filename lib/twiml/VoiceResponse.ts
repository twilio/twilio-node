"use strict";

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import { XMLElement } from "xmlbuilder";
import TwiML from "./TwiML";

class VoiceResponse extends TwiML {
  /**
   * <Response> TwiML for Voice
   */
  constructor() {
    super();
    this._propertyName = "response";
  }
  /**
   * <Connect> TwiML Verb
   *
   * @function connect
   * @memberof VoiceResponse#
   */
  connect(attributes?: VoiceResponse.ConnectAttributes): VoiceResponse.Connect {
    return new VoiceResponse.Connect(this.response.ele("Connect", attributes));
  }
  /**
   * <Dial> TwiML Verb
   *
   * @function dial
   * @memberof VoiceResponse#
   */
  dial(number?: string): VoiceResponse.Dial;
  dial(
    attributes?: VoiceResponse.DialAttributes,
    number?: string
  ): VoiceResponse.Dial;
  dial(
    attributes?: VoiceResponse.DialAttributes | string,
    number?: string
  ): VoiceResponse.Dial {
    if (typeof attributes === "string") {
      number = attributes;
      attributes = {};
    }
    return new VoiceResponse.Dial(
      this.response.ele("Dial", attributes, number)
    );
  }
  /**
   * <Echo> TwiML Verb
   *
   * @function echo
   * @memberof VoiceResponse#
   */
  echo(attributes?: object): VoiceResponse.Echo {
    return new VoiceResponse.Echo(this.response.ele("Echo", attributes));
  }
  /**
   * <Enqueue> TwiML Noun
   *
   * @function enqueue
   * @memberof VoiceResponse#
   */
  enqueue(name?: string): VoiceResponse.Enqueue;
  enqueue(
    attributes?: VoiceResponse.EnqueueAttributes,
    name?: string
  ): VoiceResponse.Enqueue;
  enqueue(
    attributes?: VoiceResponse.EnqueueAttributes | string,
    name?: string
  ): VoiceResponse.Enqueue {
    if (typeof attributes === "string") {
      name = attributes;
      attributes = {};
    }
    return new VoiceResponse.Enqueue(
      this.response.ele("Enqueue", attributes, name)
    );
  }
  /**
   * <Gather> TwiML Verb
   *
   * @function gather
   * @memberof VoiceResponse#
   */
  gather(attributes?: VoiceResponse.GatherAttributes): VoiceResponse.Gather {
    return new VoiceResponse.Gather(this.response.ele("Gather", attributes));
  }
  /**
   * <Hangup> TwiML Verb
   *
   * @function hangup
   * @memberof VoiceResponse#
   */
  hangup(attributes?: object): VoiceResponse.Hangup {
    return new VoiceResponse.Hangup(this.response.ele("Hangup", attributes));
  }
  /**
   * <Leave> TwiML Verb
   *
   * @function leave
   * @memberof VoiceResponse#
   */
  leave(attributes?: object): VoiceResponse.Leave {
    return new VoiceResponse.Leave(this.response.ele("Leave", attributes));
  }
  /**
   * <Pause> TwiML Verb
   *
   * @function pause
   * @memberof VoiceResponse#
   */
  pause(attributes?: VoiceResponse.PauseAttributes): VoiceResponse.Pause {
    return new VoiceResponse.Pause(this.response.ele("Pause", attributes));
  }
  /**
   * <Pay> Twiml Verb
   *
   * @function pay
   * @memberof VoiceResponse#
   */
  pay(attributes?: VoiceResponse.PayAttributes): VoiceResponse.Pay {
    return new VoiceResponse.Pay(this.response.ele("Pay", attributes));
  }
  /**
   * <Play> TwiML Verb
   *
   * @function play
   * @memberof VoiceResponse#
   */
  play(url?: string): VoiceResponse.Play;
  play(
    attributes?: VoiceResponse.PlayAttributes,
    url?: string
  ): VoiceResponse.Play;
  play(
    attributes?: VoiceResponse.PlayAttributes | string,
    url?: string
  ): VoiceResponse.Play {
    if (typeof attributes === "string") {
      url = attributes;
      attributes = {};
    }
    return new VoiceResponse.Play(this.response.ele("Play", attributes, url));
  }
  /**
   * <Prompt> Twiml Verb
   *
   * @function prompt
   * @memberof VoiceResponse#
   */
  prompt(attributes?: VoiceResponse.PromptAttributes): VoiceResponse.Prompt {
    return new VoiceResponse.Prompt(this.response.ele("Prompt", attributes));
  }
  /**
   * <Queue> TwiML Noun
   *
   * @function queue
   * @memberof VoiceResponse#
   */
  queue(name: string): VoiceResponse.Queue;
  queue(
    attributes: VoiceResponse.QueueAttributes,
    name: string
  ): VoiceResponse.Queue;
  queue(
    attributes: VoiceResponse.QueueAttributes | string,
    name?: string
  ): VoiceResponse.Queue {
    if (typeof attributes === "string") {
      name = attributes;
      attributes = {};
    }
    return new VoiceResponse.Queue(
      this.response.ele("Queue", attributes, name)
    );
  }
  /**
   * <Record> TwiML Verb
   *
   * @function record
   * @memberof VoiceResponse#
   */
  record(attributes?: VoiceResponse.RecordAttributes): VoiceResponse.Record {
    return new VoiceResponse.Record(this.response.ele("Record", attributes));
  }
  /**
   * <Redirect> TwiML Verb
   *
   * @function redirect
   * @memberof VoiceResponse#
   */
  redirect(url: string): VoiceResponse.Redirect;
  redirect(
    attributes: VoiceResponse.RedirectAttributes,
    url: string
  ): VoiceResponse.Redirect;
  redirect(
    attributes: VoiceResponse.RedirectAttributes | string,
    url?: string
  ): VoiceResponse.Redirect {
    if (typeof attributes === "string") {
      url = attributes;
      attributes = {};
    }
    return new VoiceResponse.Redirect(
      this.response.ele("Redirect", attributes, url)
    );
  }
  /**
   * <Refer> TwiML Verb
   *
   * @function refer
   * @memberof VoiceResponse#
   */
  refer(attributes?: VoiceResponse.ReferAttributes): VoiceResponse.Refer {
    return new VoiceResponse.Refer(this.response.ele("Refer", attributes));
  }
  /**
   * <Reject> TwiML Verb
   *
   * @function reject
   * @memberof VoiceResponse#
   */
  reject(attributes?: VoiceResponse.RejectAttributes): VoiceResponse.Reject {
    return new VoiceResponse.Reject(this.response.ele("Reject", attributes));
  }
  /**
   * <Say> TwiML Verb
   *
   * @function say
   * @memberof VoiceResponse#
   */
  say(message: string): VoiceResponse.Say;
  say(
    attributes: VoiceResponse.SayAttributes,
    message: string
  ): VoiceResponse.Say;
  say(
    attributes: VoiceResponse.SayAttributes | string,
    message?: string
  ): VoiceResponse.Say {
    if (typeof attributes === "string") {
      message = attributes;
      attributes = {};
    }
    return new VoiceResponse.Say(this.response.ele("Say", attributes, message));
  }
  /**
   * <Sms> TwiML Noun
   *
   * @function sms
   * @memberof VoiceResponse#
   */
  sms(message: string): VoiceResponse.Sms;
  sms(
    attributes: VoiceResponse.SmsAttributes,
    message: string
  ): VoiceResponse.Sms;
  sms(
    attributes: VoiceResponse.SmsAttributes | string,
    message?: string
  ): VoiceResponse.Sms {
    if (typeof attributes === "string") {
      message = attributes;
      attributes = {};
    }
    return new VoiceResponse.Sms(this.response.ele("Sms", attributes, message));
  }
  /**
   * <Start> TwiML Verb
   *
   * @function start
   * @memberof VoiceResponse#
   */
  start(attributes?: VoiceResponse.StartAttributes): VoiceResponse.Start {
    return new VoiceResponse.Start(this.response.ele("Start", attributes));
  }
  /**
   * <Stop> TwiML Verb
   *
   * @function stop
   * @memberof VoiceResponse#
   */
  stop(attributes?: object): VoiceResponse.Stop {
    return new VoiceResponse.Stop(this.response.ele("Stop", attributes));
  }
}

namespace VoiceResponse {
  type ClientEvent = "initiated" | "ringing" | "answered" | "completed";

  type ConferenceBeep = "true" | "false" | "onEnter" | "onExit";

  type ConferenceEvent =
    | "start"
    | "end"
    | "join"
    | "leave"
    | "mute"
    | "hold"
    | "modify"
    | "speaker"
    | "announcement";

  type ConferenceJitterBufferSize = "large" | "medium" | "small" | "off";

  type ConferenceRecord = "do-not-record" | "record-from-start";

  type ConferenceRecordingEvent = "in-progress" | "completed" | "absent";

  type ConferenceRegion = "us1" | "ie1" | "sg1" | "br1" | "au1" | "jp1" | "de1";

  type ConferenceTrim = "trim-silence" | "do-not-trim";

  type ConversationEvent =
    | "call-initiated"
    | "call-ringing"
    | "call-answered"
    | "call-completed";

  type ConversationRecord =
    | "do-not-record"
    | "record-from-answer"
    | "record-from-ringing"
    | "record-from-answer-dual"
    | "record-from-ringing-dual"
    | "true"
    | "false";

  type ConversationRecordingEvent = "in-progress" | "completed" | "absent";

  type ConversationTrim = "trim-silence" | "do-not-trim";

  type DialRecord =
    | "do-not-record"
    | "record-from-answer"
    | "record-from-ringing"
    | "record-from-answer-dual"
    | "record-from-ringing-dual";

  type DialRecordingEvent = "in-progress" | "completed" | "absent";

  type DialRecordingTrack = "both" | "inbound" | "outbound";

  type DialRingTone =
    | "at"
    | "au"
    | "bg"
    | "br"
    | "be"
    | "ch"
    | "cl"
    | "cn"
    | "cz"
    | "de"
    | "dk"
    | "ee"
    | "es"
    | "fi"
    | "fr"
    | "gr"
    | "hu"
    | "il"
    | "in"
    | "it"
    | "lt"
    | "jp"
    | "mx"
    | "my"
    | "nl"
    | "no"
    | "nz"
    | "ph"
    | "pl"
    | "pt"
    | "ru"
    | "se"
    | "sg"
    | "th"
    | "uk"
    | "us"
    | "us-old"
    | "tw"
    | "ve"
    | "za";

  type DialTrim = "trim-silence" | "do-not-trim";

  type GatherInput = "dtmf" | "speech";

  type GatherLanguage =
    | "af-ZA"
    | "am-ET"
    | "ar-AE"
    | "ar-BH"
    | "ar-DZ"
    | "ar-EG"
    | "ar-IL"
    | "ar-IQ"
    | "ar-JO"
    | "ar-KW"
    | "ar-LB"
    | "ar-MA"
    | "ar-OM"
    | "ar-PS"
    | "ar-QA"
    | "ar-SA"
    | "ar-TN"
    | "az-AZ"
    | "bg-BG"
    | "bn-BD"
    | "bn-IN"
    | "ca-ES"
    | "cs-CZ"
    | "da-DK"
    | "de-DE"
    | "el-GR"
    | "en-AU"
    | "en-CA"
    | "en-GB"
    | "en-GH"
    | "en-IE"
    | "en-IN"
    | "en-KE"
    | "en-NG"
    | "en-NZ"
    | "en-PH"
    | "en-SG"
    | "en-TZ"
    | "en-US"
    | "en-ZA"
    | "es-AR"
    | "es-BO"
    | "es-CL"
    | "es-CO"
    | "es-CR"
    | "es-DO"
    | "es-EC"
    | "es-ES"
    | "es-GT"
    | "es-HN"
    | "es-MX"
    | "es-NI"
    | "es-PA"
    | "es-PE"
    | "es-PR"
    | "es-PY"
    | "es-SV"
    | "es-US"
    | "es-UY"
    | "es-VE"
    | "et-EE"
    | "eu-ES"
    | "fa-IR"
    | "fi-FI"
    | "fil-PH"
    | "fr-CA"
    | "fr-FR"
    | "gl-ES"
    | "gu-IN"
    | "he-IL"
    | "hi-IN"
    | "hr-HR"
    | "hu-HU"
    | "hy-AM"
    | "id-ID"
    | "is-IS"
    | "it-IT"
    | "ja-JP"
    | "jv-ID"
    | "ka-GE"
    | "km-KH"
    | "kn-IN"
    | "ko-KR"
    | "lo-LA"
    | "lt-LT"
    | "lv-LV"
    | "mk-MK"
    | "ml-IN"
    | "mn-MN"
    | "mr-IN"
    | "ms-MY"
    | "my-MM"
    | "nar-IQ"
    | "nb-NO"
    | "ne-NP"
    | "nl-BE"
    | "nl-NL"
    | "pa-guru-IN"
    | "pl-PL"
    | "pt-BR"
    | "pt-PT"
    | "ro-RO"
    | "ru-RU"
    | "si-LK"
    | "sk-SK"
    | "sl-SI"
    | "sq-AL"
    | "sr-RS"
    | "su-ID"
    | "sv-SE"
    | "sw-KE"
    | "sw-TZ"
    | "ta-IN"
    | "ta-LK"
    | "ta-MY"
    | "ta-SG"
    | "te-IN"
    | "th-TH"
    | "tr-TR"
    | "uk-UA"
    | "ur-IN"
    | "ur-PK"
    | "uz-UZ"
    | "vi-VN"
    | "yue-Hant-HK"
    | "zh"
    | "cmn-Hans-CN"
    | "zh-TW"
    | "cmn-Hant-TW"
    | "zu-ZA";

  type GatherSpeechModel =
    | "default"
    | "numbers_and_commands"
    | "phone_call"
    | "experimental_conversations"
    | "experimental_utterances";

  type NumberEvent = "initiated" | "ringing" | "answered" | "completed";

  type PayBankAccountType =
    | "consumer-checking"
    | "consumer-savings"
    | "commercial-checking"
    | "commercial-savings";

  type PayInput = "dtmf";

  type PayLanguage =
    | "de-DE"
    | "en-AU"
    | "en-CA"
    | "en-GB"
    | "en-IN"
    | "en-IE"
    | "en-NZ"
    | "en-PH"
    | "en-ZA"
    | "en-US"
    | "es-ES"
    | "es-US"
    | "fr-CA"
    | "fr-FR"
    | "it-IT";

  type PayPaymentMethod = "ach-debit" | "credit-card";

  type PayStatusCallbackMethod = "GET" | "POST";

  type PayTokenType = "one-time" | "reusable";

  type PayValidCardTypes =
    | "visa"
    | "mastercard"
    | "amex"
    | "maestro"
    | "discover"
    | "optima"
    | "jcb"
    | "diners-club"
    | "enroute";

  type PromptCardType =
    | "visa"
    | "mastercard"
    | "amex"
    | "maestro"
    | "discover"
    | "optima"
    | "jcb"
    | "diners-club"
    | "enroute";

  type PromptErrorType =
    | "timeout"
    | "invalid-card-number"
    | "invalid-card-type"
    | "invalid-date"
    | "invalid-security-code"
    | "internal-error"
    | "input-matching-failed";

  type PromptFor =
    | "payment-card-number"
    | "expiration-date"
    | "security-code"
    | "postal-code"
    | "payment-processing"
    | "bank-account-number"
    | "bank-routing-number";

  type RecordRecordingEvent = "in-progress" | "completed" | "absent";

  type RecordTrim = "trim-silence" | "do-not-trim";

  type RejectReason = "rejected" | "busy";

  type SayLanguage =
    | "arb"
    | "ca-ES"
    | "cy-GB"
    | "da-DK"
    | "de-DE"
    | "de-AT"
    | "en-AU"
    | "en-CA"
    | "en-GB"
    | "en-GB-WLS"
    | "en-IN"
    | "en-NZ"
    | "en-ZA"
    | "en-US"
    | "es-ES"
    | "es-MX"
    | "es-US"
    | "fi-FI"
    | "fr-CA"
    | "fr-FR"
    | "hi-IN"
    | "is-IS"
    | "it-IT"
    | "ja-JP"
    | "ko-KR"
    | "nb-NO"
    | "nl-NL"
    | "pl-PL"
    | "pt-BR"
    | "pt-PT"
    | "ro-RO"
    | "ru-RU"
    | "sv-SE"
    | "tr-TR"
    | "zh-CN"
    | "zh-HK"
    | "zh-TW";

  type SayVoice =
    | "man"
    | "woman"
    | "alice"
    | "Polly.Aditi"
    | "Polly.Amy"
    | "Polly.Astrid"
    | "Polly.Bianca"
    | "Polly.Brian"
    | "Polly.Camila"
    | "Polly.Carla"
    | "Polly.Carmen"
    | "Polly.Celine"
    | "Polly.Chantal"
    | "Polly.Conchita"
    | "Polly.Cristiano"
    | "Polly.Dora"
    | "Polly.Emma"
    | "Polly.Enrique"
    | "Polly.Ewa"
    | "Polly.Filiz"
    | "Polly.Geraint"
    | "Polly.Giorgio"
    | "Polly.Gwyneth"
    | "Polly.Hans"
    | "Polly.Ines"
    | "Polly.Ivy"
    | "Polly.Jacek"
    | "Polly.Jan"
    | "Polly.Joanna"
    | "Polly.Joey"
    | "Polly.Justin"
    | "Polly.Karl"
    | "Polly.Kendra"
    | "Polly.Kimberly"
    | "Polly.Lea"
    | "Polly.Liv"
    | "Polly.Lotte"
    | "Polly.Lucia"
    | "Polly.Lupe"
    | "Polly.Mads"
    | "Polly.Maja"
    | "Polly.Marlene"
    | "Polly.Mathieu"
    | "Polly.Matthew"
    | "Polly.Maxim"
    | "Polly.Mia"
    | "Polly.Miguel"
    | "Polly.Mizuki"
    | "Polly.Naja"
    | "Polly.Nicole"
    | "Polly.Penelope"
    | "Polly.Raveena"
    | "Polly.Ricardo"
    | "Polly.Ruben"
    | "Polly.Russell"
    | "Polly.Salli"
    | "Polly.Seoyeon"
    | "Polly.Takumi"
    | "Polly.Tatyana"
    | "Polly.Vicki"
    | "Polly.Vitoria"
    | "Polly.Zeina"
    | "Polly.Zhiyu"
    | "Polly.Amy-Neural"
    | "Polly.Aria-Neural"
    | "Polly.Arlet-Neural"
    | "Polly.Arthur-Neural"
    | "Polly.Ayanda-Neural"
    | "Polly.Bianca-Neural"
    | "Polly.Brian-Neural"
    | "Polly.Camila-Neural"
    | "Polly.Daniel-Neural"
    | "Polly.Emma-Neural"
    | "Polly.Gabrielle-Neural"
    | "Polly.Hannah-Neural"
    | "Polly.Ines-Neural"
    | "Polly.Ivy-Neural"
    | "Polly.Joanna-Neural"
    | "Polly.Joey-Neural"
    | "Polly.Justin-Neural"
    | "Polly.Kajal-Neural"
    | "Polly.Kendra-Neural"
    | "Polly.Kevin-Neural"
    | "Polly.Kimberly-Neural"
    | "Polly.Lea-Neural"
    | "Polly.Liam-Neural"
    | "Polly.Lucia-Neural"
    | "Polly.Lupe-Neural"
    | "Polly.Matthew-Neural"
    | "Polly.Mia-Neural"
    | "Polly.Olivia-Neural"
    | "Polly.Pedro-Neural"
    | "Polly.Salli-Neural"
    | "Polly.Seoyeon-Neural"
    | "Polly.Takumi-Neural"
    | "Polly.Vicki-Neural"
    | "Polly.Vitoria-Neural";

  type SipEvent = "initiated" | "ringing" | "answered" | "completed";

  type SiprecTrack = "inbound_track" | "outbound_track" | "both_tracks";

  type SsmlBreakStrength =
    | "none"
    | "x-weak"
    | "weak"
    | "medium"
    | "strong"
    | "x-strong";

  type SsmlEmphasisLevel = "strong" | "moderate" | "reduced";

  type SsmlLangXmlLang =
    | "arb"
    | "ca-ES"
    | "cmn-CN"
    | "cy-GB"
    | "da-DK"
    | "de-DE"
    | "de-AT"
    | "en-AU"
    | "en-GB"
    | "en-GB-WLS"
    | "en-IN"
    | "en-NZ"
    | "en-US"
    | "en-ZA"
    | "es-ES"
    | "es-MX"
    | "es-US"
    | "fr-CA"
    | "fr-FR"
    | "hi-IN"
    | "is-IS"
    | "it-IT"
    | "ja-JP"
    | "ko-KR"
    | "nb-NO"
    | "nl-NL"
    | "pl-PL"
    | "pt-BR"
    | "pt-PT"
    | "ro-RO"
    | "ru-RU"
    | "sv-SE"
    | "tr-TR";

  type SsmlPhonemeAlphabet = "ipa" | "x-sampa";

  type SsmlSayAsInterpretAs =
    | "character"
    | "spell-out"
    | "cardinal"
    | "number"
    | "ordinal"
    | "digits"
    | "fraction"
    | "unit"
    | "date"
    | "time"
    | "address"
    | "expletive"
    | "telephone";

  type SsmlSayAsRole =
    | "mdy"
    | "dmy"
    | "ymd"
    | "md"
    | "dm"
    | "ym"
    | "my"
    | "d"
    | "m"
    | "y"
    | "yyyymmdd";

  type StreamStatusCallbackMethod = "GET" | "POST";

  type StreamTrack = "inbound_track" | "outbound_track" | "both_tracks";

  export interface ConnectAttributes {
    action?: string;
    method?: string;
  }

  export interface DialAttributes {
    action?: string;
    answerOnBridge?: boolean;
    callerId?: string;
    hangupOnStar?: boolean;
    method?: string;
    record?: DialRecord;
    recordingStatusCallback?: string;
    recordingStatusCallbackEvent?: DialRecordingEvent[];
    recordingStatusCallbackMethod?: string;
    recordingTrack?: DialRecordingTrack;
    referMethod?: string;
    referUrl?: string;
    ringTone?: DialRingTone;
    sequential?: boolean;
    timeLimit?: number;
    timeout?: number;
    trim?: DialTrim;
  }

  export interface EnqueueAttributes {
    action?: string;
    maxQueueSize?: number;
    method?: string;
    waitUrl?: string;
    waitUrlMethod?: string;
    workflowSid?: string;
  }

  export interface GatherAttributes {
    action?: string;
    actionOnEmptyResult?: boolean;
    bargeIn?: boolean;
    debug?: boolean;
    enhanced?: boolean;
    finishOnKey?: string;
    hints?: string;
    input?: GatherInput[];
    language?: GatherLanguage;
    maxSpeechTime?: number;
    method?: string;
    numDigits?: number;
    partialResultCallback?: string;
    partialResultCallbackMethod?: string;
    profanityFilter?: boolean;
    speechModel?: GatherSpeechModel;
    speechTimeout?: string;
    timeout?: number;
  }

  export interface PauseAttributes {
    length?: number;
  }

  export interface PlayAttributes {
    digits?: string;
    loop?: number;
  }

  export interface QueueAttributes {
    method?: string;
    postWorkActivitySid?: string;
    reservationSid?: string;
    url?: string;
  }

  export interface RecordAttributes {
    action?: string;
    finishOnKey?: string;
    maxLength?: number;
    method?: string;
    playBeep?: boolean;
    recordingStatusCallback?: string;
    recordingStatusCallbackEvent?: RecordRecordingEvent[];
    recordingStatusCallbackMethod?: string;
    timeout?: number;
    transcribe?: boolean;
    transcribeCallback?: string;
    trim?: RecordTrim;
  }

  export interface RedirectAttributes {
    method?: string;
  }

  export interface RejectAttributes {
    reason?: RejectReason;
  }

  export interface SayAttributes {
    language?: SayLanguage;
    loop?: number;
    voice?: SayVoice;
  }

  export interface SmsAttributes {
    action?: string;
    from?: string;
    method?: string;
    statusCallback?: string;
    to?: string;
  }

  export interface PayAttributes {
    action?: string;
    bankAccountType?: PayBankAccountType;
    chargeAmount?: string;
    currency?: string;
    description?: string;
    input?: PayInput;
    language?: PayLanguage;
    maxAttempts?: number;
    minPostalCodeLength?: number;
    paymentConnector?: string;
    paymentMethod?: PayPaymentMethod;
    postalCode?: string;
    securityCode?: boolean;
    statusCallback?: string;
    statusCallbackMethod?: PayStatusCallbackMethod;
    timeout?: number;
    tokenType?: PayTokenType;
    validCardTypes?: PayValidCardTypes[];
  }

  export interface PromptAttributes {
    attempt?: number[];
    cardType?: PromptCardType[];
    errorType?: PromptErrorType[];
    for?: PromptFor;
    requireMatchingInputs?: boolean;
  }

  export interface StartAttributes {
    action?: string;
    method?: string;
  }

  export interface ReferAttributes {
    action?: string;
    method?: string;
  }

  export interface StreamAttributes {
    connectorName?: string;
    name?: string;
    statusCallback?: string;
    statusCallbackMethod?: StreamStatusCallbackMethod;
    track?: StreamTrack;
    url?: string;
  }

  export interface SiprecAttributes {
    connectorName?: string;
    name?: string;
    track?: SiprecTrack;
  }

  export interface ParameterAttributes {
    name?: string;
    value?: string;
  }

  export interface ParameterAttributes {
    name?: string;
    value?: string;
  }

  export interface StreamAttributes {
    connectorName?: string;
    name?: string;
    statusCallback?: string;
    statusCallbackMethod?: StreamStatusCallbackMethod;
    track?: StreamTrack;
    url?: string;
  }

  export interface SiprecAttributes {
    connectorName?: string;
    name?: string;
    track?: SiprecTrack;
  }

  export interface SayAttributes {
    language?: SayLanguage;
    loop?: number;
    voice?: SayVoice;
  }

  export interface PlayAttributes {
    digits?: string;
    loop?: number;
  }

  export interface PauseAttributes {
    length?: number;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlLangAttributes {
    "xml:lang"?: SsmlLangXmlLang;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlWAttributes {
    role?: string;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlLangAttributes {
    "xml:lang"?: SsmlLangXmlLang;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlWAttributes {
    role?: string;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlLangAttributes {
    "xml:lang"?: SsmlLangXmlLang;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlWAttributes {
    role?: string;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlLangAttributes {
    "xml:lang"?: SsmlLangXmlLang;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlWAttributes {
    role?: string;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlLangAttributes {
    "xml:lang"?: SsmlLangXmlLang;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlWAttributes {
    role?: string;
  }

  export interface SsmlBreakAttributes {
    strength?: SsmlBreakStrength;
    time?: string;
  }

  export interface SsmlEmphasisAttributes {
    level?: SsmlEmphasisLevel;
  }

  export interface SsmlLangAttributes {
    "xml:lang"?: SsmlLangXmlLang;
  }

  export interface SsmlPhonemeAttributes {
    alphabet?: SsmlPhonemeAlphabet;
    ph?: string;
  }

  export interface SsmlProsodyAttributes {
    pitch?: string;
    rate?: string;
    volume?: string;
  }

  export interface SsmlSayAsAttributes {
    "interpret-as"?: SsmlSayAsInterpretAs;
    role?: SsmlSayAsRole;
  }

  export interface SsmlSubAttributes {
    alias?: string;
  }

  export interface SsmlWAttributes {
    role?: string;
  }

  export interface PromptAttributes {
    attempt?: number[];
    cardType?: PromptCardType[];
    errorType?: PromptErrorType[];
    for?: PromptFor;
    requireMatchingInputs?: boolean;
  }

  export interface ParameterAttributes {
    name?: string;
    value?: string;
  }

  export interface SayAttributes {
    language?: SayLanguage;
    loop?: number;
    voice?: SayVoice;
  }

  export interface PauseAttributes {
    length?: number;
  }

  export interface PlayAttributes {
    digits?: string;
    loop?: number;
  }

  export interface TaskAttributes {
    priority?: number;
    timeout?: number;
  }

  export interface ClientAttributes {
    method?: string;
    statusCallback?: string;
    statusCallbackEvent?: ClientEvent[];
    statusCallbackMethod?: string;
    url?: string;
  }

  export interface ConferenceAttributes {
    beep?: ConferenceBeep;
    coach?: string;
    endConferenceOnExit?: boolean;
    eventCallbackUrl?: string;
    jitterBufferSize?: ConferenceJitterBufferSize;
    maxParticipants?: number;
    muted?: boolean;
    participantLabel?: string;
    record?: ConferenceRecord;
    recordingStatusCallback?: string;
    recordingStatusCallbackEvent?: ConferenceRecordingEvent[];
    recordingStatusCallbackMethod?: string;
    region?: ConferenceRegion;
    startConferenceOnEnter?: boolean;
    statusCallback?: string;
    statusCallbackEvent?: ConferenceEvent[];
    statusCallbackMethod?: string;
    trim?: ConferenceTrim;
    waitMethod?: string;
    waitUrl?: string;
  }

  export interface NumberAttributes {
    amdStatusCallback?: string;
    amdStatusCallbackMethod?: string;
    byoc?: string;
    machineDetection?: string;
    machineDetectionSilenceTimeout?: number;
    machineDetectionSpeechEndThreshold?: number;
    machineDetectionSpeechThreshold?: number;
    machineDetectionTimeout?: number;
    method?: string;
    sendDigits?: string;
    statusCallback?: string;
    statusCallbackEvent?: NumberEvent[];
    statusCallbackMethod?: string;
    url?: string;
  }

  export interface QueueAttributes {
    method?: string;
    postWorkActivitySid?: string;
    reservationSid?: string;
    url?: string;
  }

  export interface SipAttributes {
    amdStatusCallback?: string;
    amdStatusCallbackMethod?: string;
    machineDetection?: string;
    machineDetectionSilenceTimeout?: number;
    machineDetectionSpeechEndThreshold?: number;
    machineDetectionSpeechThreshold?: number;
    machineDetectionTimeout?: number;
    method?: string;
    password?: string;
    statusCallback?: string;
    statusCallbackEvent?: SipEvent[];
    statusCallbackMethod?: string;
    url?: string;
    username?: string;
  }

  export interface ParameterAttributes {
    name?: string;
    value?: string;
  }

  export interface RoomAttributes {
    participantIdentity?: string;
  }

  export interface StreamAttributes {
    connectorName?: string;
    name?: string;
    statusCallback?: string;
    statusCallbackMethod?: StreamStatusCallbackMethod;
    track?: StreamTrack;
    url?: string;
  }

  export interface VirtualAgentAttributes {
    connectorName?: string;
    language?: string;
    sentimentAnalysis?: boolean;
    statusCallback?: string;
    statusCallbackMethod?: string;
  }

  export interface ConversationAttributes {
    inboundAutocreation?: boolean;
    inboundTimeout?: number;
    method?: string;
    record?: ConversationRecord;
    recordingStatusCallback?: string;
    recordingStatusCallbackEvent?: ConversationRecordingEvent[];
    recordingStatusCallbackMethod?: string;
    routingAssignmentTimeout?: number;
    serviceInstanceSid?: string;
    statusCallback?: string;
    statusCallbackEvent?: ConversationEvent[];
    statusCallbackMethod?: string;
    trim?: ConversationTrim;
    url?: string;
  }

  export interface ConfigAttributes {
    name?: string;
    value?: string;
  }

  export interface ParameterAttributes {
    name?: string;
    value?: string;
  }

  export class Autopilot extends TwiML {
    autopilot: XMLElement;
    /**
     * <Autopilot> TwiML Noun
     */
    constructor(autopilot: XMLElement) {
      super();
      this.autopilot = autopilot;
      this._propertyName = "autopilot";
    }
  }

  export class Client extends TwiML {
    client: XMLElement;
    /**
     * <Client> TwiML Noun
     */
    constructor(client: XMLElement) {
      super();
      this.client = client;
      this._propertyName = "client";
    }
    /**
     * <Identity> TwiML Noun
     *
     * @function identity
     * @memberof Client#
     */
    identity(clientIdentity: string): VoiceResponse.Identity;
    identity(
      attributes: object,
      clientIdentity: string
    ): VoiceResponse.Identity;
    identity(
      attributes: object | string,
      clientIdentity?: string
    ): VoiceResponse.Identity {
      if (typeof attributes === "string") {
        clientIdentity = attributes;
        attributes = {};
      }
      return new VoiceResponse.Identity(
        this.client.ele("Identity", attributes, clientIdentity)
      );
    }
    /**
     * <Parameter> TwiML Noun
     *
     * @function parameter
     * @memberof Client#
     */
    parameter(
      attributes?: VoiceResponse.ParameterAttributes
    ): VoiceResponse.Parameter {
      return new VoiceResponse.Parameter(
        this.client.ele("Parameter", attributes)
      );
    }
  }

  export class Conference extends TwiML {
    conference: XMLElement;
    /**
     * <Conference> TwiML Noun
     */
    constructor(conference: XMLElement) {
      super();
      this.conference = conference;
      this._propertyName = "conference";
    }
  }

  export class Config extends TwiML {
    config: XMLElement;
    /**
     * <Config> TwiML Noun
     */
    constructor(config: XMLElement) {
      super();
      this.config = config;
      this._propertyName = "config";
    }
  }

  export class Connect extends TwiML {
    connect: XMLElement;
    /**
     * <Connect> TwiML Verb
     */
    constructor(connect: XMLElement) {
      super();
      this.connect = connect;
      this._propertyName = "connect";
    }
    /**
     * <Autopilot> TwiML Noun
     *
     * @function autopilot
     * @memberof Connect#
     */
    autopilot(name: string): VoiceResponse.Autopilot;
    autopilot(attributes: object, name: string): VoiceResponse.Autopilot;
    autopilot(
      attributes: object | string,
      name?: string
    ): VoiceResponse.Autopilot {
      if (typeof attributes === "string") {
        name = attributes;
        attributes = {};
      }
      return new VoiceResponse.Autopilot(
        this.connect.ele("Autopilot", attributes, name)
      );
    }
    /**
     * <Conversation> TwiML Noun
     *
     * @function conversation
     * @memberof Connect#
     */
    conversation(
      attributes?: VoiceResponse.ConversationAttributes
    ): VoiceResponse.Conversation {
      return new VoiceResponse.Conversation(
        this.connect.ele("Conversation", attributes)
      );
    }
    /**
     * <Room> TwiML Noun
     *
     * @function room
     * @memberof Connect#
     */
    room(name: string): VoiceResponse.Room;
    room(
      attributes: VoiceResponse.RoomAttributes,
      name: string
    ): VoiceResponse.Room;
    room(
      attributes: VoiceResponse.RoomAttributes | string,
      name?: string
    ): VoiceResponse.Room {
      if (typeof attributes === "string") {
        name = attributes;
        attributes = {};
      }
      return new VoiceResponse.Room(this.connect.ele("Room", attributes, name));
    }
    /**
     * <Stream> TwiML Noun
     *
     * @function stream
     * @memberof Connect#
     */
    stream(attributes?: VoiceResponse.StreamAttributes): VoiceResponse.Stream {
      return new VoiceResponse.Stream(this.connect.ele("Stream", attributes));
    }
    /**
     * <VirtualAgent> TwiML Noun
     *
     * @function virtualAgent
     * @memberof Connect#
     */
    virtualAgent(
      attributes?: VoiceResponse.VirtualAgentAttributes
    ): VoiceResponse.VirtualAgent {
      return new VoiceResponse.VirtualAgent(
        this.connect.ele("VirtualAgent", attributes)
      );
    }
  }

  export class Conversation extends TwiML {
    conversation: XMLElement;
    /**
     * <Conversation> TwiML Noun
     */
    constructor(conversation: XMLElement) {
      super();
      this.conversation = conversation;
      this._propertyName = "conversation";
    }
  }

  export class Dial extends TwiML {
    dial: XMLElement;
    /**
     * <Dial> TwiML Verb
     */
    constructor(dial: XMLElement) {
      super();
      this.dial = dial;
      this._propertyName = "dial";
    }
    /**
     * <Client> TwiML Noun
     *
     * @function client
     * @memberof Dial#
     */
    client(identity?: string): VoiceResponse.Client;
    client(
      attributes?: VoiceResponse.ClientAttributes,
      identity?: string
    ): VoiceResponse.Client;
    client(
      attributes?: VoiceResponse.ClientAttributes | string,
      identity?: string
    ): VoiceResponse.Client {
      if (typeof attributes === "string") {
        identity = attributes;
        attributes = {};
      }
      return new VoiceResponse.Client(
        this.dial.ele("Client", attributes, identity)
      );
    }
    /**
     * <Conference> TwiML Noun
     *
     * @function conference
     * @memberof Dial#
     */
    conference(name: string): VoiceResponse.Conference;
    conference(
      attributes: VoiceResponse.ConferenceAttributes,
      name: string
    ): VoiceResponse.Conference;
    conference(
      attributes: VoiceResponse.ConferenceAttributes | string,
      name?: string
    ): VoiceResponse.Conference {
      if (typeof attributes === "string") {
        name = attributes;
        attributes = {};
      }
      return new VoiceResponse.Conference(
        this.dial.ele("Conference", attributes, name)
      );
    }
    /**
     * <Number> TwiML Noun
     *
     * @function number
     * @memberof Dial#
     */
    number(phoneNumber: string): VoiceResponse.Number;
    number(
      attributes: VoiceResponse.NumberAttributes,
      phoneNumber: string
    ): VoiceResponse.Number;
    number(
      attributes: VoiceResponse.NumberAttributes | string,
      phoneNumber?: string
    ): VoiceResponse.Number {
      if (typeof attributes === "string") {
        phoneNumber = attributes;
        attributes = {};
      }
      return new VoiceResponse.Number(
        this.dial.ele("Number", attributes, phoneNumber)
      );
    }
    /**
     * <Queue> TwiML Noun
     *
     * @function queue
     * @memberof Dial#
     */
    queue(name: string): VoiceResponse.Queue;
    queue(
      attributes: VoiceResponse.QueueAttributes,
      name: string
    ): VoiceResponse.Queue;
    queue(
      attributes: VoiceResponse.QueueAttributes | string,
      name?: string
    ): VoiceResponse.Queue {
      if (typeof attributes === "string") {
        name = attributes;
        attributes = {};
      }
      return new VoiceResponse.Queue(this.dial.ele("Queue", attributes, name));
    }
    /**
     * <Sim> TwiML Noun
     *
     * @function sim
     * @memberof Dial#
     */
    sim(simSid: string): VoiceResponse.Sim;
    sim(attributes: object, simSid: string): VoiceResponse.Sim;
    sim(attributes: object | string, simSid?: string): VoiceResponse.Sim {
      if (typeof attributes === "string") {
        simSid = attributes;
        attributes = {};
      }
      return new VoiceResponse.Sim(this.dial.ele("Sim", attributes, simSid));
    }
    /**
     * <Sip> TwiML Noun
     *
     * @function sip
     * @memberof Dial#
     */
    sip(sipUrl: string): VoiceResponse.Sip;
    sip(
      attributes: VoiceResponse.SipAttributes,
      sipUrl: string
    ): VoiceResponse.Sip;
    sip(
      attributes: VoiceResponse.SipAttributes | string,
      sipUrl?: string
    ): VoiceResponse.Sip {
      if (typeof attributes === "string") {
        sipUrl = attributes;
        attributes = {};
      }
      return new VoiceResponse.Sip(this.dial.ele("Sip", attributes, sipUrl));
    }
  }

  export class Echo extends TwiML {
    echo: XMLElement;
    /**
     * <Echo> TwiML Verb
     */
    constructor(echo: XMLElement) {
      super();
      this.echo = echo;
      this._propertyName = "echo";
    }
  }

  export class Enqueue extends TwiML {
    enqueue: XMLElement;
    /**
     * <Enqueue> TwiML Noun
     */
    constructor(enqueue: XMLElement) {
      super();
      this.enqueue = enqueue;
      this._propertyName = "enqueue";
    }
    /**
     * <Task> TwiML Noun
     *
     * @function task
     * @memberof Enqueue#
     */
    task(body: string): VoiceResponse.Task;
    task(
      attributes: VoiceResponse.TaskAttributes,
      body: string
    ): VoiceResponse.Task;
    task(
      attributes: VoiceResponse.TaskAttributes | string,
      body?: string
    ): VoiceResponse.Task {
      if (typeof attributes === "string") {
        body = attributes;
        attributes = {};
      }
      return new VoiceResponse.Task(this.enqueue.ele("Task", attributes, body));
    }
  }

  export class Gather extends TwiML {
    gather: XMLElement;
    /**
     * <Gather> TwiML Verb
     */
    constructor(gather: XMLElement) {
      super();
      this.gather = gather;
      this._propertyName = "gather";
    }
    /**
     * <Pause> TwiML Verb
     *
     * @function pause
     * @memberof Gather#
     */
    pause(attributes?: VoiceResponse.PauseAttributes): VoiceResponse.Pause {
      return new VoiceResponse.Pause(this.gather.ele("Pause", attributes));
    }
    /**
     * <Play> TwiML Verb
     *
     * @function play
     * @memberof Gather#
     */
    play(url?: string): VoiceResponse.Play;
    play(
      attributes?: VoiceResponse.PlayAttributes,
      url?: string
    ): VoiceResponse.Play;
    play(
      attributes?: VoiceResponse.PlayAttributes | string,
      url?: string
    ): VoiceResponse.Play {
      if (typeof attributes === "string") {
        url = attributes;
        attributes = {};
      }
      return new VoiceResponse.Play(this.gather.ele("Play", attributes, url));
    }
    /**
     * <Say> TwiML Verb
     *
     * @function say
     * @memberof Gather#
     */
    say(message: string): VoiceResponse.Say;
    say(
      attributes: VoiceResponse.SayAttributes,
      message: string
    ): VoiceResponse.Say;
    say(
      attributes: VoiceResponse.SayAttributes | string,
      message?: string
    ): VoiceResponse.Say {
      if (typeof attributes === "string") {
        message = attributes;
        attributes = {};
      }
      return new VoiceResponse.Say(this.gather.ele("Say", attributes, message));
    }
  }

  export class Hangup extends TwiML {
    hangup: XMLElement;
    /**
     * <Hangup> TwiML Verb
     */
    constructor(hangup: XMLElement) {
      super();
      this.hangup = hangup;
      this._propertyName = "hangup";
    }
  }

  export class Identity extends TwiML {
    identity: XMLElement;
    /**
     * <Identity> TwiML Noun
     */
    constructor(identity: XMLElement) {
      super();
      this.identity = identity;
      this._propertyName = "identity";
    }
  }

  export class Leave extends TwiML {
    leave: XMLElement;
    /**
     * <Leave> TwiML Verb
     */
    constructor(leave: XMLElement) {
      super();
      this.leave = leave;
      this._propertyName = "leave";
    }
  }

  export class Number extends TwiML {
    number: XMLElement;
    /**
     * <Number> TwiML Noun
     */
    constructor(number: XMLElement) {
      super();
      this.number = number;
      this._propertyName = "number";
    }
  }

  export class Parameter extends TwiML {
    parameter: XMLElement;
    /**
     * <Parameter> TwiML Noun
     */
    constructor(parameter: XMLElement) {
      super();
      this.parameter = parameter;
      this._propertyName = "parameter";
    }
  }

  export class Pause extends TwiML {
    pause: XMLElement;
    /**
     * <Pause> TwiML Verb
     */
    constructor(pause: XMLElement) {
      super();
      this.pause = pause;
      this._propertyName = "pause";
    }
  }

  export class Pay extends TwiML {
    pay: XMLElement;
    /**
     * <Pay> Twiml Verb
     */
    constructor(pay: XMLElement) {
      super();
      this.pay = pay;
      this._propertyName = "pay";
    }
    /**
     * <Parameter> TwiML Noun
     *
     * @function parameter
     * @memberof Pay#
     */
    parameter(
      attributes?: VoiceResponse.ParameterAttributes
    ): VoiceResponse.Parameter {
      return new VoiceResponse.Parameter(this.pay.ele("Parameter", attributes));
    }
    /**
     * <Prompt> Twiml Verb
     *
     * @function prompt
     * @memberof Pay#
     */
    prompt(attributes?: VoiceResponse.PromptAttributes): VoiceResponse.Prompt {
      return new VoiceResponse.Prompt(this.pay.ele("Prompt", attributes));
    }
  }

  export class Play extends TwiML {
    play: XMLElement;
    /**
     * <Play> TwiML Verb
     */
    constructor(play: XMLElement) {
      super();
      this.play = play;
      this._propertyName = "play";
    }
  }

  export class Prompt extends TwiML {
    prompt: XMLElement;
    /**
     * <Prompt> Twiml Verb
     */
    constructor(prompt: XMLElement) {
      super();
      this.prompt = prompt;
      this._propertyName = "prompt";
    }
    /**
     * <Pause> TwiML Verb
     *
     * @function pause
     * @memberof Prompt#
     */
    pause(attributes?: VoiceResponse.PauseAttributes): VoiceResponse.Pause {
      return new VoiceResponse.Pause(this.prompt.ele("Pause", attributes));
    }
    /**
     * <Play> TwiML Verb
     *
     * @function play
     * @memberof Prompt#
     */
    play(url?: string): VoiceResponse.Play;
    play(
      attributes?: VoiceResponse.PlayAttributes,
      url?: string
    ): VoiceResponse.Play;
    play(
      attributes?: VoiceResponse.PlayAttributes | string,
      url?: string
    ): VoiceResponse.Play {
      if (typeof attributes === "string") {
        url = attributes;
        attributes = {};
      }
      return new VoiceResponse.Play(this.prompt.ele("Play", attributes, url));
    }
    /**
     * <Say> TwiML Verb
     *
     * @function say
     * @memberof Prompt#
     */
    say(message: string): VoiceResponse.Say;
    say(
      attributes: VoiceResponse.SayAttributes,
      message: string
    ): VoiceResponse.Say;
    say(
      attributes: VoiceResponse.SayAttributes | string,
      message?: string
    ): VoiceResponse.Say {
      if (typeof attributes === "string") {
        message = attributes;
        attributes = {};
      }
      return new VoiceResponse.Say(this.prompt.ele("Say", attributes, message));
    }
  }

  export class Queue extends TwiML {
    queue: XMLElement;
    /**
     * <Queue> TwiML Noun
     */
    constructor(queue: XMLElement) {
      super();
      this.queue = queue;
      this._propertyName = "queue";
    }
  }

  export class Record extends TwiML {
    record: XMLElement;
    /**
     * <Record> TwiML Verb
     */
    constructor(record: XMLElement) {
      super();
      this.record = record;
      this._propertyName = "record";
    }
  }

  export class Redirect extends TwiML {
    redirect: XMLElement;
    /**
     * <Redirect> TwiML Verb
     */
    constructor(redirect: XMLElement) {
      super();
      this.redirect = redirect;
      this._propertyName = "redirect";
    }
  }

  export class Refer extends TwiML {
    refer: XMLElement;
    /**
     * <Refer> TwiML Verb
     */
    constructor(refer: XMLElement) {
      super();
      this.refer = refer;
      this._propertyName = "refer";
    }
    /**
     * <Sip> TwiML Noun used in <Refer>
     *
     * @function sip
     * @memberof Refer#
     */
    sip(sipUrl: string): VoiceResponse.ReferSip;
    sip(attributes: object, sipUrl: string): VoiceResponse.ReferSip;
    sip(attributes: object | string, sipUrl?: string): VoiceResponse.ReferSip {
      if (typeof attributes === "string") {
        sipUrl = attributes;
        attributes = {};
      }
      return new VoiceResponse.ReferSip(
        this.refer.ele("Sip", attributes, sipUrl)
      );
    }
  }

  export class ReferSip extends TwiML {
    referSip: XMLElement;
    /**
     * <Sip> TwiML Noun used in <Refer>
     */
    constructor(referSip: XMLElement) {
      super();
      this.referSip = referSip;
      this._propertyName = "referSip";
    }
  }

  export class Reject extends TwiML {
    reject: XMLElement;
    /**
     * <Reject> TwiML Verb
     */
    constructor(reject: XMLElement) {
      super();
      this.reject = reject;
      this._propertyName = "reject";
    }
  }

  export class Room extends TwiML {
    room: XMLElement;
    /**
     * <Room> TwiML Noun
     */
    constructor(room: XMLElement) {
      super();
      this.room = room;
      this._propertyName = "room";
    }
  }

  export class Say extends TwiML {
    say: XMLElement;
    /**
     * <Say> TwiML Verb
     */
    constructor(say: XMLElement) {
      super();
      this.say = say;
      this._propertyName = "say";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof Say#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(this.say.ele("break", attributes));
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof Say#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.say.ele("emphasis", attributes, words)
      );
    }
    /**
     * Specifying Another Language for Specific Words in <Say>
     *
     * @function lang
     * @memberof Say#
     */
    lang(words: string): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes,
      words: string
    ): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes | string,
      words?: string
    ): VoiceResponse.SsmlLang {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlLang(
        this.say.ele("lang", attributes, words)
      );
    }
    /**
     * Adding a Pause Between Paragraphs in <Say>
     *
     * @function p
     * @memberof Say#
     */
    p(words: string): VoiceResponse.SsmlP;
    p(attributes: object, words: string): VoiceResponse.SsmlP;
    p(attributes: object | string, words?: string): VoiceResponse.SsmlP {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlP(this.say.ele("p", attributes, words));
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof Say#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.say.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof Say#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.say.ele("prosody", attributes, words)
      );
    }
    /**
     * Adding A Pause Between Sentences in <Say>
     *
     * @function s
     * @memberof Say#
     */
    s(words: string): VoiceResponse.SsmlS;
    s(attributes: object, words: string): VoiceResponse.SsmlS;
    s(attributes: object | string, words?: string): VoiceResponse.SsmlS {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlS(this.say.ele("s", attributes, words));
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof Say#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.say.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof Say#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(this.say.ele("sub", attributes, words));
    }
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     *
     * @function w
     * @memberof Say#
     */
    w(words: string): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes,
      words: string
    ): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes | string,
      words?: string
    ): VoiceResponse.SsmlW {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlW(this.say.ele("w", attributes, words));
    }
  }

  export class Sim extends TwiML {
    sim: XMLElement;
    /**
     * <Sim> TwiML Noun
     */
    constructor(sim: XMLElement) {
      super();
      this.sim = sim;
      this._propertyName = "sim";
    }
  }

  export class Sip extends TwiML {
    sip: XMLElement;
    /**
     * <Sip> TwiML Noun
     */
    constructor(sip: XMLElement) {
      super();
      this.sip = sip;
      this._propertyName = "sip";
    }
  }

  export class Siprec extends TwiML {
    siprec: XMLElement;
    /**
     * <Siprec> TwiML Noun
     */
    constructor(siprec: XMLElement) {
      super();
      this.siprec = siprec;
      this._propertyName = "siprec";
    }
    /**
     * <Parameter> TwiML Noun
     *
     * @function parameter
     * @memberof Siprec#
     */
    parameter(
      attributes?: VoiceResponse.ParameterAttributes
    ): VoiceResponse.Parameter {
      return new VoiceResponse.Parameter(
        this.siprec.ele("Parameter", attributes)
      );
    }
  }

  export class Sms extends TwiML {
    sms: XMLElement;
    /**
     * <Sms> TwiML Noun
     */
    constructor(sms: XMLElement) {
      super();
      this.sms = sms;
      this._propertyName = "sms";
    }
  }

  export class SsmlBreak extends TwiML {
    ssmlBreak: XMLElement;
    /**
     * Adding a Pause in <Say>
     */
    constructor(ssmlBreak: XMLElement) {
      super();
      this.ssmlBreak = ssmlBreak;
      this._propertyName = "ssmlBreak";
    }
  }

  export class SsmlEmphasis extends TwiML {
    ssmlEmphasis: XMLElement;
    /**
     * Emphasizing Words in <Say>
     */
    constructor(ssmlEmphasis: XMLElement) {
      super();
      this.ssmlEmphasis = ssmlEmphasis;
      this._propertyName = "ssmlEmphasis";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof SsmlEmphasis#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(
        this.ssmlEmphasis.ele("break", attributes)
      );
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof SsmlEmphasis#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.ssmlEmphasis.ele("emphasis", attributes, words)
      );
    }
    /**
     * Specifying Another Language for Specific Words in <Say>
     *
     * @function lang
     * @memberof SsmlEmphasis#
     */
    lang(words: string): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes,
      words: string
    ): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes | string,
      words?: string
    ): VoiceResponse.SsmlLang {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlLang(
        this.ssmlEmphasis.ele("lang", attributes, words)
      );
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof SsmlEmphasis#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.ssmlEmphasis.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof SsmlEmphasis#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.ssmlEmphasis.ele("prosody", attributes, words)
      );
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof SsmlEmphasis#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.ssmlEmphasis.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof SsmlEmphasis#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(
        this.ssmlEmphasis.ele("sub", attributes, words)
      );
    }
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     *
     * @function w
     * @memberof SsmlEmphasis#
     */
    w(words: string): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes,
      words: string
    ): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes | string,
      words?: string
    ): VoiceResponse.SsmlW {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlW(
        this.ssmlEmphasis.ele("w", attributes, words)
      );
    }
  }

  export class SsmlLang extends TwiML {
    ssmlLang: XMLElement;
    /**
     * Specifying Another Language for Specific Words in <Say>
     */
    constructor(ssmlLang: XMLElement) {
      super();
      this.ssmlLang = ssmlLang;
      this._propertyName = "ssmlLang";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof SsmlLang#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(
        this.ssmlLang.ele("break", attributes)
      );
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof SsmlLang#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.ssmlLang.ele("emphasis", attributes, words)
      );
    }
    /**
     * Specifying Another Language for Specific Words in <Say>
     *
     * @function lang
     * @memberof SsmlLang#
     */
    lang(words: string): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes,
      words: string
    ): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes | string,
      words?: string
    ): VoiceResponse.SsmlLang {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlLang(
        this.ssmlLang.ele("lang", attributes, words)
      );
    }
    /**
     * Adding a Pause Between Paragraphs in <Say>
     *
     * @function p
     * @memberof SsmlLang#
     */
    p(words: string): VoiceResponse.SsmlP;
    p(attributes: object, words: string): VoiceResponse.SsmlP;
    p(attributes: object | string, words?: string): VoiceResponse.SsmlP {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlP(this.ssmlLang.ele("p", attributes, words));
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof SsmlLang#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.ssmlLang.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof SsmlLang#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.ssmlLang.ele("prosody", attributes, words)
      );
    }
    /**
     * Adding A Pause Between Sentences in <Say>
     *
     * @function s
     * @memberof SsmlLang#
     */
    s(words: string): VoiceResponse.SsmlS;
    s(attributes: object, words: string): VoiceResponse.SsmlS;
    s(attributes: object | string, words?: string): VoiceResponse.SsmlS {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlS(this.ssmlLang.ele("s", attributes, words));
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof SsmlLang#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.ssmlLang.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof SsmlLang#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(
        this.ssmlLang.ele("sub", attributes, words)
      );
    }
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     *
     * @function w
     * @memberof SsmlLang#
     */
    w(words: string): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes,
      words: string
    ): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes | string,
      words?: string
    ): VoiceResponse.SsmlW {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlW(this.ssmlLang.ele("w", attributes, words));
    }
  }

  export class SsmlP extends TwiML {
    ssmlP: XMLElement;
    /**
     * Adding a Pause Between Paragraphs in <Say>
     */
    constructor(ssmlP: XMLElement) {
      super();
      this.ssmlP = ssmlP;
      this._propertyName = "ssmlP";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof SsmlP#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(this.ssmlP.ele("break", attributes));
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof SsmlP#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.ssmlP.ele("emphasis", attributes, words)
      );
    }
    /**
     * Specifying Another Language for Specific Words in <Say>
     *
     * @function lang
     * @memberof SsmlP#
     */
    lang(words: string): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes,
      words: string
    ): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes | string,
      words?: string
    ): VoiceResponse.SsmlLang {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlLang(
        this.ssmlP.ele("lang", attributes, words)
      );
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof SsmlP#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.ssmlP.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof SsmlP#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.ssmlP.ele("prosody", attributes, words)
      );
    }
    /**
     * Adding A Pause Between Sentences in <Say>
     *
     * @function s
     * @memberof SsmlP#
     */
    s(words: string): VoiceResponse.SsmlS;
    s(attributes: object, words: string): VoiceResponse.SsmlS;
    s(attributes: object | string, words?: string): VoiceResponse.SsmlS {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlS(this.ssmlP.ele("s", attributes, words));
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof SsmlP#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.ssmlP.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof SsmlP#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(
        this.ssmlP.ele("sub", attributes, words)
      );
    }
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     *
     * @function w
     * @memberof SsmlP#
     */
    w(words: string): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes,
      words: string
    ): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes | string,
      words?: string
    ): VoiceResponse.SsmlW {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlW(this.ssmlP.ele("w", attributes, words));
    }
  }

  export class SsmlPhoneme extends TwiML {
    ssmlPhoneme: XMLElement;
    /**
     * Using Phonetic Pronunciation in <Say>
     */
    constructor(ssmlPhoneme: XMLElement) {
      super();
      this.ssmlPhoneme = ssmlPhoneme;
      this._propertyName = "ssmlPhoneme";
    }
  }

  export class SsmlProsody extends TwiML {
    ssmlProsody: XMLElement;
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     */
    constructor(ssmlProsody: XMLElement) {
      super();
      this.ssmlProsody = ssmlProsody;
      this._propertyName = "ssmlProsody";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof SsmlProsody#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(
        this.ssmlProsody.ele("break", attributes)
      );
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof SsmlProsody#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.ssmlProsody.ele("emphasis", attributes, words)
      );
    }
    /**
     * Specifying Another Language for Specific Words in <Say>
     *
     * @function lang
     * @memberof SsmlProsody#
     */
    lang(words: string): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes,
      words: string
    ): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes | string,
      words?: string
    ): VoiceResponse.SsmlLang {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlLang(
        this.ssmlProsody.ele("lang", attributes, words)
      );
    }
    /**
     * Adding a Pause Between Paragraphs in <Say>
     *
     * @function p
     * @memberof SsmlProsody#
     */
    p(words: string): VoiceResponse.SsmlP;
    p(attributes: object, words: string): VoiceResponse.SsmlP;
    p(attributes: object | string, words?: string): VoiceResponse.SsmlP {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlP(
        this.ssmlProsody.ele("p", attributes, words)
      );
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof SsmlProsody#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.ssmlProsody.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof SsmlProsody#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.ssmlProsody.ele("prosody", attributes, words)
      );
    }
    /**
     * Adding A Pause Between Sentences in <Say>
     *
     * @function s
     * @memberof SsmlProsody#
     */
    s(words: string): VoiceResponse.SsmlS;
    s(attributes: object, words: string): VoiceResponse.SsmlS;
    s(attributes: object | string, words?: string): VoiceResponse.SsmlS {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlS(
        this.ssmlProsody.ele("s", attributes, words)
      );
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof SsmlProsody#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.ssmlProsody.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof SsmlProsody#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(
        this.ssmlProsody.ele("sub", attributes, words)
      );
    }
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     *
     * @function w
     * @memberof SsmlProsody#
     */
    w(words: string): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes,
      words: string
    ): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes | string,
      words?: string
    ): VoiceResponse.SsmlW {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlW(
        this.ssmlProsody.ele("w", attributes, words)
      );
    }
  }

  export class SsmlS extends TwiML {
    ssmlS: XMLElement;
    /**
     * Adding A Pause Between Sentences in <Say>
     */
    constructor(ssmlS: XMLElement) {
      super();
      this.ssmlS = ssmlS;
      this._propertyName = "ssmlS";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof SsmlS#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(this.ssmlS.ele("break", attributes));
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof SsmlS#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.ssmlS.ele("emphasis", attributes, words)
      );
    }
    /**
     * Specifying Another Language for Specific Words in <Say>
     *
     * @function lang
     * @memberof SsmlS#
     */
    lang(words: string): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes,
      words: string
    ): VoiceResponse.SsmlLang;
    lang(
      attributes: VoiceResponse.SsmlLangAttributes | string,
      words?: string
    ): VoiceResponse.SsmlLang {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlLang(
        this.ssmlS.ele("lang", attributes, words)
      );
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof SsmlS#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.ssmlS.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof SsmlS#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.ssmlS.ele("prosody", attributes, words)
      );
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof SsmlS#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.ssmlS.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof SsmlS#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(
        this.ssmlS.ele("sub", attributes, words)
      );
    }
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     *
     * @function w
     * @memberof SsmlS#
     */
    w(words: string): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes,
      words: string
    ): VoiceResponse.SsmlW;
    w(
      attributes: VoiceResponse.SsmlWAttributes | string,
      words?: string
    ): VoiceResponse.SsmlW {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlW(this.ssmlS.ele("w", attributes, words));
    }
  }

  export class SsmlSayAs extends TwiML {
    ssmlSayAs: XMLElement;
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     */
    constructor(ssmlSayAs: XMLElement) {
      super();
      this.ssmlSayAs = ssmlSayAs;
      this._propertyName = "ssmlSayAs";
    }
  }

  export class SsmlSub extends TwiML {
    ssmlSub: XMLElement;
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     */
    constructor(ssmlSub: XMLElement) {
      super();
      this.ssmlSub = ssmlSub;
      this._propertyName = "ssmlSub";
    }
  }

  export class SsmlW extends TwiML {
    ssmlW: XMLElement;
    /**
     * Improving Pronunciation by Specifying Parts of Speech in <Say>
     */
    constructor(ssmlW: XMLElement) {
      super();
      this.ssmlW = ssmlW;
      this._propertyName = "ssmlW";
    }
    /**
     * Adding a Pause in <Say>
     *
     * @function break_
     * @memberof SsmlW#
     */
    break_(
      attributes?: VoiceResponse.SsmlBreakAttributes
    ): VoiceResponse.SsmlBreak {
      return new VoiceResponse.SsmlBreak(this.ssmlW.ele("break", attributes));
    }
    /**
     * Emphasizing Words in <Say>
     *
     * @function emphasis
     * @memberof SsmlW#
     */
    emphasis(words: string): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes,
      words: string
    ): VoiceResponse.SsmlEmphasis;
    emphasis(
      attributes: VoiceResponse.SsmlEmphasisAttributes | string,
      words?: string
    ): VoiceResponse.SsmlEmphasis {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlEmphasis(
        this.ssmlW.ele("emphasis", attributes, words)
      );
    }
    /**
     * Using Phonetic Pronunciation in <Say>
     *
     * @function phoneme
     * @memberof SsmlW#
     */
    phoneme(words: string): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes,
      words: string
    ): VoiceResponse.SsmlPhoneme;
    phoneme(
      attributes: VoiceResponse.SsmlPhonemeAttributes | string,
      words?: string
    ): VoiceResponse.SsmlPhoneme {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlPhoneme(
        this.ssmlW.ele("phoneme", attributes, words)
      );
    }
    /**
     * Controling Volume, Speaking Rate, and Pitch in <Say>
     *
     * @function prosody
     * @memberof SsmlW#
     */
    prosody(words: string): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes,
      words: string
    ): VoiceResponse.SsmlProsody;
    prosody(
      attributes: VoiceResponse.SsmlProsodyAttributes | string,
      words?: string
    ): VoiceResponse.SsmlProsody {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlProsody(
        this.ssmlW.ele("prosody", attributes, words)
      );
    }
    /**
     * Controlling How Special Types of Words Are Spoken in <Say>
     *
     * @function sayAs
     * @memberof SsmlW#
     */
    sayAs(words: string): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes,
      words: string
    ): VoiceResponse.SsmlSayAs;
    sayAs(
      attributes: VoiceResponse.SsmlSayAsAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSayAs {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSayAs(
        this.ssmlW.ele("say-as", attributes, words)
      );
    }
    /**
     * Pronouncing Acronyms and Abbreviations in <Say>
     *
     * @function sub
     * @memberof SsmlW#
     */
    sub(words: string): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes,
      words: string
    ): VoiceResponse.SsmlSub;
    sub(
      attributes: VoiceResponse.SsmlSubAttributes | string,
      words?: string
    ): VoiceResponse.SsmlSub {
      if (typeof attributes === "string") {
        words = attributes;
        attributes = {};
      }
      return new VoiceResponse.SsmlSub(
        this.ssmlW.ele("sub", attributes, words)
      );
    }
  }

  export class Start extends TwiML {
    start: XMLElement;
    /**
     * <Start> TwiML Verb
     */
    constructor(start: XMLElement) {
      super();
      this.start = start;
      this._propertyName = "start";
    }
    /**
     * <Siprec> TwiML Noun
     *
     * @function siprec
     * @memberof Start#
     */
    siprec(attributes?: VoiceResponse.SiprecAttributes): VoiceResponse.Siprec {
      return new VoiceResponse.Siprec(this.start.ele("Siprec", attributes));
    }
    /**
     * <Stream> TwiML Noun
     *
     * @function stream
     * @memberof Start#
     */
    stream(attributes?: VoiceResponse.StreamAttributes): VoiceResponse.Stream {
      return new VoiceResponse.Stream(this.start.ele("Stream", attributes));
    }
  }

  export class Stop extends TwiML {
    stop: XMLElement;
    /**
     * <Stop> TwiML Verb
     */
    constructor(stop: XMLElement) {
      super();
      this.stop = stop;
      this._propertyName = "stop";
    }
    /**
     * <Siprec> TwiML Noun
     *
     * @function siprec
     * @memberof Stop#
     */
    siprec(attributes?: VoiceResponse.SiprecAttributes): VoiceResponse.Siprec {
      return new VoiceResponse.Siprec(this.stop.ele("Siprec", attributes));
    }
    /**
     * <Stream> TwiML Noun
     *
     * @function stream
     * @memberof Stop#
     */
    stream(attributes?: VoiceResponse.StreamAttributes): VoiceResponse.Stream {
      return new VoiceResponse.Stream(this.stop.ele("Stream", attributes));
    }
  }

  export class Stream extends TwiML {
    stream: XMLElement;
    /**
     * <Stream> TwiML Noun
     */
    constructor(stream: XMLElement) {
      super();
      this.stream = stream;
      this._propertyName = "stream";
    }
    /**
     * <Parameter> TwiML Noun
     *
     * @function parameter
     * @memberof Stream#
     */
    parameter(
      attributes?: VoiceResponse.ParameterAttributes
    ): VoiceResponse.Parameter {
      return new VoiceResponse.Parameter(
        this.stream.ele("Parameter", attributes)
      );
    }
  }

  export class Task extends TwiML {
    task: XMLElement;
    /**
     * <Task> TwiML Noun
     */
    constructor(task: XMLElement) {
      super();
      this.task = task;
      this._propertyName = "task";
    }
  }

  export class VirtualAgent extends TwiML {
    virtualAgent: XMLElement;
    /**
     * <VirtualAgent> TwiML Noun
     */
    constructor(virtualAgent: XMLElement) {
      super();
      this.virtualAgent = virtualAgent;
      this._propertyName = "virtualAgent";
    }
    /**
     * <Config> TwiML Noun
     *
     * @function config
     * @memberof VirtualAgent#
     */
    config(attributes?: VoiceResponse.ConfigAttributes): VoiceResponse.Config {
      return new VoiceResponse.Config(
        this.virtualAgent.ele("Config", attributes)
      );
    }
    /**
     * <Parameter> TwiML Noun
     *
     * @function parameter
     * @memberof VirtualAgent#
     */
    parameter(
      attributes?: VoiceResponse.ParameterAttributes
    ): VoiceResponse.Parameter {
      return new VoiceResponse.Parameter(
        this.virtualAgent.ele("Parameter", attributes)
      );
    }
  }
}

export default VoiceResponse;
