/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * Options to pass to fetch a ConfiguredPluginInstance
 */
export interface ConfiguredPluginContextFetchOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
}
/**
 * Options to pass to each
 */
export interface ConfiguredPluginListInstanceEachOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (
    item: ConfiguredPluginInstance,
    done: (err?: Error) => void
  ) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface ConfiguredPluginListInstanceOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface ConfiguredPluginListInstancePageOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface ConfiguredPluginContext {
  /**
   * Fetch a ConfiguredPluginInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfiguredPluginInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ConfiguredPluginInstance) => any
  ): Promise<ConfiguredPluginInstance>;
  /**
   * Fetch a ConfiguredPluginInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfiguredPluginInstance
   */
  fetch(
    params: ConfiguredPluginContextFetchOptions,
    callback?: (error: Error | null, item?: ConfiguredPluginInstance) => any
  ): Promise<ConfiguredPluginInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ConfiguredPluginContextSolution {
  configurationSid: string;
  pluginSid: string;
}

export class ConfiguredPluginContextImpl implements ConfiguredPluginContext {
  protected _solution: ConfiguredPluginContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V1,
    configurationSid: string,
    pluginSid: string
  ) {
    if (!isValidPathParam(configurationSid)) {
      throw new Error("Parameter 'configurationSid' is not valid.");
    }

    if (!isValidPathParam(pluginSid)) {
      throw new Error("Parameter 'pluginSid' is not valid.");
    }

    this._solution = { configurationSid, pluginSid };
    this._uri = `/PluginService/Configurations/${configurationSid}/Plugins/${pluginSid}`;
  }

  fetch(
    params?:
      | ConfiguredPluginContextFetchOptions
      | ((error: Error | null, item?: ConfiguredPluginInstance) => any),
    callback?: (error: Error | null, item?: ConfiguredPluginInstance) => any
  ): Promise<ConfiguredPluginInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    const headers: any = {};
    if (params["flexMetadata"] !== undefined)
      headers["Flex-Metadata"] = params["flexMetadata"];

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ConfiguredPluginInstance(
          operationVersion,
          payload,
          instance._solution.configurationSid,
          instance._solution.pluginSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ConfiguredPluginPayload extends TwilioResponsePayload {
  plugins: ConfiguredPluginResource[];
}

interface ConfiguredPluginResource {
  account_sid: string;
  configuration_sid: string;
  plugin_sid: string;
  plugin_version_sid: string;
  phase: number;
  plugin_url: string;
  unique_name: string;
  friendly_name: string;
  description: string;
  plugin_archived: boolean;
  version: string;
  changelog: string;
  plugin_version_archived: boolean;
  private: boolean;
  date_created: Date;
  url: string;
}

export class ConfiguredPluginInstance {
  protected _solution: ConfiguredPluginContextSolution;
  protected _context?: ConfiguredPluginContext;

  constructor(
    protected _version: V1,
    payload: ConfiguredPluginResource,
    configurationSid: string,
    pluginSid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.configurationSid = payload.configuration_sid;
    this.pluginSid = payload.plugin_sid;
    this.pluginVersionSid = payload.plugin_version_sid;
    this.phase = deserialize.integer(payload.phase);
    this.pluginUrl = payload.plugin_url;
    this.uniqueName = payload.unique_name;
    this.friendlyName = payload.friendly_name;
    this.description = payload.description;
    this.pluginArchived = payload.plugin_archived;
    this.version = payload.version;
    this.changelog = payload.changelog;
    this.pluginVersionArchived = payload.plugin_version_archived;
    this._private = payload.private;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.url = payload.url;

    this._solution = {
      configurationSid,
      pluginSid: pluginSid || this.pluginSid,
    };
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Flex Plugin resource is installed for.
   */
  accountSid: string;
  /**
   * The SID of the Flex Plugin Configuration that this Flex Plugin belongs to.
   */
  configurationSid: string;
  /**
   * The SID of the Flex Plugin.
   */
  pluginSid: string;
  /**
   * The SID of the Flex Plugin Version.
   */
  pluginVersionSid: string;
  /**
   * The phase this Flex Plugin would initialize at runtime.
   */
  phase: number;
  /**
   * The URL of where the Flex Plugin Version JavaScript bundle is hosted on.
   */
  pluginUrl: string;
  /**
   * The name that uniquely identifies this Flex Plugin resource.
   */
  uniqueName: string;
  /**
   * The friendly name of this Flex Plugin resource.
   */
  friendlyName: string;
  /**
   * A descriptive string that you create to describe the plugin resource. It can be up to 500 characters long
   */
  description: string;
  /**
   * Whether the Flex Plugin is archived. The default value is false.
   */
  pluginArchived: boolean;
  /**
   * The latest version of this Flex Plugin Version.
   */
  version: string;
  /**
   * A changelog that describes the changes this Flex Plugin Version brings.
   */
  changelog: string;
  /**
   * Whether the Flex Plugin Version is archived. The default value is false.
   */
  pluginVersionArchived: boolean;
  /**
   * Whether to validate the request is authorized to access the Flex Plugin Version.
   */
  _private: boolean;
  /**
   * The date and time in GMT when the Flex Plugin was installed specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The absolute URL of the Flex Plugin resource.
   */
  url: string;

  private get _proxy(): ConfiguredPluginContext {
    this._context =
      this._context ||
      new ConfiguredPluginContextImpl(
        this._version,
        this._solution.configurationSid,
        this._solution.pluginSid
      );
    return this._context;
  }

  /**
   * Fetch a ConfiguredPluginInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfiguredPluginInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ConfiguredPluginInstance) => any
  ): Promise<ConfiguredPluginInstance>;
  /**
   * Fetch a ConfiguredPluginInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfiguredPluginInstance
   */
  fetch(
    params: ConfiguredPluginContextFetchOptions,
    callback?: (error: Error | null, item?: ConfiguredPluginInstance) => any
  ): Promise<ConfiguredPluginInstance>;

  fetch(
    params?: any,
    callback?: (error: Error | null, item?: ConfiguredPluginInstance) => any
  ): Promise<ConfiguredPluginInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      configurationSid: this.configurationSid,
      pluginSid: this.pluginSid,
      pluginVersionSid: this.pluginVersionSid,
      phase: this.phase,
      pluginUrl: this.pluginUrl,
      uniqueName: this.uniqueName,
      friendlyName: this.friendlyName,
      description: this.description,
      pluginArchived: this.pluginArchived,
      version: this.version,
      changelog: this.changelog,
      pluginVersionArchived: this.pluginVersionArchived,
      _private: this._private,
      dateCreated: this.dateCreated,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ConfiguredPluginSolution {
  configurationSid: string;
}

export interface ConfiguredPluginListInstance {
  _version: V1;
  _solution: ConfiguredPluginSolution;
  _uri: string;

  (pluginSid: string): ConfiguredPluginContext;
  get(pluginSid: string): ConfiguredPluginContext;

  /**
   * Streams ConfiguredPluginInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ConfiguredPluginListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (
      item: ConfiguredPluginInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  each(
    params: ConfiguredPluginListInstanceEachOptions,
    callback?: (
      item: ConfiguredPluginInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of ConfiguredPluginInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ConfiguredPluginPage) => any
  ): Promise<ConfiguredPluginPage>;
  /**
   * Lists ConfiguredPluginInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ConfiguredPluginListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: ConfiguredPluginInstance[]) => any
  ): Promise<ConfiguredPluginInstance[]>;
  list(
    params: ConfiguredPluginListInstanceOptions,
    callback?: (error: Error | null, items: ConfiguredPluginInstance[]) => any
  ): Promise<ConfiguredPluginInstance[]>;
  /**
   * Retrieve a single page of ConfiguredPluginInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ConfiguredPluginListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: ConfiguredPluginPage) => any
  ): Promise<ConfiguredPluginPage>;
  page(
    params: ConfiguredPluginListInstancePageOptions,
    callback?: (error: Error | null, items: ConfiguredPluginPage) => any
  ): Promise<ConfiguredPluginPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ConfiguredPluginListInstance(
  version: V1,
  configurationSid: string
): ConfiguredPluginListInstance {
  if (!isValidPathParam(configurationSid)) {
    throw new Error("Parameter 'configurationSid' is not valid.");
  }

  const instance = ((pluginSid) =>
    instance.get(pluginSid)) as ConfiguredPluginListInstance;

  instance.get = function get(pluginSid): ConfiguredPluginContext {
    return new ConfiguredPluginContextImpl(
      version,
      configurationSid,
      pluginSid
    );
  };

  instance._version = version;
  instance._solution = { configurationSid };
  instance._uri = `/PluginService/Configurations/${configurationSid}/Plugins`;

  instance.page = function page(
    params?:
      | ConfiguredPluginListInstancePageOptions
      | ((error: Error | null, items: ConfiguredPluginPage) => any),
    callback?: (error: Error | null, items: ConfiguredPluginPage) => any
  ): Promise<ConfiguredPluginPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    if (params["flexMetadata"] !== undefined)
      headers["Flex-Metadata"] = params["flexMetadata"];

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ConfiguredPluginPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ConfiguredPluginPage) => any
  ): Promise<ConfiguredPluginPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new ConfiguredPluginPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class ConfiguredPluginPage extends Page<
  V1,
  ConfiguredPluginPayload,
  ConfiguredPluginResource,
  ConfiguredPluginInstance
> {
  /**
   * Initialize the ConfiguredPluginPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: ConfiguredPluginSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of ConfiguredPluginInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ConfiguredPluginResource): ConfiguredPluginInstance {
    return new ConfiguredPluginInstance(
      this._version,
      payload,
      this._solution.configurationSid
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
