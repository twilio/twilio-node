/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { ConfiguredPluginListInstance } from "./pluginConfiguration/configuredPlugin";

/**
 * Options to pass to fetch a PluginConfigurationInstance
 */
export interface PluginConfigurationContextFetchOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
}

/**
 * Options to pass to create a PluginConfigurationInstance
 */
export interface PluginConfigurationListInstanceCreateOptions {
  /** The Flex Plugin Configuration\\\'s name. */
  name: string;
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** A list of objects that describe the plugin versions included in the configuration. Each object contains the sid of the plugin version. */
  plugins?: Array<any>;
  /** The Flex Plugin Configuration\\\'s description. */
  description?: string;
}
/**
 * Options to pass to each
 */
export interface PluginConfigurationListInstanceEachOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (
    item: PluginConfigurationInstance,
    done: (err?: Error) => void
  ) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface PluginConfigurationListInstanceOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface PluginConfigurationListInstancePageOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface PluginConfigurationContext {
  plugins: ConfiguredPluginListInstance;

  /**
   * Fetch a PluginConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginConfigurationInstance
   */
  fetch(
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance>;
  /**
   * Fetch a PluginConfigurationInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginConfigurationInstance
   */
  fetch(
    params: PluginConfigurationContextFetchOptions,
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface PluginConfigurationContextSolution {
  sid: string;
}

export class PluginConfigurationContextImpl
  implements PluginConfigurationContext
{
  protected _solution: PluginConfigurationContextSolution;
  protected _uri: string;

  protected _plugins?: ConfiguredPluginListInstance;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/PluginService/Configurations/${sid}`;
  }

  get plugins(): ConfiguredPluginListInstance {
    this._plugins =
      this._plugins ||
      ConfiguredPluginListInstance(this._version, this._solution.sid);
    return this._plugins;
  }

  fetch(
    params?:
      | PluginConfigurationContextFetchOptions
      | ((error: Error | null, item?: PluginConfigurationInstance) => any),
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    const headers: any = {};
    if (params["flexMetadata"] !== undefined)
      headers["Flex-Metadata"] = params["flexMetadata"];

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PluginConfigurationInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface PluginConfigurationPayload extends TwilioResponsePayload {
  configurations: PluginConfigurationResource[];
}

interface PluginConfigurationResource {
  sid: string;
  account_sid: string;
  name: string;
  description: string;
  archived: boolean;
  date_created: Date;
  url: string;
  links: Record<string, string>;
}

export class PluginConfigurationInstance {
  protected _solution: PluginConfigurationContextSolution;
  protected _context?: PluginConfigurationContext;

  constructor(
    protected _version: V1,
    payload: PluginConfigurationResource,
    sid?: string
  ) {
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.name = payload.name;
    this.description = payload.description;
    this.archived = payload.archived;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.url = payload.url;
    this.links = payload.links;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * The unique string that we created to identify the Flex Plugin Configuration resource.
   */
  sid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Plugin Configuration resource and owns this resource.
   */
  accountSid: string;
  /**
   * The name of this Flex Plugin Configuration.
   */
  name: string;
  /**
   * The description of the Flex Plugin Configuration resource.
   */
  description: string;
  /**
   * Whether the Flex Plugin Configuration is archived. The default value is false.
   */
  archived: boolean;
  /**
   * The date and time in GMT when the Flex Plugin Configuration was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The absolute URL of the Flex Plugin Configuration resource.
   */
  url: string;
  links: Record<string, string>;

  private get _proxy(): PluginConfigurationContext {
    this._context =
      this._context ||
      new PluginConfigurationContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a PluginConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginConfigurationInstance
   */
  fetch(
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance>;
  /**
   * Fetch a PluginConfigurationInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginConfigurationInstance
   */
  fetch(
    params: PluginConfigurationContextFetchOptions,
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance>;

  fetch(
    params?: any,
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Access the plugins.
   */
  plugins(): ConfiguredPluginListInstance {
    return this._proxy.plugins;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      name: this.name,
      description: this.description,
      archived: this.archived,
      dateCreated: this.dateCreated,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface PluginConfigurationSolution {}

export interface PluginConfigurationListInstance {
  _version: V1;
  _solution: PluginConfigurationSolution;
  _uri: string;

  (sid: string): PluginConfigurationContext;
  get(sid: string): PluginConfigurationContext;

  /**
   * Create a PluginConfigurationInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginConfigurationInstance
   */
  create(
    params: PluginConfigurationListInstanceCreateOptions,
    callback?: (error: Error | null, item?: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance>;

  /**
   * Streams PluginConfigurationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PluginConfigurationListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (
      item: PluginConfigurationInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  each(
    params: PluginConfigurationListInstanceEachOptions,
    callback?: (
      item: PluginConfigurationInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of PluginConfigurationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: PluginConfigurationPage) => any
  ): Promise<PluginConfigurationPage>;
  /**
   * Lists PluginConfigurationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PluginConfigurationListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (
      error: Error | null,
      items: PluginConfigurationInstance[]
    ) => any
  ): Promise<PluginConfigurationInstance[]>;
  list(
    params: PluginConfigurationListInstanceOptions,
    callback?: (
      error: Error | null,
      items: PluginConfigurationInstance[]
    ) => any
  ): Promise<PluginConfigurationInstance[]>;
  /**
   * Retrieve a single page of PluginConfigurationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PluginConfigurationListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: PluginConfigurationPage) => any
  ): Promise<PluginConfigurationPage>;
  page(
    params: PluginConfigurationListInstancePageOptions,
    callback?: (error: Error | null, items: PluginConfigurationPage) => any
  ): Promise<PluginConfigurationPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PluginConfigurationListInstance(
  version: V1
): PluginConfigurationListInstance {
  const instance = ((sid) =>
    instance.get(sid)) as PluginConfigurationListInstance;

  instance.get = function get(sid): PluginConfigurationContext {
    return new PluginConfigurationContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/PluginService/Configurations`;

  instance.create = function create(
    params: PluginConfigurationListInstanceCreateOptions,
    callback?: (error: Error | null, items: PluginConfigurationInstance) => any
  ): Promise<PluginConfigurationInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["name"] === null || params["name"] === undefined) {
      throw new Error("Required parameter \"params['name']\" missing.");
    }

    let data: any = {};

    data["Name"] = params["name"];
    if (params["plugins"] !== undefined)
      data["Plugins"] = serialize.map(params["plugins"], (e: any) =>
        serialize.object(e)
      );
    if (params["description"] !== undefined)
      data["Description"] = params["description"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    if (params["flexMetadata"] !== undefined)
      headers["Flex-Metadata"] = params["flexMetadata"];

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new PluginConfigurationInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | PluginConfigurationListInstancePageOptions
      | ((error: Error | null, items: PluginConfigurationPage) => any),
    callback?: (error: Error | null, items: PluginConfigurationPage) => any
  ): Promise<PluginConfigurationPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    if (params["flexMetadata"] !== undefined)
      headers["Flex-Metadata"] = params["flexMetadata"];

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PluginConfigurationPage(
          operationVersion,
          payload,
          instance._solution
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: PluginConfigurationPage) => any
  ): Promise<PluginConfigurationPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new PluginConfigurationPage(
          instance._version,
          payload,
          instance._solution
        )
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class PluginConfigurationPage extends Page<
  V1,
  PluginConfigurationPayload,
  PluginConfigurationResource,
  PluginConfigurationInstance
> {
  /**
   * Initialize the PluginConfigurationPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: PluginConfigurationSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of PluginConfigurationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(
    payload: PluginConfigurationResource
  ): PluginConfigurationInstance {
    return new PluginConfigurationInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
