/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to remove a InsightsQuestionnairesCategoryInstance
 */
export interface InsightsQuestionnairesCategoryContextRemoveOptions {
  /** The Token HTTP request header */
  token?: string;
}

/**
 * Options to pass to update a InsightsQuestionnairesCategoryInstance
 */
export interface InsightsQuestionnairesCategoryContextUpdateOptions {
  /** The name of this category. */
  name: string;
  /** The Token HTTP request header */
  token?: string;
}

/**
 * Options to pass to create a InsightsQuestionnairesCategoryInstance
 */
export interface InsightsQuestionnairesCategoryListInstanceCreateOptions {
  /** The name of this category. */
  name: string;
  /** The Token HTTP request header */
  token?: string;
}

export interface InsightsQuestionnairesCategoryContext {
  /**
   * Remove a InsightsQuestionnairesCategoryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;
  /**
   * Remove a InsightsQuestionnairesCategoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InsightsQuestionnairesCategoryInstance
   */
  remove(
    params: InsightsQuestionnairesCategoryContextRemoveOptions,
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Update a InsightsQuestionnairesCategoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InsightsQuestionnairesCategoryInstance
   */
  update(
    params: InsightsQuestionnairesCategoryContextUpdateOptions,
    callback?: (
      error: Error | null,
      item?: InsightsQuestionnairesCategoryInstance
    ) => any
  ): Promise<InsightsQuestionnairesCategoryInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface InsightsQuestionnairesCategoryContextSolution {
  categoryId: string;
}

export class InsightsQuestionnairesCategoryContextImpl
  implements InsightsQuestionnairesCategoryContext
{
  protected _solution: InsightsQuestionnairesCategoryContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, categoryId: string) {
    if (!isValidPathParam(categoryId)) {
      throw new Error("Parameter 'categoryId' is not valid.");
    }

    this._solution = { categoryId };
    this._uri = `/Insights/QM/Categories/${categoryId}`;
  }

  remove(
    params?:
      | InsightsQuestionnairesCategoryContextRemoveOptions
      | ((error: Error | null, item?: boolean) => any),
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    const headers: any = {};
    if (params["token"] !== undefined) headers["Token"] = params["token"];

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
        params: data,
        headers,
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params: InsightsQuestionnairesCategoryContextUpdateOptions,
    callback?: (
      error: Error | null,
      item?: InsightsQuestionnairesCategoryInstance
    ) => any
  ): Promise<InsightsQuestionnairesCategoryInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["name"] === null || params["name"] === undefined) {
      throw new Error("Required parameter \"params['name']\" missing.");
    }

    let data: any = {};

    data["Name"] = params["name"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    if (params["token"] !== undefined) headers["Token"] = params["token"];

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new InsightsQuestionnairesCategoryInstance(
          operationVersion,
          payload,
          instance._solution.categoryId
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface InsightsQuestionnairesCategoryPayload
  extends InsightsQuestionnairesCategoryResource {}

interface InsightsQuestionnairesCategoryResource {
  account_sid: string;
  category_id: string;
  name: string;
  url: string;
}

export class InsightsQuestionnairesCategoryInstance {
  protected _solution: InsightsQuestionnairesCategoryContextSolution;
  protected _context?: InsightsQuestionnairesCategoryContext;

  constructor(
    protected _version: V1,
    payload: InsightsQuestionnairesCategoryResource,
    categoryId?: string
  ) {
    this.accountSid = payload.account_sid;
    this.categoryId = payload.category_id;
    this.name = payload.name;
    this.url = payload.url;

    this._solution = { categoryId: categoryId || this.categoryId };
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
   */
  accountSid: string;
  /**
   * The unique ID for the category
   */
  categoryId: string;
  /**
   * The name of this category.
   */
  name: string;
  url: string;

  private get _proxy(): InsightsQuestionnairesCategoryContext {
    this._context =
      this._context ||
      new InsightsQuestionnairesCategoryContextImpl(
        this._version,
        this._solution.categoryId
      );
    return this._context;
  }

  /**
   * Remove a InsightsQuestionnairesCategoryInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;
  /**
   * Remove a InsightsQuestionnairesCategoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InsightsQuestionnairesCategoryInstance
   */
  remove(
    params: InsightsQuestionnairesCategoryContextRemoveOptions,
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  remove(
    params?: any,
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(params, callback);
  }

  /**
   * Update a InsightsQuestionnairesCategoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InsightsQuestionnairesCategoryInstance
   */
  update(
    params: InsightsQuestionnairesCategoryContextUpdateOptions,
    callback?: (
      error: Error | null,
      item?: InsightsQuestionnairesCategoryInstance
    ) => any
  ): Promise<InsightsQuestionnairesCategoryInstance>;

  update(
    params?: any,
    callback?: (
      error: Error | null,
      item?: InsightsQuestionnairesCategoryInstance
    ) => any
  ): Promise<InsightsQuestionnairesCategoryInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      categoryId: this.categoryId,
      name: this.name,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface InsightsQuestionnairesCategorySolution {}

export interface InsightsQuestionnairesCategoryListInstance {
  _version: V1;
  _solution: InsightsQuestionnairesCategorySolution;
  _uri: string;

  (categoryId: string): InsightsQuestionnairesCategoryContext;
  get(categoryId: string): InsightsQuestionnairesCategoryContext;

  /**
   * Create a InsightsQuestionnairesCategoryInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InsightsQuestionnairesCategoryInstance
   */
  create(
    params: InsightsQuestionnairesCategoryListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      item?: InsightsQuestionnairesCategoryInstance
    ) => any
  ): Promise<InsightsQuestionnairesCategoryInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function InsightsQuestionnairesCategoryListInstance(
  version: V1
): InsightsQuestionnairesCategoryListInstance {
  const instance = ((categoryId) =>
    instance.get(categoryId)) as InsightsQuestionnairesCategoryListInstance;

  instance.get = function get(
    categoryId
  ): InsightsQuestionnairesCategoryContext {
    return new InsightsQuestionnairesCategoryContextImpl(version, categoryId);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Insights/QM/Categories`;

  instance.create = function create(
    params: InsightsQuestionnairesCategoryListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      items: InsightsQuestionnairesCategoryInstance
    ) => any
  ): Promise<InsightsQuestionnairesCategoryInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["name"] === null || params["name"] === undefined) {
      throw new Error("Required parameter \"params['name']\" missing.");
    }

    let data: any = {};

    data["Name"] = params["name"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    if (params["token"] !== undefined) headers["Token"] = params["token"];

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new InsightsQuestionnairesCategoryInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
