/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../../../V1";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");
import { isValidPathParam } from "../../../../../base/utility";

export type InteractionTransferTransferStatus =
  | "active"
  | "failed"
  | "completed";

export type InteractionTransferTransferType = "warm" | "cold" | "external";

/**
 * Options to pass to update a InteractionTransferInstance
 */
export interface InteractionTransferContextUpdateOptions {
  /**  */
  body?: object;
}

/**
 * Options to pass to create a InteractionTransferInstance
 */
export interface InteractionTransferListInstanceCreateOptions {
  /**  */
  body?: object;
}

export interface InteractionTransferContext {
  /**
   * Fetch a InteractionTransferInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  fetch(
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;

  /**
   * Update a InteractionTransferInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  update(
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;
  /**
   * Update a InteractionTransferInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  update(
    params: object,
    headers?: any,
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface InteractionTransferContextSolution {
  interactionSid: string;
  channelSid: string;
  sid: string;
}

export class InteractionTransferContextImpl
  implements InteractionTransferContext
{
  protected _solution: InteractionTransferContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V1,
    interactionSid: string,
    channelSid: string,
    sid: string
  ) {
    if (!isValidPathParam(interactionSid)) {
      throw new Error("Parameter 'interactionSid' is not valid.");
    }

    if (!isValidPathParam(channelSid)) {
      throw new Error("Parameter 'channelSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { interactionSid, channelSid, sid };
    this._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Transfers/${sid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new InteractionTransferInstance(
          operationVersion,
          payload,
          instance._solution.interactionSid,
          instance._solution.channelSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | object
      | ((error: Error | null, item?: InteractionTransferInstance) => any),
    headers?: any,
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new InteractionTransferInstance(
          operationVersion,
          payload,
          instance._solution.interactionSid,
          instance._solution.channelSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface InteractionTransferPayload extends InteractionTransferResource {}

interface InteractionTransferResource {
  sid: string;
  instance_sid: string;
  account_sid: string;
  interaction_sid: string;
  channel_sid: string;
  execution_sid: string;
  type: InteractionTransferTransferType;
  status: InteractionTransferTransferStatus;
  from: string;
  to: string;
  note_sid: string;
  summary_sid: string;
  date_created: Date;
  date_updated: Date;
  url: string;
}

export class InteractionTransferInstance {
  protected _solution: InteractionTransferContextSolution;
  protected _context?: InteractionTransferContext;

  constructor(
    protected _version: V1,
    payload: InteractionTransferResource,
    interactionSid: string,
    channelSid: string,
    sid?: string
  ) {
    this.sid = payload.sid;
    this.instanceSid = payload.instance_sid;
    this.accountSid = payload.account_sid;
    this.interactionSid = payload.interaction_sid;
    this.channelSid = payload.channel_sid;
    this.executionSid = payload.execution_sid;
    this.type = payload.type;
    this.status = payload.status;
    this.from = payload.from;
    this.to = payload.to;
    this.noteSid = payload.note_sid;
    this.summarySid = payload.summary_sid;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.url = payload.url;

    this._solution = { interactionSid, channelSid, sid: sid || this.sid };
  }

  /**
   * The unique string created by Twilio to identify an Interaction Transfer resource.
   */
  sid: string;
  /**
   * The SID of the Instance associated with the Transfer.
   */
  instanceSid: string;
  /**
   * The SID of the Account that created the Transfer.
   */
  accountSid: string;
  /**
   * The Interaction Sid for this channel.
   */
  interactionSid: string;
  /**
   * The Channel Sid for this Transfer.
   */
  channelSid: string;
  /**
   * The Execution SID associated with the Transfer.
   */
  executionSid: string;
  type: InteractionTransferTransferType;
  status: InteractionTransferTransferStatus;
  /**
   * The SID of the Participant initiating the Transfer.
   */
  from: string;
  /**
   * The SID of the Participant receiving the Transfer.
   */
  to: string;
  /**
   * The SID of the Note associated with the Transfer.
   */
  noteSid: string;
  /**
   * The SID of the Summary associated with the Transfer.
   */
  summarySid: string;
  /**
   * The date and time when the Transfer was created.
   */
  dateCreated: Date;
  /**
   * The date and time when the Transfer was last updated.
   */
  dateUpdated: Date;
  url: string;

  private get _proxy(): InteractionTransferContext {
    this._context =
      this._context ||
      new InteractionTransferContextImpl(
        this._version,
        this._solution.interactionSid,
        this._solution.channelSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Fetch a InteractionTransferInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  fetch(
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a InteractionTransferInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  update(
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;
  /**
   * Update a InteractionTransferInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  update(
    params: object,
    headers?: any,
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      instanceSid: this.instanceSid,
      accountSid: this.accountSid,
      interactionSid: this.interactionSid,
      channelSid: this.channelSid,
      executionSid: this.executionSid,
      type: this.type,
      status: this.status,
      from: this.from,
      to: this.to,
      noteSid: this.noteSid,
      summarySid: this.summarySid,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface InteractionTransferSolution {
  interactionSid: string;
  channelSid: string;
}

export interface InteractionTransferListInstance {
  _version: V1;
  _solution: InteractionTransferSolution;
  _uri: string;

  (sid: string): InteractionTransferContext;
  get(sid: string): InteractionTransferContext;

  /**
   * Create a InteractionTransferInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  create(
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;
  /**
   * Create a InteractionTransferInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed InteractionTransferInstance
   */
  create(
    params: object,
    headers?: any,
    callback?: (error: Error | null, item?: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function InteractionTransferListInstance(
  version: V1,
  interactionSid: string,
  channelSid: string
): InteractionTransferListInstance {
  if (!isValidPathParam(interactionSid)) {
    throw new Error("Parameter 'interactionSid' is not valid.");
  }

  if (!isValidPathParam(channelSid)) {
    throw new Error("Parameter 'channelSid' is not valid.");
  }

  const instance = ((sid) =>
    instance.get(sid)) as InteractionTransferListInstance;

  instance.get = function get(sid): InteractionTransferContext {
    return new InteractionTransferContextImpl(
      version,
      interactionSid,
      channelSid,
      sid
    );
  };

  instance._version = version;
  instance._solution = { interactionSid, channelSid };
  instance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Transfers`;

  instance.create = function create(
    params?:
      | object
      | ((error: Error | null, items: InteractionTransferInstance) => any),
    headers?: any,
    callback?: (error: Error | null, items: InteractionTransferInstance) => any
  ): Promise<InteractionTransferInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new InteractionTransferInstance(
          operationVersion,
          payload,
          instance._solution.interactionSid,
          instance._solution.channelSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
