/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to update a PluginVersionArchiveInstance
 */
export interface PluginVersionArchiveContextUpdateOptions {
  /** The Flex-Metadata HTTP request header */
  flexMetadata?: string;
}

export interface PluginVersionArchiveContext {
  /**
   * Update a PluginVersionArchiveInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginVersionArchiveInstance
   */
  update(
    callback?: (error: Error | null, item?: PluginVersionArchiveInstance) => any
  ): Promise<PluginVersionArchiveInstance>;
  /**
   * Update a PluginVersionArchiveInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginVersionArchiveInstance
   */
  update(
    params: PluginVersionArchiveContextUpdateOptions,
    callback?: (error: Error | null, item?: PluginVersionArchiveInstance) => any
  ): Promise<PluginVersionArchiveInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface PluginVersionArchiveContextSolution {
  pluginSid: string;
  sid: string;
}

export class PluginVersionArchiveContextImpl
  implements PluginVersionArchiveContext
{
  protected _solution: PluginVersionArchiveContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, pluginSid: string, sid: string) {
    if (!isValidPathParam(pluginSid)) {
      throw new Error("Parameter 'pluginSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { pluginSid, sid };
    this._uri = `/PluginService/Plugins/${pluginSid}/Versions/${sid}/Archive`;
  }

  update(
    params?:
      | PluginVersionArchiveContextUpdateOptions
      | ((error: Error | null, item?: PluginVersionArchiveInstance) => any),
    callback?: (error: Error | null, item?: PluginVersionArchiveInstance) => any
  ): Promise<PluginVersionArchiveInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    const headers: any = {};
    if (params["flexMetadata"] !== undefined)
      headers["Flex-Metadata"] = params["flexMetadata"];

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PluginVersionArchiveInstance(
          operationVersion,
          payload,
          instance._solution.pluginSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface PluginVersionArchivePayload extends PluginVersionArchiveResource {}

interface PluginVersionArchiveResource {
  sid: string;
  plugin_sid: string;
  account_sid: string;
  version: string;
  plugin_url: string;
  changelog: string;
  private: boolean;
  archived: boolean;
  date_created: Date;
  url: string;
}

export class PluginVersionArchiveInstance {
  protected _solution: PluginVersionArchiveContextSolution;
  protected _context?: PluginVersionArchiveContext;

  constructor(
    protected _version: V1,
    payload: PluginVersionArchiveResource,
    pluginSid?: string,
    sid?: string
  ) {
    this.sid = payload.sid;
    this.pluginSid = payload.plugin_sid;
    this.accountSid = payload.account_sid;
    this.version = payload.version;
    this.pluginUrl = payload.plugin_url;
    this.changelog = payload.changelog;
    this._private = payload.private;
    this.archived = payload.archived;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.url = payload.url;

    this._solution = {
      pluginSid: pluginSid || this.pluginSid,
      sid: sid || this.sid,
    };
  }

  /**
   * The unique string that we created to identify the Flex Plugin Version resource.
   */
  sid: string;
  /**
   * The SID of the Flex Plugin resource this Flex Plugin Version belongs to.
   */
  pluginSid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Plugin Version resource and owns this resource.
   */
  accountSid: string;
  /**
   * The unique version of this Flex Plugin Version.
   */
  version: string;
  /**
   * The URL of where the Flex Plugin Version JavaScript bundle is hosted on.
   */
  pluginUrl: string;
  /**
   * A changelog that describes the changes this Flex Plugin Version brings.
   */
  changelog: string;
  /**
   * Whether to inject credentials while accessing this Plugin Version. The default value is false.
   */
  _private: boolean;
  /**
   * Whether the Flex Plugin Version is archived. The default value is false.
   */
  archived: boolean;
  /**
   * The date and time in GMT when the Flex Plugin Version was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The absolute URL of the Flex Plugin Version resource.
   */
  url: string;

  private get _proxy(): PluginVersionArchiveContext {
    this._context =
      this._context ||
      new PluginVersionArchiveContextImpl(
        this._version,
        this._solution.pluginSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Update a PluginVersionArchiveInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginVersionArchiveInstance
   */
  update(
    callback?: (error: Error | null, item?: PluginVersionArchiveInstance) => any
  ): Promise<PluginVersionArchiveInstance>;
  /**
   * Update a PluginVersionArchiveInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PluginVersionArchiveInstance
   */
  update(
    params: PluginVersionArchiveContextUpdateOptions,
    callback?: (error: Error | null, item?: PluginVersionArchiveInstance) => any
  ): Promise<PluginVersionArchiveInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: PluginVersionArchiveInstance) => any
  ): Promise<PluginVersionArchiveInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      pluginSid: this.pluginSid,
      accountSid: this.accountSid,
      version: this.version,
      pluginUrl: this.pluginUrl,
      changelog: this.changelog,
      _private: this._private,
      archived: this.archived,
      dateCreated: this.dateCreated,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface PluginVersionArchiveSolution {}

export interface PluginVersionArchiveListInstance {
  _version: V1;
  _solution: PluginVersionArchiveSolution;
  _uri: string;

  (pluginSid: string, sid: string): PluginVersionArchiveContext;
  get(pluginSid: string, sid: string): PluginVersionArchiveContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PluginVersionArchiveListInstance(
  version: V1
): PluginVersionArchiveListInstance {
  const instance = ((pluginSid, sid) =>
    instance.get(pluginSid, sid)) as PluginVersionArchiveListInstance;

  instance.get = function get(pluginSid, sid): PluginVersionArchiveContext {
    return new PluginVersionArchiveContextImpl(version, pluginSid, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
