/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to update a FlexUserInstance
 */
export interface FlexUserContextUpdateOptions {
  /** First name of the User. */
  firstName?: string;
  /** Last name of the User. */
  lastName?: string;
  /** Email of the User. */
  email?: string;
  /** Friendly name of the User. */
  friendlyName?: string;
  /** The unique SID identifier of the Twilio Unified User. */
  userSid?: string;
  /** The locale preference of the user. */
  locale?: string;
}

export interface FlexUserContext {
  /**
   * Fetch a FlexUserInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlexUserInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance>;

  /**
   * Update a FlexUserInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlexUserInstance
   */
  update(
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance>;
  /**
   * Update a FlexUserInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlexUserInstance
   */
  update(
    params: FlexUserContextUpdateOptions,
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface FlexUserContextSolution {
  instanceSid: string;
  flexUserSid: string;
}

export class FlexUserContextImpl implements FlexUserContext {
  protected _solution: FlexUserContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V2,
    instanceSid: string,
    flexUserSid: string
  ) {
    if (!isValidPathParam(instanceSid)) {
      throw new Error("Parameter 'instanceSid' is not valid.");
    }

    if (!isValidPathParam(flexUserSid)) {
      throw new Error("Parameter 'flexUserSid' is not valid.");
    }

    this._solution = { instanceSid, flexUserSid };
    this._uri = `/Instances/${instanceSid}/Users/${flexUserSid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FlexUserInstance(
          operationVersion,
          payload,
          instance._solution.instanceSid,
          instance._solution.flexUserSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | FlexUserContextUpdateOptions
      | ((error: Error | null, item?: FlexUserInstance) => any),
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["firstName"] !== undefined)
      data["FirstName"] = params["firstName"];
    if (params["lastName"] !== undefined) data["LastName"] = params["lastName"];
    if (params["email"] !== undefined) data["Email"] = params["email"];
    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];
    if (params["userSid"] !== undefined) data["UserSid"] = params["userSid"];
    if (params["locale"] !== undefined) data["Locale"] = params["locale"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FlexUserInstance(
          operationVersion,
          payload,
          instance._solution.instanceSid,
          instance._solution.flexUserSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface FlexUserPayload extends FlexUserResource {}

interface FlexUserResource {
  account_sid: string;
  instance_sid: string;
  user_sid: string;
  flex_user_sid: string;
  worker_sid: string;
  workspace_sid: string;
  flex_team_sid: string;
  first_name: string;
  last_name: string;
  username: string;
  email: string;
  friendly_name: string;
  locale: string;
  roles: Array<string>;
  created_date: Date;
  updated_date: Date;
  version: number;
  url: string;
}

export class FlexUserInstance {
  protected _solution: FlexUserContextSolution;
  protected _context?: FlexUserContext;

  constructor(
    protected _version: V2,
    payload: FlexUserResource,
    instanceSid?: string,
    flexUserSid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.instanceSid = payload.instance_sid;
    this.userSid = payload.user_sid;
    this.flexUserSid = payload.flex_user_sid;
    this.workerSid = payload.worker_sid;
    this.workspaceSid = payload.workspace_sid;
    this.flexTeamSid = payload.flex_team_sid;
    this.firstName = payload.first_name;
    this.lastName = payload.last_name;
    this.username = payload.username;
    this.email = payload.email;
    this.friendlyName = payload.friendly_name;
    this.locale = payload.locale;
    this.roles = payload.roles;
    this.createdDate = deserialize.iso8601DateTime(payload.created_date);
    this.updatedDate = deserialize.iso8601DateTime(payload.updated_date);
    this.version = deserialize.integer(payload.version);
    this.url = payload.url;

    this._solution = {
      instanceSid: instanceSid || this.instanceSid,
      flexUserSid: flexUserSid || this.flexUserSid,
    };
  }

  /**
   * The unique SID of the account that created the resource.
   */
  accountSid: string;
  /**
   * The unique ID created by Twilio to identify a Flex instance.
   */
  instanceSid: string;
  /**
   * The unique SID identifier of the Twilio Unified User.
   */
  userSid: string;
  /**
   * The unique SID identifier of the Flex User.
   */
  flexUserSid: string;
  /**
   * The unique SID identifier of the worker.
   */
  workerSid: string;
  /**
   * The unique SID identifier of the workspace.
   */
  workspaceSid: string;
  /**
   * The unique SID identifier of the Flex Team.
   */
  flexTeamSid: string;
  /**
   * First name of the User.
   */
  firstName: string;
  /**
   * Last name of the User.
   */
  lastName: string;
  /**
   * Username of the User.
   */
  username: string;
  /**
   * Email of the User.
   */
  email: string;
  /**
   * Friendly name of the User.
   */
  friendlyName: string;
  /**
   * The locale preference of the user.
   */
  locale: string;
  /**
   * The roles of the user.
   */
  roles: Array<string>;
  /**
   * The date that this user was created, given in ISO 8601 format.
   */
  createdDate: Date;
  /**
   * The date that this user was updated, given in ISO 8601 format.
   */
  updatedDate: Date;
  /**
   * The current version of the user.
   */
  version: number;
  url: string;

  private get _proxy(): FlexUserContext {
    this._context =
      this._context ||
      new FlexUserContextImpl(
        this._version,
        this._solution.instanceSid,
        this._solution.flexUserSid
      );
    return this._context;
  }

  /**
   * Fetch a FlexUserInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlexUserInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a FlexUserInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlexUserInstance
   */
  update(
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance>;
  /**
   * Update a FlexUserInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlexUserInstance
   */
  update(
    params: FlexUserContextUpdateOptions,
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: FlexUserInstance) => any
  ): Promise<FlexUserInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      instanceSid: this.instanceSid,
      userSid: this.userSid,
      flexUserSid: this.flexUserSid,
      workerSid: this.workerSid,
      workspaceSid: this.workspaceSid,
      flexTeamSid: this.flexTeamSid,
      firstName: this.firstName,
      lastName: this.lastName,
      username: this.username,
      email: this.email,
      friendlyName: this.friendlyName,
      locale: this.locale,
      roles: this.roles,
      createdDate: this.createdDate,
      updatedDate: this.updatedDate,
      version: this.version,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface FlexUserSolution {}

export interface FlexUserListInstance {
  _version: V2;
  _solution: FlexUserSolution;
  _uri: string;

  (instanceSid: string, flexUserSid: string): FlexUserContext;
  get(instanceSid: string, flexUserSid: string): FlexUserContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function FlexUserListInstance(version: V2): FlexUserListInstance {
  const instance = ((instanceSid, flexUserSid) =>
    instance.get(instanceSid, flexUserSid)) as FlexUserListInstance;

  instance.get = function get(instanceSid, flexUserSid): FlexUserContext {
    return new FlexUserContextImpl(version, instanceSid, flexUserSid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
