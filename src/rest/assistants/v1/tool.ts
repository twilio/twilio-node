/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export class AssistantsV1ServiceCreatePolicyRequest {
  /**
   * The description of the policy.
   */
  "description"?: string;
  /**
   * The Policy ID.
   */
  "id"?: string;
  /**
   * The name of the policy.
   */
  "name"?: string;
  "policy_details": any | null;
  /**
   * The description of the policy.
   */
  "type"?: string;
}

export class AssistantsV1ServiceCreateToolRequest {
  /**
   * The Assistant ID.
   */
  "assistant_id"?: string;
  /**
   * The description of the tool.
   */
  "description"?: string;
  /**
   * True if the tool is enabled.
   */
  "enabled": boolean;
  /**
   * The metadata related to method, url, input_schema to used with the Tool.
   */
  "meta"?: Record<string, object>;
  /**
   * The name of the tool.
   */
  "name": string;
  "policy"?: AssistantsV1ServiceCreatePolicyRequest;
  /**
   * The description of the tool.
   */
  "type": string;
}

export class AssistantsV1ServicePolicy {
  /**
   * The Policy ID.
   */
  "id"?: string;
  /**
   * The name of the policy.
   */
  "name"?: string;
  /**
   * The description of the policy.
   */
  "description"?: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Policy resource.
   */
  "account_sid"?: string;
  /**
   * The SID of the User that created the Policy resource.
   */
  "user_sid"?: string;
  /**
   * The type of the policy.
   */
  "type": string;
  /**
   * The details of the policy based on the type.
   */
  "policy_details": Record<string, object>;
  /**
   * The date and time in GMT when the Policy was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  "date_created"?: Date;
  /**
   * The date and time in GMT when the Policy was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  "date_updated"?: Date;
}

export class AssistantsV1ServiceUpdateToolRequest {
  /**
   * The Assistant ID.
   */
  "assistant_id"?: string;
  /**
   * The description of the tool.
   */
  "description"?: string;
  /**
   * True if the tool is enabled.
   */
  "enabled"?: boolean;
  /**
   * The metadata related to method, url, input_schema to used with the Tool.
   */
  "meta"?: Record<string, object>;
  /**
   * The name of the tool.
   */
  "name"?: string;
  "policy"?: AssistantsV1ServiceCreatePolicyRequest;
  /**
   * The type of the tool.
   */
  "type"?: string;
}

/**
 * Options to pass to update a ToolInstance
 */
export interface ToolContextUpdateOptions {
  /**  */
  assistantsV1ServiceUpdateToolRequest?: AssistantsV1ServiceUpdateToolRequest;
}

/**
 * Options to pass to create a ToolInstance
 */
export interface ToolListInstanceCreateOptions {
  /**  */
  assistantsV1ServiceCreateToolRequest: AssistantsV1ServiceCreateToolRequest;
}
/**
 * Options to pass to each
 */
export interface ToolListInstanceEachOptions {
  /**  */
  assistantId?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: ToolInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface ToolListInstanceOptions {
  /**  */
  assistantId?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface ToolListInstancePageOptions {
  /**  */
  assistantId?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface ToolContext {
  /**
   * Remove a ToolInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a ToolInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance>;

  /**
   * Update a ToolInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  update(
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance>;
  /**
   * Update a ToolInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  update(
    params: AssistantsV1ServiceUpdateToolRequest,
    headers?: any,
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ToolContextSolution {
  id: string;
}

export class ToolContextImpl implements ToolContext {
  protected _solution: ToolContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, id: string) {
    if (!isValidPathParam(id)) {
      throw new Error("Parameter 'id' is not valid.");
    }

    this._solution = { id };
    this._uri = `/Tools/${id}`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
        headers,
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ToolInstance(operationVersion, payload, instance._solution.id)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | AssistantsV1ServiceUpdateToolRequest
      | ((error: Error | null, item?: ToolInstance) => any),
    headers?: any,
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "put",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ToolInstance(operationVersion, payload, instance._solution.id)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ToolPayload extends TwilioResponsePayload {
  tools: ToolResource[];
}

interface ToolResource {
  account_sid: string;
  description: string;
  enabled: boolean;
  id: string;
  meta: Record<string, object>;
  name: string;
  requires_auth: boolean;
  type: string;
  url: string;
  date_created: Date;
  date_updated: Date;
  policies: Array<AssistantsV1ServicePolicy>;
}

export class ToolInstance {
  protected _solution: ToolContextSolution;
  protected _context?: ToolContext;

  constructor(protected _version: V1, payload: ToolResource, id?: string) {
    this.accountSid = payload.account_sid;
    this.description = payload.description;
    this.enabled = payload.enabled;
    this.id = payload.id;
    this.meta = payload.meta;
    this.name = payload.name;
    this.requiresAuth = payload.requires_auth;
    this.type = payload.type;
    this.url = payload.url;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.policies = payload.policies;

    this._solution = { id: id || this.id };
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Tool resource.
   */
  accountSid: string;
  /**
   * The description of the tool.
   */
  description: string;
  /**
   * True if the tool is enabled.
   */
  enabled: boolean;
  /**
   * The tool ID.
   */
  id: string;
  /**
   * The metadata related to method, url, input_schema to used with the Tool.
   */
  meta: Record<string, object>;
  /**
   * The name of the tool.
   */
  name: string;
  /**
   * The authentication requirement for the tool.
   */
  requiresAuth: boolean;
  /**
   * The type of the tool. (\'WEBHOOK\')
   */
  type: string;
  /**
   * The url of the tool resource.
   */
  url: string;
  /**
   * The date and time in GMT when the Tool was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT when the Tool was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateUpdated: Date;
  /**
   * The Policies associated with the tool.
   */
  policies: Array<AssistantsV1ServicePolicy>;

  private get _proxy(): ToolContext {
    this._context =
      this._context || new ToolContextImpl(this._version, this._solution.id);
    return this._context;
  }

  /**
   * Remove a ToolInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a ToolInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a ToolInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  update(
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance>;
  /**
   * Update a ToolInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  update(
    params: AssistantsV1ServiceUpdateToolRequest,
    headers?: any,
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      description: this.description,
      enabled: this.enabled,
      id: this.id,
      meta: this.meta,
      name: this.name,
      requiresAuth: this.requiresAuth,
      type: this.type,
      url: this.url,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      policies: this.policies,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ToolSolution {}

export interface ToolListInstance {
  _version: V1;
  _solution: ToolSolution;
  _uri: string;

  (id: string): ToolContext;
  get(id: string): ToolContext;

  /**
   * Create a ToolInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ToolInstance
   */
  create(
    params: AssistantsV1ServiceCreateToolRequest,
    headers?: any,
    callback?: (error: Error | null, item?: ToolInstance) => any
  ): Promise<ToolInstance>;

  /**
   * Streams ToolInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ToolListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: ToolInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: ToolListInstanceEachOptions,
    callback?: (item: ToolInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of ToolInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ToolPage) => any
  ): Promise<ToolPage>;
  /**
   * Lists ToolInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ToolListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: ToolInstance[]) => any
  ): Promise<ToolInstance[]>;
  list(
    params: ToolListInstanceOptions,
    callback?: (error: Error | null, items: ToolInstance[]) => any
  ): Promise<ToolInstance[]>;
  /**
   * Retrieve a single page of ToolInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ToolListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: ToolPage) => any
  ): Promise<ToolPage>;
  page(
    params: ToolListInstancePageOptions,
    callback?: (error: Error | null, items: ToolPage) => any
  ): Promise<ToolPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ToolListInstance(version: V1): ToolListInstance {
  const instance = ((id) => instance.get(id)) as ToolListInstance;

  instance.get = function get(id): ToolContext {
    return new ToolContextImpl(version, id);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Tools`;

  instance.create = function create(
    params: AssistantsV1ServiceCreateToolRequest,
    headers?: any,
    callback?: (error: Error | null, items: ToolInstance) => any
  ): Promise<ToolInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ToolInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | ToolListInstancePageOptions
      | ((error: Error | null, items: ToolPage) => any),
    callback?: (error: Error | null, items: ToolPage) => any
  ): Promise<ToolPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["assistantId"] !== undefined)
      data["AssistantId"] = params["assistantId"];
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ToolPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ToolPage) => any
  ): Promise<ToolPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) => new ToolPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class ToolPage extends Page<
  V1,
  ToolPayload,
  ToolResource,
  ToolInstance
> {
  /**
   * Initialize the ToolPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: ToolSolution) {
    super(version, response, solution);
  }

  /**
   * Build an instance of ToolInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ToolResource): ToolInstance {
    return new ToolInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
