/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

export class AssistantsV1ServiceAssistantSendMessageRequest {
  /**
   * The unique identity of user for the session.
   */
  "identity": string;
  /**
   * The unique name for the session.
   */
  "session_id"?: string;
  /**
   * The query to ask the assistant.
   */
  "body": string;
  /**
   * The webhook url to call after the assistant has generated a response or report an error.
   */
  "webhook"?: string;
  /**
   * one of the modes \'chat\', \'email\' or \'voice\'
   */
  "mode"?: string;
}

/**
 * Options to pass to create a MessageInstance
 */
export interface MessageListInstanceCreateOptions {
  /**  */
  assistantsV1ServiceAssistantSendMessageRequest: AssistantsV1ServiceAssistantSendMessageRequest;
}

export interface MessageSolution {
  id: string;
}

export interface MessageListInstance {
  _version: V1;
  _solution: MessageSolution;
  _uri: string;

  /**
   * Create a MessageInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MessageInstance
   */
  create(
    params: AssistantsV1ServiceAssistantSendMessageRequest,
    headers?: any,
    callback?: (error: Error | null, item?: MessageInstance) => any
  ): Promise<MessageInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function MessageListInstance(
  version: V1,
  id: string
): MessageListInstance {
  if (!isValidPathParam(id)) {
    throw new Error("Parameter 'id' is not valid.");
  }

  const instance = {} as MessageListInstance;

  instance._version = version;
  instance._solution = { id };
  instance._uri = `/Assistants/${id}/Messages`;

  instance.create = function create(
    params: AssistantsV1ServiceAssistantSendMessageRequest,
    headers?: any,
    callback?: (error: Error | null, items: MessageInstance) => any
  ): Promise<MessageInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new MessageInstance(operationVersion, payload, instance._solution.id)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface MessagePayload extends MessageResource {}

interface MessageResource {
  status: string;
  flagged: boolean;
  aborted: boolean;
  session_id: string;
  account_sid: string;
  body: string;
  error: string;
}

export class MessageInstance {
  constructor(protected _version: V1, payload: MessageResource, id: string) {
    this.status = payload.status;
    this.flagged = payload.flagged;
    this.aborted = payload.aborted;
    this.sessionId = payload.session_id;
    this.accountSid = payload.account_sid;
    this.body = payload.body;
    this.error = payload.error;
  }

  /**
   * success or failure based on whether the request successfully generated a response.
   */
  status: string;
  /**
   * If successful, this property will denote whether the response was flagged or not.
   */
  flagged: boolean;
  /**
   * This property will denote whether the request was aborted or not.
   */
  aborted: boolean;
  /**
   * The unique name for the session.
   */
  sessionId: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that sent the Message.
   */
  accountSid: string;
  /**
   * If successful, the body of the generated response
   */
  body: string;
  /**
   * The error message if generation was not successful
   */
  error: string;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      status: this.status,
      flagged: this.flagged,
      aborted: this.aborted,
      sessionId: this.sessionId,
      accountSid: this.accountSid,
      body: this.body,
      error: this.error,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
