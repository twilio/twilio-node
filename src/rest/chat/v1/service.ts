/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { ChannelListInstance } from "./service/channel";
import { RoleListInstance } from "./service/role";
import { UserListInstance } from "./service/user";

/**
 * Options to pass to update a ServiceInstance
 */
export interface ServiceContextUpdateOptions {
  /** A descriptive string that you create to describe the resource. It can be up to 64 characters long. */
  friendlyName?: string;
  /** The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. */
  defaultServiceRoleSid?: string;
  /** The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. */
  defaultChannelRoleSid?: string;
  /** The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. */
  defaultChannelCreatorRoleSid?: string;
  /** Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`. */
  readStatusEnabled?: boolean;
  /** Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`. */
  reachabilityEnabled?: boolean;
  /** How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds. */
  typingIndicatorTimeout?: number;
  /** DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints. */
  consumptionReportInterval?: number;
  /** Whether to send a notification when a new message is added to a channel. Can be: `true` or `false` and the default is `false`. */
  "notifications.newMessage.enabled"?: boolean;
  /** The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`. */
  "notifications.newMessage.template"?: string;
  /** Whether to send a notification when a member is added to a channel. Can be: `true` or `false` and the default is `false`. */
  "notifications.addedToChannel.enabled"?: boolean;
  /** The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`. */
  "notifications.addedToChannel.template"?: string;
  /** Whether to send a notification to a user when they are removed from a channel. Can be: `true` or `false` and the default is `false`. */
  "notifications.removedFromChannel.enabled"?: boolean;
  /** The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`. */
  "notifications.removedFromChannel.template"?: string;
  /** Whether to send a notification when a user is invited to a channel. Can be: `true` or `false` and the default is `false`. */
  "notifications.invitedToChannel.enabled"?: boolean;
  /** The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`. */
  "notifications.invitedToChannel.template"?: string;
  /** The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. */
  preWebhookUrl?: string;
  /** The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. */
  postWebhookUrl?: string;
  /** The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. */
  webhookMethod?: string;
  /** The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. */
  webhookFilters?: Array<string>;
  /** The URL of the webhook to call in response to the `on_message_send` event using the `webhooks.on_message_send.method` HTTP method. */
  "webhooks.onMessageSend.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_message_send.url`. */
  "webhooks.onMessageSend.method"?: string;
  /** The URL of the webhook to call in response to the `on_message_update` event using the `webhooks.on_message_update.method` HTTP method. */
  "webhooks.onMessageUpdate.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_message_update.url`. */
  "webhooks.onMessageUpdate.method"?: string;
  /** The URL of the webhook to call in response to the `on_message_remove` event using the `webhooks.on_message_remove.method` HTTP method. */
  "webhooks.onMessageRemove.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_message_remove.url`. */
  "webhooks.onMessageRemove.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_add` event using the `webhooks.on_channel_add.method` HTTP method. */
  "webhooks.onChannelAdd.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_channel_add.url`. */
  "webhooks.onChannelAdd.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_destroy` event using the `webhooks.on_channel_destroy.method` HTTP method. */
  "webhooks.onChannelDestroy.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_channel_destroy.url`. */
  "webhooks.onChannelDestroy.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_update` event using the `webhooks.on_channel_update.method` HTTP method. */
  "webhooks.onChannelUpdate.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_channel_update.url`. */
  "webhooks.onChannelUpdate.method"?: string;
  /** The URL of the webhook to call in response to the `on_member_add` event using the `webhooks.on_member_add.method` HTTP method. */
  "webhooks.onMemberAdd.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_member_add.url`. */
  "webhooks.onMemberAdd.method"?: string;
  /** The URL of the webhook to call in response to the `on_member_remove` event using the `webhooks.on_member_remove.method` HTTP method. */
  "webhooks.onMemberRemove.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_member_remove.url`. */
  "webhooks.onMemberRemove.method"?: string;
  /** The URL of the webhook to call in response to the `on_message_sent` event using the `webhooks.on_message_sent.method` HTTP method. */
  "webhooks.onMessageSent.url"?: string;
  /** The URL of the webhook to call in response to the `on_message_sent` event`. */
  "webhooks.onMessageSent.method"?: string;
  /** The URL of the webhook to call in response to the `on_message_updated` event using the `webhooks.on_message_updated.method` HTTP method. */
  "webhooks.onMessageUpdated.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_message_updated.url`. */
  "webhooks.onMessageUpdated.method"?: string;
  /** The URL of the webhook to call in response to the `on_message_removed` event using the `webhooks.on_message_removed.method` HTTP method. */
  "webhooks.onMessageRemoved.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_message_removed.url`. */
  "webhooks.onMessageRemoved.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_added.method` HTTP method. */
  "webhooks.onChannelAdded.url"?: string;
  /** The URL of the webhook to call in response to the `on_channel_added` event`. */
  "webhooks.onChannelAdded.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_destroyed.method` HTTP method. */
  "webhooks.onChannelDestroyed.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_channel_destroyed.url`. */
  "webhooks.onChannelDestroyed.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method. */
  "webhooks.onChannelUpdated.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_channel_updated.url`. */
  "webhooks.onChannelUpdated.method"?: string;
  /** The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method. */
  "webhooks.onMemberAdded.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_channel_updated.url`. */
  "webhooks.onMemberAdded.method"?: string;
  /** The URL of the webhook to call in response to the `on_member_removed` event using the `webhooks.on_member_removed.method` HTTP method. */
  "webhooks.onMemberRemoved.url"?: string;
  /** The HTTP method to use when calling the `webhooks.on_member_removed.url`. */
  "webhooks.onMemberRemoved.method"?: string;
  /** The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000. */
  "limits.channelMembers"?: number;
  /** The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000. */
  "limits.userChannels"?: number;
}

/**
 * Options to pass to create a ServiceInstance
 */
export interface ServiceListInstanceCreateOptions {
  /** A descriptive string that you create to describe the resource. It can be up to 64 characters long. */
  friendlyName: string;
}
/**
 * Options to pass to each
 */
export interface ServiceListInstanceEachOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: ServiceInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface ServiceListInstanceOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface ServiceListInstancePageOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface ServiceContext {
  channels: ChannelListInstance;
  roles: RoleListInstance;
  users: UserListInstance;

  /**
   * Remove a ServiceInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a ServiceInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance>;

  /**
   * Update a ServiceInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  update(
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance>;
  /**
   * Update a ServiceInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  update(
    params: ServiceContextUpdateOptions,
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ServiceContextSolution {
  sid: string;
}

export class ServiceContextImpl implements ServiceContext {
  protected _solution: ServiceContextSolution;
  protected _uri: string;

  protected _channels?: ChannelListInstance;
  protected _roles?: RoleListInstance;
  protected _users?: UserListInstance;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Services/${sid}`;
  }

  get channels(): ChannelListInstance {
    this._channels =
      this._channels || ChannelListInstance(this._version, this._solution.sid);
    return this._channels;
  }

  get roles(): RoleListInstance {
    this._roles =
      this._roles || RoleListInstance(this._version, this._solution.sid);
    return this._roles;
  }

  get users(): UserListInstance {
    this._users =
      this._users || UserListInstance(this._version, this._solution.sid);
    return this._users;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ServiceInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | ServiceContextUpdateOptions
      | ((error: Error | null, item?: ServiceInstance) => any),
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];
    if (params["defaultServiceRoleSid"] !== undefined)
      data["DefaultServiceRoleSid"] = params["defaultServiceRoleSid"];
    if (params["defaultChannelRoleSid"] !== undefined)
      data["DefaultChannelRoleSid"] = params["defaultChannelRoleSid"];
    if (params["defaultChannelCreatorRoleSid"] !== undefined)
      data["DefaultChannelCreatorRoleSid"] =
        params["defaultChannelCreatorRoleSid"];
    if (params["readStatusEnabled"] !== undefined)
      data["ReadStatusEnabled"] = serialize.bool(params["readStatusEnabled"]);
    if (params["reachabilityEnabled"] !== undefined)
      data["ReachabilityEnabled"] = serialize.bool(
        params["reachabilityEnabled"]
      );
    if (params["typingIndicatorTimeout"] !== undefined)
      data["TypingIndicatorTimeout"] = params["typingIndicatorTimeout"];
    if (params["consumptionReportInterval"] !== undefined)
      data["ConsumptionReportInterval"] = params["consumptionReportInterval"];
    if (params["notifications.newMessage.enabled"] !== undefined)
      data["Notifications.NewMessage.Enabled"] = serialize.bool(
        params["notifications.newMessage.enabled"]
      );
    if (params["notifications.newMessage.template"] !== undefined)
      data["Notifications.NewMessage.Template"] =
        params["notifications.newMessage.template"];
    if (params["notifications.addedToChannel.enabled"] !== undefined)
      data["Notifications.AddedToChannel.Enabled"] = serialize.bool(
        params["notifications.addedToChannel.enabled"]
      );
    if (params["notifications.addedToChannel.template"] !== undefined)
      data["Notifications.AddedToChannel.Template"] =
        params["notifications.addedToChannel.template"];
    if (params["notifications.removedFromChannel.enabled"] !== undefined)
      data["Notifications.RemovedFromChannel.Enabled"] = serialize.bool(
        params["notifications.removedFromChannel.enabled"]
      );
    if (params["notifications.removedFromChannel.template"] !== undefined)
      data["Notifications.RemovedFromChannel.Template"] =
        params["notifications.removedFromChannel.template"];
    if (params["notifications.invitedToChannel.enabled"] !== undefined)
      data["Notifications.InvitedToChannel.Enabled"] = serialize.bool(
        params["notifications.invitedToChannel.enabled"]
      );
    if (params["notifications.invitedToChannel.template"] !== undefined)
      data["Notifications.InvitedToChannel.Template"] =
        params["notifications.invitedToChannel.template"];
    if (params["preWebhookUrl"] !== undefined)
      data["PreWebhookUrl"] = params["preWebhookUrl"];
    if (params["postWebhookUrl"] !== undefined)
      data["PostWebhookUrl"] = params["postWebhookUrl"];
    if (params["webhookMethod"] !== undefined)
      data["WebhookMethod"] = params["webhookMethod"];
    if (params["webhookFilters"] !== undefined)
      data["WebhookFilters"] = serialize.map(
        params["webhookFilters"],
        (e: string) => e
      );
    if (params["webhooks.onMessageSend.url"] !== undefined)
      data["Webhooks.OnMessageSend.Url"] = params["webhooks.onMessageSend.url"];
    if (params["webhooks.onMessageSend.method"] !== undefined)
      data["Webhooks.OnMessageSend.Method"] =
        params["webhooks.onMessageSend.method"];
    if (params["webhooks.onMessageUpdate.url"] !== undefined)
      data["Webhooks.OnMessageUpdate.Url"] =
        params["webhooks.onMessageUpdate.url"];
    if (params["webhooks.onMessageUpdate.method"] !== undefined)
      data["Webhooks.OnMessageUpdate.Method"] =
        params["webhooks.onMessageUpdate.method"];
    if (params["webhooks.onMessageRemove.url"] !== undefined)
      data["Webhooks.OnMessageRemove.Url"] =
        params["webhooks.onMessageRemove.url"];
    if (params["webhooks.onMessageRemove.method"] !== undefined)
      data["Webhooks.OnMessageRemove.Method"] =
        params["webhooks.onMessageRemove.method"];
    if (params["webhooks.onChannelAdd.url"] !== undefined)
      data["Webhooks.OnChannelAdd.Url"] = params["webhooks.onChannelAdd.url"];
    if (params["webhooks.onChannelAdd.method"] !== undefined)
      data["Webhooks.OnChannelAdd.Method"] =
        params["webhooks.onChannelAdd.method"];
    if (params["webhooks.onChannelDestroy.url"] !== undefined)
      data["Webhooks.OnChannelDestroy.Url"] =
        params["webhooks.onChannelDestroy.url"];
    if (params["webhooks.onChannelDestroy.method"] !== undefined)
      data["Webhooks.OnChannelDestroy.Method"] =
        params["webhooks.onChannelDestroy.method"];
    if (params["webhooks.onChannelUpdate.url"] !== undefined)
      data["Webhooks.OnChannelUpdate.Url"] =
        params["webhooks.onChannelUpdate.url"];
    if (params["webhooks.onChannelUpdate.method"] !== undefined)
      data["Webhooks.OnChannelUpdate.Method"] =
        params["webhooks.onChannelUpdate.method"];
    if (params["webhooks.onMemberAdd.url"] !== undefined)
      data["Webhooks.OnMemberAdd.Url"] = params["webhooks.onMemberAdd.url"];
    if (params["webhooks.onMemberAdd.method"] !== undefined)
      data["Webhooks.OnMemberAdd.Method"] =
        params["webhooks.onMemberAdd.method"];
    if (params["webhooks.onMemberRemove.url"] !== undefined)
      data["Webhooks.OnMemberRemove.Url"] =
        params["webhooks.onMemberRemove.url"];
    if (params["webhooks.onMemberRemove.method"] !== undefined)
      data["Webhooks.OnMemberRemove.Method"] =
        params["webhooks.onMemberRemove.method"];
    if (params["webhooks.onMessageSent.url"] !== undefined)
      data["Webhooks.OnMessageSent.Url"] = params["webhooks.onMessageSent.url"];
    if (params["webhooks.onMessageSent.method"] !== undefined)
      data["Webhooks.OnMessageSent.Method"] =
        params["webhooks.onMessageSent.method"];
    if (params["webhooks.onMessageUpdated.url"] !== undefined)
      data["Webhooks.OnMessageUpdated.Url"] =
        params["webhooks.onMessageUpdated.url"];
    if (params["webhooks.onMessageUpdated.method"] !== undefined)
      data["Webhooks.OnMessageUpdated.Method"] =
        params["webhooks.onMessageUpdated.method"];
    if (params["webhooks.onMessageRemoved.url"] !== undefined)
      data["Webhooks.OnMessageRemoved.Url"] =
        params["webhooks.onMessageRemoved.url"];
    if (params["webhooks.onMessageRemoved.method"] !== undefined)
      data["Webhooks.OnMessageRemoved.Method"] =
        params["webhooks.onMessageRemoved.method"];
    if (params["webhooks.onChannelAdded.url"] !== undefined)
      data["Webhooks.OnChannelAdded.Url"] =
        params["webhooks.onChannelAdded.url"];
    if (params["webhooks.onChannelAdded.method"] !== undefined)
      data["Webhooks.OnChannelAdded.Method"] =
        params["webhooks.onChannelAdded.method"];
    if (params["webhooks.onChannelDestroyed.url"] !== undefined)
      data["Webhooks.OnChannelDestroyed.Url"] =
        params["webhooks.onChannelDestroyed.url"];
    if (params["webhooks.onChannelDestroyed.method"] !== undefined)
      data["Webhooks.OnChannelDestroyed.Method"] =
        params["webhooks.onChannelDestroyed.method"];
    if (params["webhooks.onChannelUpdated.url"] !== undefined)
      data["Webhooks.OnChannelUpdated.Url"] =
        params["webhooks.onChannelUpdated.url"];
    if (params["webhooks.onChannelUpdated.method"] !== undefined)
      data["Webhooks.OnChannelUpdated.Method"] =
        params["webhooks.onChannelUpdated.method"];
    if (params["webhooks.onMemberAdded.url"] !== undefined)
      data["Webhooks.OnMemberAdded.Url"] = params["webhooks.onMemberAdded.url"];
    if (params["webhooks.onMemberAdded.method"] !== undefined)
      data["Webhooks.OnMemberAdded.Method"] =
        params["webhooks.onMemberAdded.method"];
    if (params["webhooks.onMemberRemoved.url"] !== undefined)
      data["Webhooks.OnMemberRemoved.Url"] =
        params["webhooks.onMemberRemoved.url"];
    if (params["webhooks.onMemberRemoved.method"] !== undefined)
      data["Webhooks.OnMemberRemoved.Method"] =
        params["webhooks.onMemberRemoved.method"];
    if (params["limits.channelMembers"] !== undefined)
      data["Limits.ChannelMembers"] = params["limits.channelMembers"];
    if (params["limits.userChannels"] !== undefined)
      data["Limits.UserChannels"] = params["limits.userChannels"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ServiceInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ServicePayload extends TwilioResponsePayload {
  services: ServiceResource[];
}

interface ServiceResource {
  sid: string;
  account_sid: string;
  friendly_name: string;
  date_created: Date;
  date_updated: Date;
  default_service_role_sid: string;
  default_channel_role_sid: string;
  default_channel_creator_role_sid: string;
  read_status_enabled: boolean;
  reachability_enabled: boolean;
  typing_indicator_timeout: number;
  consumption_report_interval: number;
  limits: any;
  webhooks: any;
  pre_webhook_url: string;
  post_webhook_url: string;
  webhook_method: string;
  webhook_filters: Array<string>;
  notifications: any;
  url: string;
  links: Record<string, string>;
}

export class ServiceInstance {
  protected _solution: ServiceContextSolution;
  protected _context?: ServiceContext;

  constructor(protected _version: V1, payload: ServiceResource, sid?: string) {
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.friendlyName = payload.friendly_name;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.defaultServiceRoleSid = payload.default_service_role_sid;
    this.defaultChannelRoleSid = payload.default_channel_role_sid;
    this.defaultChannelCreatorRoleSid =
      payload.default_channel_creator_role_sid;
    this.readStatusEnabled = payload.read_status_enabled;
    this.reachabilityEnabled = payload.reachability_enabled;
    this.typingIndicatorTimeout = deserialize.integer(
      payload.typing_indicator_timeout
    );
    this.consumptionReportInterval = deserialize.integer(
      payload.consumption_report_interval
    );
    this.limits = payload.limits;
    this.webhooks = payload.webhooks;
    this.preWebhookUrl = payload.pre_webhook_url;
    this.postWebhookUrl = payload.post_webhook_url;
    this.webhookMethod = payload.webhook_method;
    this.webhookFilters = payload.webhook_filters;
    this.notifications = payload.notifications;
    this.url = payload.url;
    this.links = payload.links;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * The unique string that we created to identify the Service resource.
   */
  sid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Service resource.
   */
  accountSid: string;
  /**
   * The string that you assigned to describe the resource.
   */
  friendlyName: string;
  /**
   * The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateUpdated: Date;
  /**
   * The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
   */
  defaultServiceRoleSid: string;
  /**
   * The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
   */
  defaultChannelRoleSid: string;
  /**
   * The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
   */
  defaultChannelCreatorRoleSid: string;
  /**
   * Whether the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature is enabled. The default is `true`.
   */
  readStatusEnabled: boolean;
  /**
   * Whether the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) is enabled for this Service instance. The default is `false`.
   */
  reachabilityEnabled: boolean;
  /**
   * How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
   */
  typingIndicatorTimeout: number;
  /**
   * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
   */
  consumptionReportInterval: number;
  /**
   * An object that describes the limits of the service instance. The `limits` object contains  `channel_members` to describe the members/channel limit and `user_channels` to describe the channels/user limit. `channel_members` can be 1,000 or less, with a default of 250. `user_channels` can be 1,000 or less, with a default value of 100.
   */
  limits: any;
  /**
   * An object that contains information about the webhooks configured for this service.
   */
  webhooks: any;
  /**
   * The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
   */
  preWebhookUrl: string;
  /**
   * The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
   */
  postWebhookUrl: string;
  /**
   * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  webhookMethod: string;
  /**
   * The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  webhookFilters: Array<string>;
  /**
   * The notification configuration for the Service instance. See [Push Notification Configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more information.
   */
  notifications: any;
  /**
   * The absolute URL of the Service resource.
   */
  url: string;
  /**
   * The absolute URLs of the Service\'s [Channels](https://www.twilio.com/docs/chat/api/channels), [Roles](https://www.twilio.com/docs/chat/api/roles), and [Users](https://www.twilio.com/docs/chat/api/users).
   */
  links: Record<string, string>;

  private get _proxy(): ServiceContext {
    this._context =
      this._context ||
      new ServiceContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Remove a ServiceInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a ServiceInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a ServiceInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  update(
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance>;
  /**
   * Update a ServiceInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  update(
    params: ServiceContextUpdateOptions,
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Access the channels.
   */
  channels(): ChannelListInstance {
    return this._proxy.channels;
  }

  /**
   * Access the roles.
   */
  roles(): RoleListInstance {
    return this._proxy.roles;
  }

  /**
   * Access the users.
   */
  users(): UserListInstance {
    return this._proxy.users;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      friendlyName: this.friendlyName,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      defaultServiceRoleSid: this.defaultServiceRoleSid,
      defaultChannelRoleSid: this.defaultChannelRoleSid,
      defaultChannelCreatorRoleSid: this.defaultChannelCreatorRoleSid,
      readStatusEnabled: this.readStatusEnabled,
      reachabilityEnabled: this.reachabilityEnabled,
      typingIndicatorTimeout: this.typingIndicatorTimeout,
      consumptionReportInterval: this.consumptionReportInterval,
      limits: this.limits,
      webhooks: this.webhooks,
      preWebhookUrl: this.preWebhookUrl,
      postWebhookUrl: this.postWebhookUrl,
      webhookMethod: this.webhookMethod,
      webhookFilters: this.webhookFilters,
      notifications: this.notifications,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ServiceSolution {}

export interface ServiceListInstance {
  _version: V1;
  _solution: ServiceSolution;
  _uri: string;

  (sid: string): ServiceContext;
  get(sid: string): ServiceContext;

  /**
   * Create a ServiceInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ServiceInstance
   */
  create(
    params: ServiceListInstanceCreateOptions,
    callback?: (error: Error | null, item?: ServiceInstance) => any
  ): Promise<ServiceInstance>;

  /**
   * Streams ServiceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ServiceListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: ServiceInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: ServiceListInstanceEachOptions,
    callback?: (item: ServiceInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of ServiceInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ServicePage) => any
  ): Promise<ServicePage>;
  /**
   * Lists ServiceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ServiceListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: ServiceInstance[]) => any
  ): Promise<ServiceInstance[]>;
  list(
    params: ServiceListInstanceOptions,
    callback?: (error: Error | null, items: ServiceInstance[]) => any
  ): Promise<ServiceInstance[]>;
  /**
   * Retrieve a single page of ServiceInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ServiceListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: ServicePage) => any
  ): Promise<ServicePage>;
  page(
    params: ServiceListInstancePageOptions,
    callback?: (error: Error | null, items: ServicePage) => any
  ): Promise<ServicePage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ServiceListInstance(version: V1): ServiceListInstance {
  const instance = ((sid) => instance.get(sid)) as ServiceListInstance;

  instance.get = function get(sid): ServiceContext {
    return new ServiceContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Services`;

  instance.create = function create(
    params: ServiceListInstanceCreateOptions,
    callback?: (error: Error | null, items: ServiceInstance) => any
  ): Promise<ServiceInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (
      params["friendlyName"] === null ||
      params["friendlyName"] === undefined
    ) {
      throw new Error("Required parameter \"params['friendlyName']\" missing.");
    }

    let data: any = {};

    data["FriendlyName"] = params["friendlyName"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ServiceInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | ServiceListInstancePageOptions
      | ((error: Error | null, items: ServicePage) => any),
    callback?: (error: Error | null, items: ServicePage) => any
  ): Promise<ServicePage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ServicePage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ServicePage) => any
  ): Promise<ServicePage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new ServicePage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class ServicePage extends Page<
  V1,
  ServicePayload,
  ServiceResource,
  ServiceInstance
> {
  /**
   * Initialize the ServicePage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: ServiceSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of ServiceInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ServiceResource): ServiceInstance {
    return new ServiceInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
