/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to each
 */
export interface EventListInstanceEachOptions {
  /** Only include events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials. */
  actorSid?: string;
  /** Only include events of this [Event Type](https://www.twilio.com/docs/usage/monitor-events#event-types). */
  eventType?: string;
  /** Only include events that refer to this resource. Useful for discovering the history of a specific resource. */
  resourceSid?: string;
  /** Only include events that originated from this IP address. Useful for tracking suspicious activity originating from the API or the Twilio Console. */
  sourceIpAddress?: string;
  /** Only include events that occurred on or after this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
  startDate?: Date;
  /** Only include events that occurred on or before this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
  endDate?: Date;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: EventInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface EventListInstanceOptions {
  /** Only include events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials. */
  actorSid?: string;
  /** Only include events of this [Event Type](https://www.twilio.com/docs/usage/monitor-events#event-types). */
  eventType?: string;
  /** Only include events that refer to this resource. Useful for discovering the history of a specific resource. */
  resourceSid?: string;
  /** Only include events that originated from this IP address. Useful for tracking suspicious activity originating from the API or the Twilio Console. */
  sourceIpAddress?: string;
  /** Only include events that occurred on or after this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
  startDate?: Date;
  /** Only include events that occurred on or before this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
  endDate?: Date;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface EventListInstancePageOptions {
  /** Only include events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials. */
  actorSid?: string;
  /** Only include events of this [Event Type](https://www.twilio.com/docs/usage/monitor-events#event-types). */
  eventType?: string;
  /** Only include events that refer to this resource. Useful for discovering the history of a specific resource. */
  resourceSid?: string;
  /** Only include events that originated from this IP address. Useful for tracking suspicious activity originating from the API or the Twilio Console. */
  sourceIpAddress?: string;
  /** Only include events that occurred on or after this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
  startDate?: Date;
  /** Only include events that occurred on or before this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
  endDate?: Date;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface EventContext {
  /**
   * Fetch a EventInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed EventInstance
   */
  fetch(
    callback?: (error: Error | null, item?: EventInstance) => any
  ): Promise<EventInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface EventContextSolution {
  sid: string;
}

export class EventContextImpl implements EventContext {
  protected _solution: EventContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Events/${sid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: EventInstance) => any
  ): Promise<EventInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new EventInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface EventPayload extends TwilioResponsePayload {
  events: EventResource[];
}

interface EventResource {
  account_sid: string;
  actor_sid: string;
  actor_type: string;
  description: string;
  event_data: any;
  event_date: Date;
  event_type: string;
  resource_sid: string;
  resource_type: string;
  sid: string;
  source: string;
  source_ip_address: string;
  url: string;
  links: Record<string, string>;
}

export class EventInstance {
  protected _solution: EventContextSolution;
  protected _context?: EventContext;

  constructor(protected _version: V1, payload: EventResource, sid?: string) {
    this.accountSid = payload.account_sid;
    this.actorSid = payload.actor_sid;
    this.actorType = payload.actor_type;
    this.description = payload.description;
    this.eventData = payload.event_data;
    this.eventDate = deserialize.iso8601DateTime(payload.event_date);
    this.eventType = payload.event_type;
    this.resourceSid = payload.resource_sid;
    this.resourceType = payload.resource_type;
    this.sid = payload.sid;
    this.source = payload.source;
    this.sourceIpAddress = payload.source_ip_address;
    this.url = payload.url;
    this.links = payload.links;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.
   */
  accountSid: string;
  /**
   * The SID of the actor that caused the event, if available. Can be `null`.
   */
  actorSid: string;
  /**
   * The type of actor that caused the event. Can be: `user` for a change made by a logged-in user in the Twilio Console, `account` for an event caused by an API request by an authenticating Account, `twilio-admin` for an event caused by a Twilio employee, and so on.
   */
  actorType: string;
  /**
   * A description of the event. Can be `null`.
   */
  description: string;
  /**
   * An object with additional data about the event. The  contents depend on `event_type`. For example, event-types of the form `RESOURCE.updated`, this value contains a `resource_properties` dictionary that describes the previous and updated properties of the resource.
   */
  eventData: any;
  /**
   * The date and time in GMT when the event was recorded specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  eventDate: Date;
  /**
   * The event\'s type. Event-types are typically in the form: `RESOURCE_TYPE.ACTION`, where `RESOURCE_TYPE` is the type of resource that was affected and `ACTION` is what happened to it. For example, `phone-number.created`. For a full list of all event-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).
   */
  eventType: string;
  /**
   * The SID of the resource that was affected.
   */
  resourceSid: string;
  /**
   * The type of resource that was affected. For a full list of all resource-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).
   */
  resourceType: string;
  /**
   * The unique string that we created to identify the Event resource.
   */
  sid: string;
  /**
   * The originating system or interface that caused the event.  Can be: `web` for events caused by user action in the Twilio Console, `api` for events caused by a request to our API, or   `twilio` for events caused by an automated or internal Twilio system.
   */
  source: string;
  /**
   * The IP address of the source, if the source is outside the Twilio cloud. This value is `null` for events with `source` of `twilio`
   */
  sourceIpAddress: string;
  /**
   * The absolute URL of the resource that was affected. Can be `null`.
   */
  url: string;
  /**
   * The absolute URLs of related resources.
   */
  links: Record<string, string>;

  private get _proxy(): EventContext {
    this._context =
      this._context || new EventContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a EventInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed EventInstance
   */
  fetch(
    callback?: (error: Error | null, item?: EventInstance) => any
  ): Promise<EventInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      actorSid: this.actorSid,
      actorType: this.actorType,
      description: this.description,
      eventData: this.eventData,
      eventDate: this.eventDate,
      eventType: this.eventType,
      resourceSid: this.resourceSid,
      resourceType: this.resourceType,
      sid: this.sid,
      source: this.source,
      sourceIpAddress: this.sourceIpAddress,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface EventSolution {}

export interface EventListInstance {
  _version: V1;
  _solution: EventSolution;
  _uri: string;

  (sid: string): EventContext;
  get(sid: string): EventContext;

  /**
   * Streams EventInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { EventListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: EventInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: EventListInstanceEachOptions,
    callback?: (item: EventInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of EventInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: EventPage) => any
  ): Promise<EventPage>;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { EventListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: EventInstance[]) => any
  ): Promise<EventInstance[]>;
  list(
    params: EventListInstanceOptions,
    callback?: (error: Error | null, items: EventInstance[]) => any
  ): Promise<EventInstance[]>;
  /**
   * Retrieve a single page of EventInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { EventListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: EventPage) => any
  ): Promise<EventPage>;
  page(
    params: EventListInstancePageOptions,
    callback?: (error: Error | null, items: EventPage) => any
  ): Promise<EventPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function EventListInstance(version: V1): EventListInstance {
  const instance = ((sid) => instance.get(sid)) as EventListInstance;

  instance.get = function get(sid): EventContext {
    return new EventContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Events`;

  instance.page = function page(
    params?:
      | EventListInstancePageOptions
      | ((error: Error | null, items: EventPage) => any),
    callback?: (error: Error | null, items: EventPage) => any
  ): Promise<EventPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["actorSid"] !== undefined) data["ActorSid"] = params["actorSid"];
    if (params["eventType"] !== undefined)
      data["EventType"] = params["eventType"];
    if (params["resourceSid"] !== undefined)
      data["ResourceSid"] = params["resourceSid"];
    if (params["sourceIpAddress"] !== undefined)
      data["SourceIpAddress"] = params["sourceIpAddress"];
    if (params["startDate"] !== undefined)
      data["StartDate"] = serialize.iso8601DateTime(params["startDate"]);
    if (params["endDate"] !== undefined)
      data["EndDate"] = serialize.iso8601DateTime(params["endDate"]);
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new EventPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: EventPage) => any
  ): Promise<EventPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) => new EventPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class EventPage extends Page<
  V1,
  EventPayload,
  EventResource,
  EventInstance
> {
  /**
   * Initialize the EventPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: EventSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of EventInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: EventResource): EventInstance {
    return new EventInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
