/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../../V2";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * Options to pass to fetch a MediaInstance
 */
export interface MediaContextFetchOptions {
  /** Grant access to PII Redacted/Unredacted Media. The default is `true` to access redacted media. */
  redacted?: boolean;
}

export interface MediaContext {
  /**
   * Fetch a MediaInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MediaInstance
   */
  fetch(
    callback?: (error: Error | null, item?: MediaInstance) => any
  ): Promise<MediaInstance>;
  /**
   * Fetch a MediaInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MediaInstance
   */
  fetch(
    params: MediaContextFetchOptions,
    callback?: (error: Error | null, item?: MediaInstance) => any
  ): Promise<MediaInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface MediaContextSolution {
  sid: string;
}

export class MediaContextImpl implements MediaContext {
  protected _solution: MediaContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Transcripts/${sid}/Media`;
  }

  fetch(
    params?:
      | MediaContextFetchOptions
      | ((error: Error | null, item?: MediaInstance) => any),
    callback?: (error: Error | null, item?: MediaInstance) => any
  ): Promise<MediaInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["redacted"] !== undefined)
      data["Redacted"] = serialize.bool(params["redacted"]);

    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new MediaInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface MediaPayload extends MediaResource {}

interface MediaResource {
  account_sid: string;
  media_url: string;
  service_sid: string;
  sid: string;
  url: string;
}

export class MediaInstance {
  protected _solution: MediaContextSolution;
  protected _context?: MediaContext;

  constructor(protected _version: V2, payload: MediaResource, sid: string) {
    this.accountSid = payload.account_sid;
    this.mediaUrl = payload.media_url;
    this.serviceSid = payload.service_sid;
    this.sid = payload.sid;
    this.url = payload.url;

    this._solution = { sid };
  }

  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * Downloadable URL for media, if stored in Twilio AI.
   */
  mediaUrl: string;
  /**
   * The unique SID identifier of the Service.
   */
  serviceSid: string;
  /**
   * The unique SID identifier of the Transcript.
   */
  sid: string;
  /**
   * The URL of this resource.
   */
  url: string;

  private get _proxy(): MediaContext {
    this._context =
      this._context || new MediaContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a MediaInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MediaInstance
   */
  fetch(
    callback?: (error: Error | null, item?: MediaInstance) => any
  ): Promise<MediaInstance>;
  /**
   * Fetch a MediaInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MediaInstance
   */
  fetch(
    params: MediaContextFetchOptions,
    callback?: (error: Error | null, item?: MediaInstance) => any
  ): Promise<MediaInstance>;

  fetch(
    params?: any,
    callback?: (error: Error | null, item?: MediaInstance) => any
  ): Promise<MediaInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      mediaUrl: this.mediaUrl,
      serviceSid: this.serviceSid,
      sid: this.sid,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface MediaSolution {
  sid: string;
}

export interface MediaListInstance {
  _version: V2;
  _solution: MediaSolution;
  _uri: string;

  (): MediaContext;
  get(): MediaContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function MediaListInstance(version: V2, sid: string): MediaListInstance {
  if (!isValidPathParam(sid)) {
    throw new Error("Parameter 'sid' is not valid.");
  }

  const instance = (() => instance.get()) as MediaListInstance;

  instance.get = function get(): MediaContext {
    return new MediaContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = { sid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
