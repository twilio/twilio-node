/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export interface OperatorAttachmentsContext {
  /**
   * Fetch a OperatorAttachmentsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed OperatorAttachmentsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: OperatorAttachmentsInstance) => any
  ): Promise<OperatorAttachmentsInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface OperatorAttachmentsContextSolution {
  serviceSid: string;
}

export class OperatorAttachmentsContextImpl
  implements OperatorAttachmentsContext
{
  protected _solution: OperatorAttachmentsContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, serviceSid: string) {
    if (!isValidPathParam(serviceSid)) {
      throw new Error("Parameter 'serviceSid' is not valid.");
    }

    this._solution = { serviceSid };
    this._uri = `/Services/${serviceSid}/Operators`;
  }

  fetch(
    callback?: (error: Error | null, item?: OperatorAttachmentsInstance) => any
  ): Promise<OperatorAttachmentsInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new OperatorAttachmentsInstance(
          operationVersion,
          payload,
          instance._solution.serviceSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface OperatorAttachmentsPayload extends OperatorAttachmentsResource {}

interface OperatorAttachmentsResource {
  service_sid: string;
  operator_sids: Array<string>;
  url: string;
}

export class OperatorAttachmentsInstance {
  protected _solution: OperatorAttachmentsContextSolution;
  protected _context?: OperatorAttachmentsContext;

  constructor(
    protected _version: V2,
    payload: OperatorAttachmentsResource,
    serviceSid?: string
  ) {
    this.serviceSid = payload.service_sid;
    this.operatorSids = payload.operator_sids;
    this.url = payload.url;

    this._solution = { serviceSid: serviceSid || this.serviceSid };
  }

  /**
   * The unique SID identifier of the Service.
   */
  serviceSid: string;
  /**
   * List of Operator SIDs attached to the service. Includes both Custom and Pre-built Operators.
   */
  operatorSids: Array<string>;
  /**
   * The URL of this resource.
   */
  url: string;

  private get _proxy(): OperatorAttachmentsContext {
    this._context =
      this._context ||
      new OperatorAttachmentsContextImpl(
        this._version,
        this._solution.serviceSid
      );
    return this._context;
  }

  /**
   * Fetch a OperatorAttachmentsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed OperatorAttachmentsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: OperatorAttachmentsInstance) => any
  ): Promise<OperatorAttachmentsInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      serviceSid: this.serviceSid,
      operatorSids: this.operatorSids,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface OperatorAttachmentsSolution {}

export interface OperatorAttachmentsListInstance {
  _version: V2;
  _solution: OperatorAttachmentsSolution;
  _uri: string;

  (serviceSid: string): OperatorAttachmentsContext;
  get(serviceSid: string): OperatorAttachmentsContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function OperatorAttachmentsListInstance(
  version: V2
): OperatorAttachmentsListInstance {
  const instance = ((serviceSid) =>
    instance.get(serviceSid)) as OperatorAttachmentsListInstance;

  instance.get = function get(serviceSid): OperatorAttachmentsContext {
    return new OperatorAttachmentsContextImpl(version, serviceSid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
