/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { MediaListInstance } from "./transcript/media";
import { OperatorResultListInstance } from "./transcript/operatorResult";
import { SentenceListInstance } from "./transcript/sentence";

export type TranscriptStatus =
  | "queued"
  | "in-progress"
  | "completed"
  | "failed"
  | "canceled";

/**
 * Options to pass to create a TranscriptInstance
 */
export interface TranscriptListInstanceCreateOptions {
  /** The unique SID identifier of the Service. */
  serviceSid: string;
  /** JSON object describing Media Channel including Source and Participants */
  channel: any;
  /** Used to store client provided metadata. Maximum of 64 double-byte UTF8 characters. */
  customerKey?: string;
  /** The date that this Transcript\\\'s media was started, given in ISO 8601 format. */
  mediaStartTime?: Date;
}
/**
 * Options to pass to each
 */
export interface TranscriptListInstanceEachOptions {
  /** The unique SID identifier of the Service. */
  serviceSid?: string;
  /** Filter by before StartTime. */
  beforeStartTime?: string;
  /** Filter by after StartTime. */
  afterStartTime?: string;
  /** Filter by before DateCreated. */
  beforeDateCreated?: string;
  /** Filter by after DateCreated. */
  afterDateCreated?: string;
  /** Filter by status. */
  status?: string;
  /** Filter by Language Code. */
  languageCode?: string;
  /** Filter by SourceSid. */
  sourceSid?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: TranscriptInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface TranscriptListInstanceOptions {
  /** The unique SID identifier of the Service. */
  serviceSid?: string;
  /** Filter by before StartTime. */
  beforeStartTime?: string;
  /** Filter by after StartTime. */
  afterStartTime?: string;
  /** Filter by before DateCreated. */
  beforeDateCreated?: string;
  /** Filter by after DateCreated. */
  afterDateCreated?: string;
  /** Filter by status. */
  status?: string;
  /** Filter by Language Code. */
  languageCode?: string;
  /** Filter by SourceSid. */
  sourceSid?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface TranscriptListInstancePageOptions {
  /** The unique SID identifier of the Service. */
  serviceSid?: string;
  /** Filter by before StartTime. */
  beforeStartTime?: string;
  /** Filter by after StartTime. */
  afterStartTime?: string;
  /** Filter by before DateCreated. */
  beforeDateCreated?: string;
  /** Filter by after DateCreated. */
  afterDateCreated?: string;
  /** Filter by status. */
  status?: string;
  /** Filter by Language Code. */
  languageCode?: string;
  /** Filter by SourceSid. */
  sourceSid?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface TranscriptContext {
  media: MediaListInstance;
  operatorResults: OperatorResultListInstance;
  sentences: SentenceListInstance;

  /**
   * Remove a TranscriptInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a TranscriptInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptInstance
   */
  fetch(
    callback?: (error: Error | null, item?: TranscriptInstance) => any
  ): Promise<TranscriptInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface TranscriptContextSolution {
  sid: string;
}

export class TranscriptContextImpl implements TranscriptContext {
  protected _solution: TranscriptContextSolution;
  protected _uri: string;

  protected _media?: MediaListInstance;
  protected _operatorResults?: OperatorResultListInstance;
  protected _sentences?: SentenceListInstance;

  constructor(protected _version: V2, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Transcripts/${sid}`;
  }

  get media(): MediaListInstance {
    this._media =
      this._media || MediaListInstance(this._version, this._solution.sid);
    return this._media;
  }

  get operatorResults(): OperatorResultListInstance {
    this._operatorResults =
      this._operatorResults ||
      OperatorResultListInstance(this._version, this._solution.sid);
    return this._operatorResults;
  }

  get sentences(): SentenceListInstance {
    this._sentences =
      this._sentences ||
      SentenceListInstance(this._version, this._solution.sid);
    return this._sentences;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: TranscriptInstance) => any
  ): Promise<TranscriptInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TranscriptInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface TranscriptPayload extends TwilioResponsePayload {
  transcripts: TranscriptResource[];
}

interface TranscriptResource {
  account_sid: string;
  service_sid: string;
  sid: string;
  date_created: Date;
  date_updated: Date;
  status: TranscriptStatus;
  channel: any;
  data_logging: boolean;
  language_code: string;
  customer_key: string;
  media_start_time: Date;
  duration: number;
  url: string;
  redaction: boolean;
  links: Record<string, string>;
}

export class TranscriptInstance {
  protected _solution: TranscriptContextSolution;
  protected _context?: TranscriptContext;

  constructor(
    protected _version: V2,
    payload: TranscriptResource,
    sid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.serviceSid = payload.service_sid;
    this.sid = payload.sid;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.status = payload.status;
    this.channel = payload.channel;
    this.dataLogging = payload.data_logging;
    this.languageCode = payload.language_code;
    this.customerKey = payload.customer_key;
    this.mediaStartTime = deserialize.iso8601DateTime(payload.media_start_time);
    this.duration = deserialize.integer(payload.duration);
    this.url = payload.url;
    this.redaction = payload.redaction;
    this.links = payload.links;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * The unique SID identifier of the Service.
   */
  serviceSid: string;
  /**
   * A 34 character string that uniquely identifies this Transcript.
   */
  sid: string;
  /**
   * The date that this Transcript was created, given in ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * The date that this Transcript was updated, given in ISO 8601 format.
   */
  dateUpdated: Date;
  status: TranscriptStatus;
  /**
   * Media Channel describing Transcript Source and Participant Mapping
   */
  channel: any;
  /**
   * Data logging allows Twilio to improve the quality of the speech recognition through using customer data to refine its speech recognition models.
   */
  dataLogging: boolean;
  /**
   * The default language code of the audio.
   */
  languageCode: string;
  customerKey: string;
  /**
   * The date that this Transcript\'s media was started, given in ISO 8601 format.
   */
  mediaStartTime: Date;
  /**
   * The duration of this Transcript\'s source
   */
  duration: number;
  /**
   * The URL of this resource.
   */
  url: string;
  /**
   * If the transcript has been redacted, a redacted alternative of the transcript will be available.
   */
  redaction: boolean;
  links: Record<string, string>;

  private get _proxy(): TranscriptContext {
    this._context =
      this._context ||
      new TranscriptContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Remove a TranscriptInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a TranscriptInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptInstance
   */
  fetch(
    callback?: (error: Error | null, item?: TranscriptInstance) => any
  ): Promise<TranscriptInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Access the media.
   */
  media(): MediaListInstance {
    return this._proxy.media;
  }

  /**
   * Access the operatorResults.
   */
  operatorResults(): OperatorResultListInstance {
    return this._proxy.operatorResults;
  }

  /**
   * Access the sentences.
   */
  sentences(): SentenceListInstance {
    return this._proxy.sentences;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      serviceSid: this.serviceSid,
      sid: this.sid,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      status: this.status,
      channel: this.channel,
      dataLogging: this.dataLogging,
      languageCode: this.languageCode,
      customerKey: this.customerKey,
      mediaStartTime: this.mediaStartTime,
      duration: this.duration,
      url: this.url,
      redaction: this.redaction,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface TranscriptSolution {}

export interface TranscriptListInstance {
  _version: V2;
  _solution: TranscriptSolution;
  _uri: string;

  (sid: string): TranscriptContext;
  get(sid: string): TranscriptContext;

  /**
   * Create a TranscriptInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptInstance
   */
  create(
    params: TranscriptListInstanceCreateOptions,
    callback?: (error: Error | null, item?: TranscriptInstance) => any
  ): Promise<TranscriptInstance>;

  /**
   * Streams TranscriptInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { TranscriptListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: TranscriptInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: TranscriptListInstanceEachOptions,
    callback?: (item: TranscriptInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of TranscriptInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: TranscriptPage) => any
  ): Promise<TranscriptPage>;
  /**
   * Lists TranscriptInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { TranscriptListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: TranscriptInstance[]) => any
  ): Promise<TranscriptInstance[]>;
  list(
    params: TranscriptListInstanceOptions,
    callback?: (error: Error | null, items: TranscriptInstance[]) => any
  ): Promise<TranscriptInstance[]>;
  /**
   * Retrieve a single page of TranscriptInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { TranscriptListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: TranscriptPage) => any
  ): Promise<TranscriptPage>;
  page(
    params: TranscriptListInstancePageOptions,
    callback?: (error: Error | null, items: TranscriptPage) => any
  ): Promise<TranscriptPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function TranscriptListInstance(version: V2): TranscriptListInstance {
  const instance = ((sid) => instance.get(sid)) as TranscriptListInstance;

  instance.get = function get(sid): TranscriptContext {
    return new TranscriptContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Transcripts`;

  instance.create = function create(
    params: TranscriptListInstanceCreateOptions,
    callback?: (error: Error | null, items: TranscriptInstance) => any
  ): Promise<TranscriptInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["serviceSid"] === null || params["serviceSid"] === undefined) {
      throw new Error("Required parameter \"params['serviceSid']\" missing.");
    }

    if (params["channel"] === null || params["channel"] === undefined) {
      throw new Error("Required parameter \"params['channel']\" missing.");
    }

    let data: any = {};

    data["ServiceSid"] = params["serviceSid"];

    data["Channel"] = serialize.object(params["channel"]);
    if (params["customerKey"] !== undefined)
      data["CustomerKey"] = params["customerKey"];
    if (params["mediaStartTime"] !== undefined)
      data["MediaStartTime"] = serialize.iso8601DateTime(
        params["mediaStartTime"]
      );

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new TranscriptInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | TranscriptListInstancePageOptions
      | ((error: Error | null, items: TranscriptPage) => any),
    callback?: (error: Error | null, items: TranscriptPage) => any
  ): Promise<TranscriptPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["serviceSid"] !== undefined)
      data["ServiceSid"] = params["serviceSid"];
    if (params["beforeStartTime"] !== undefined)
      data["BeforeStartTime"] = params["beforeStartTime"];
    if (params["afterStartTime"] !== undefined)
      data["AfterStartTime"] = params["afterStartTime"];
    if (params["beforeDateCreated"] !== undefined)
      data["BeforeDateCreated"] = params["beforeDateCreated"];
    if (params["afterDateCreated"] !== undefined)
      data["AfterDateCreated"] = params["afterDateCreated"];
    if (params["status"] !== undefined) data["Status"] = params["status"];
    if (params["languageCode"] !== undefined)
      data["LanguageCode"] = params["languageCode"];
    if (params["sourceSid"] !== undefined)
      data["SourceSid"] = params["sourceSid"];
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TranscriptPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: TranscriptPage) => any
  ): Promise<TranscriptPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new TranscriptPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class TranscriptPage extends Page<
  V2,
  TranscriptPayload,
  TranscriptResource,
  TranscriptInstance
> {
  /**
   * Initialize the TranscriptPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V2,
    response: Response<string>,
    solution: TranscriptSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of TranscriptInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TranscriptResource): TranscriptInstance {
    return new TranscriptInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
