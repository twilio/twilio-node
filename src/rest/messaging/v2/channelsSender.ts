/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * The Status of this Sender. One of `CREATING`, `ONLINE`, `OFFLINE`, `PENDING_VERIFICATION`, `VERIFYING` or `ONLINE:UPDATING`.
 */
export type ChannelsSenderStatus =
  | "CREATING"
  | "ONLINE"
  | "OFFLINE"
  | "PENDING_VERIFICATION"
  | "VERIFYING"
  | "ONLINE:UPDATING"
  | "STUBBED";

/**
 * Configuration settings for creating a sender, e.g., {\"waba_id\": \"1234567890\", \"verification_method\": \"sms\"}
 */
export class MessagingV2ChannelsSenderConfiguration {
  /**
   * The ID of the WhatsApp Business Account to use for this sender.
   */
  "waba_id"?: string | null;
  /**
   * The method to use for verification. Either \"sms\" or \"voice\".
   */
  "verification_method"?: string | null;
  /**
   * The verification code to use for this sender.
   */
  "verification_code"?: string | null;
  /**
   * The SID of the Twilio Voice application to use for this sender.
   */
  "voice_application_sid"?: string | null;
}

export class MessagingV2ChannelsSenderOfflineReasonsItems {
  /**
   * The error code.
   */
  "code"?: string | null;
  /**
   * The error message.
   */
  "message"?: string | null;
  /**
   * The URL to get more information about the error.
   */
  "more_info"?: string | null;
}

/**
 * Sender profile specific configurations, e.g., {\"name\": \"xxx\", \"about\": \"xxx\", \"address\": \"xxx\", \"description\": \"xxx\", \"email\": \"xxx@xxx\", \"logo_url\": \"https://xxx\", \"vertical\": \"xxx\", \"websites\": [\"https://xxx\", \"...\"]}
 */
export class MessagingV2ChannelsSenderProfile {
  /**
   * The name of the sender.
   */
  "name"?: string | null;
  /**
   * The about text of the sender.
   */
  "about"?: string | null;
  /**
   * The address of the sender.
   */
  "address"?: string | null;
  /**
   * The description of the sender.
   */
  "description"?: string | null;
  /**
   * The emails of the sender.
   */
  "emails"?: Array<MessagingV2ChannelsSenderProfileEmails> | null;
  /**
   * The logo URL of the sender.
   */
  "logo_url"?: string | null;
  /**
   * The vertical of the sender. Allowed values are: - \"Automotive\" - \"Beauty, Spa and Salon\" - \"Clothing and Apparel\" - \"Education\" - \"Entertainment\" - \"Event Planning and Service\" - \"Finance and Banking\" - \"Food and Grocery\" - \"Public Service\" - \"Hotel and Lodging\" - \"Medical and Health\" - \"Non-profit\" - \"Professional Services\" - \"Shopping and Retail\" - \"Travel and Transportation\" - \"Restaurant\" - \"Other\"
   */
  "vertical"?: string | null;
  /**
   * The websites of the sender.
   */
  "websites"?: Array<MessagingV2ChannelsSenderProfileWebsites> | null;
}

export class MessagingV2ChannelsSenderProfileEmails {
  /**
   * The email of the sender.
   */
  "email"?: string | null;
  /**
   * The label of the sender.
   */
  "label"?: string | null;
}

export class MessagingV2ChannelsSenderProfileWebsites {
  /**
   * The label of the sender.
   */
  "label"?: string | null;
  /**
   * The website of the sender.
   */
  "website"?: string | null;
}

/**
 * Sender specific additional properties, e.g., {\"quality_rating\": \"HIGH\", \"messaging_limit\": \"10K Customers/24hr\"}
 */
export class MessagingV2ChannelsSenderProperties {
  /**
   * The quality rating of the sender.
   */
  "quality_rating"?: string | null;
  /**
   * The messaging limit of the sender.
   */
  "messaging_limit"?: string | null;
}

export class MessagingV2ChannelsSenderRequestsCreate {
  /**
   * The ID of this Sender prefixed with the channel, e.g., `whatsapp:E.164`
   */
  "sender_id": string | null;
  "configuration"?: MessagingV2ChannelsSenderConfiguration | null;
  "webhook"?: MessagingV2ChannelsSenderWebhook | null;
  "profile"?: MessagingV2ChannelsSenderProfile | null;
}

export class MessagingV2ChannelsSenderRequestsUpdate {
  "configuration"?: MessagingV2ChannelsSenderConfiguration | null;
  "webhook"?: MessagingV2ChannelsSenderWebhook | null;
  "profile"?: MessagingV2ChannelsSenderProfile | null;
}

/**
 * Webhook specific configurations, e.g., {\"callback_url\": \"https://xxx\", \"callback_method\": \"POST\", \"fallback_url\": \"https://xxx\", \"fallback_method\": \"POST\", \"status_callback_url\": \"https://xxx\", \"status_callback_method\": \"POST\"}
 */
export class MessagingV2ChannelsSenderWebhook {
  /**
   * The URL to send the webhook to.
   */
  "callback_url"?: string | null;
  /**
   * The HTTP method to use for the webhook. Either \"POST\" or \"PUT\".
   */
  "callback_method"?: string | null;
  /**
   * The URL to send the fallback webhook to.
   */
  "fallback_url"?: string | null;
  /**
   * The HTTP method to use for the fallback webhook. Either \"POST\" or \"PUT\".
   */
  "fallback_method"?: string | null;
  /**
   * The URL to send the status callback to.
   */
  "status_callback_url"?: string | null;
  /**
   * The HTTP method to use for the status callback.
   */
  "status_callback_method"?: string | null;
}

/**
 * Options to pass to update a ChannelsSenderInstance
 */
export interface ChannelsSenderContextUpdateOptions {
  /**  */
  messagingV2ChannelsSenderRequestsUpdate?: MessagingV2ChannelsSenderRequestsUpdate;
}

/**
 * Options to pass to create a ChannelsSenderInstance
 */
export interface ChannelsSenderListInstanceCreateOptions {
  /**  */
  messagingV2ChannelsSenderRequestsCreate: MessagingV2ChannelsSenderRequestsCreate;
}
/**
 * Options to pass to each
 */
export interface ChannelsSenderListInstanceEachOptions {
  /**  */
  channel: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (
    item: ChannelsSenderInstance,
    done: (err?: Error) => void
  ) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface ChannelsSenderListInstanceOptions {
  /**  */
  channel: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface ChannelsSenderListInstancePageOptions {
  /**  */
  channel: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface ChannelsSenderContext {
  /**
   * Remove a ChannelsSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a ChannelsSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance>;

  /**
   * Update a ChannelsSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  update(
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance>;
  /**
   * Update a ChannelsSenderInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  update(
    params: MessagingV2ChannelsSenderRequestsUpdate,
    headers?: any,
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ChannelsSenderContextSolution {
  sid: string;
}

export class ChannelsSenderContextImpl implements ChannelsSenderContext {
  protected _solution: ChannelsSenderContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Channels/Senders/${sid}`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
        headers,
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ChannelsSenderInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | MessagingV2ChannelsSenderRequestsUpdate
      | ((error: Error | null, item?: ChannelsSenderInstance) => any),
    headers?: any,
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ChannelsSenderInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ChannelsSenderPayload extends TwilioResponsePayload {
  senders: ChannelsSenderResource[];
}

interface ChannelsSenderResource {
  sid: string;
  status: ChannelsSenderStatus;
  sender_id: string;
  configuration: MessagingV2ChannelsSenderConfiguration;
  webhook: MessagingV2ChannelsSenderWebhook;
  profile: MessagingV2ChannelsSenderProfile;
  properties: MessagingV2ChannelsSenderProperties;
  offline_reasons: Array<MessagingV2ChannelsSenderOfflineReasonsItems>;
  url: string;
}

export class ChannelsSenderInstance {
  protected _solution: ChannelsSenderContextSolution;
  protected _context?: ChannelsSenderContext;

  constructor(
    protected _version: V2,
    payload: ChannelsSenderResource,
    sid?: string
  ) {
    this.sid = payload.sid;
    this.status = payload.status;
    this.senderId = payload.sender_id;
    this.configuration = payload.configuration;
    this.webhook = payload.webhook;
    this.profile = payload.profile;
    this.properties = payload.properties;
    this.offlineReasons = payload.offline_reasons;
    this.url = payload.url;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * A 34 character string that uniquely identifies this Sender.
   */
  sid: string;
  status: ChannelsSenderStatus;
  /**
   * The ID of this Sender prefixed with the channel, e.g., `whatsapp:E.164`
   */
  senderId: string;
  configuration: MessagingV2ChannelsSenderConfiguration;
  webhook: MessagingV2ChannelsSenderWebhook;
  profile: MessagingV2ChannelsSenderProfile;
  properties: MessagingV2ChannelsSenderProperties;
  /**
   * Reasons why the sender is offline., e.g., [{\"code\": \"21211400\", \"message\": \"Whatsapp business account is banned by provider {provider_name} | Credit line is assigned to another BSP\", \"more_info\": \"https://www.twilio.com/docs/errors/21211400\"}]
   */
  offlineReasons: Array<MessagingV2ChannelsSenderOfflineReasonsItems>;
  /**
   * The URL of this resource, relative to `https://messaging.twilio.com`.
   */
  url: string;

  private get _proxy(): ChannelsSenderContext {
    this._context =
      this._context ||
      new ChannelsSenderContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Remove a ChannelsSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a ChannelsSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a ChannelsSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  update(
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance>;
  /**
   * Update a ChannelsSenderInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  update(
    params: MessagingV2ChannelsSenderRequestsUpdate,
    headers?: any,
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      status: this.status,
      senderId: this.senderId,
      configuration: this.configuration,
      webhook: this.webhook,
      profile: this.profile,
      properties: this.properties,
      offlineReasons: this.offlineReasons,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ChannelsSenderSolution {}

export interface ChannelsSenderListInstance {
  _version: V2;
  _solution: ChannelsSenderSolution;
  _uri: string;

  (sid: string): ChannelsSenderContext;
  get(sid: string): ChannelsSenderContext;

  /**
   * Create a ChannelsSenderInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelsSenderInstance
   */
  create(
    params: MessagingV2ChannelsSenderRequestsCreate,
    headers?: any,
    callback?: (error: Error | null, item?: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance>;

  /**
   * Streams ChannelsSenderInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ChannelsSenderListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */

  each(
    params: ChannelsSenderListInstanceEachOptions,
    callback?: (
      item: ChannelsSenderInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of ChannelsSenderInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ChannelsSenderPage) => any
  ): Promise<ChannelsSenderPage>;
  /**
   * Lists ChannelsSenderInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ChannelsSenderListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */

  list(
    params: ChannelsSenderListInstanceOptions,
    callback?: (error: Error | null, items: ChannelsSenderInstance[]) => any
  ): Promise<ChannelsSenderInstance[]>;
  /**
   * Retrieve a single page of ChannelsSenderInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ChannelsSenderListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */

  page(
    params: ChannelsSenderListInstancePageOptions,
    callback?: (error: Error | null, items: ChannelsSenderPage) => any
  ): Promise<ChannelsSenderPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ChannelsSenderListInstance(
  version: V2
): ChannelsSenderListInstance {
  const instance = ((sid) => instance.get(sid)) as ChannelsSenderListInstance;

  instance.get = function get(sid): ChannelsSenderContext {
    return new ChannelsSenderContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Channels/Senders`;

  instance.create = function create(
    params: MessagingV2ChannelsSenderRequestsCreate,
    headers?: any,
    callback?: (error: Error | null, items: ChannelsSenderInstance) => any
  ): Promise<ChannelsSenderInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ChannelsSenderInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params: ChannelsSenderListInstancePageOptions,
    callback?: (error: Error | null, items: ChannelsSenderPage) => any
  ): Promise<ChannelsSenderPage> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["channel"] === null || params["channel"] === undefined) {
      throw new Error("Required parameter \"params['channel']\" missing.");
    }

    let data: any = {};

    data["Channel"] = params["channel"];
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ChannelsSenderPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ChannelsSenderPage) => any
  ): Promise<ChannelsSenderPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new ChannelsSenderPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class ChannelsSenderPage extends Page<
  V2,
  ChannelsSenderPayload,
  ChannelsSenderResource,
  ChannelsSenderInstance
> {
  /**
   * Initialize the ChannelsSenderPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V2,
    response: Response<string>,
    solution: ChannelsSenderSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of ChannelsSenderInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ChannelsSenderResource): ChannelsSenderInstance {
    return new ChannelsSenderInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
