/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to create a TypingIndicatorInstance
 */
export interface TypingIndicatorListInstanceCreateOptions {
  /** Shared channel identifier */
  channel: string;
  /** Message SID that identifies the conversation thread for the typing indicator. Must be a valid Twilio Message SID (SM*) or Media SID (MM*) from an existing WhatsApp conversation.  */
  messageId: string;
}

export interface TypingIndicatorSolution {}

export interface TypingIndicatorListInstance {
  _version: V2;
  _solution: TypingIndicatorSolution;
  _uri: string;

  /**
   * Create a TypingIndicatorInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TypingIndicatorInstance
   */
  create(
    params: TypingIndicatorListInstanceCreateOptions,
    callback?: (error: Error | null, item?: TypingIndicatorInstance) => any
  ): Promise<TypingIndicatorInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function TypingIndicatorListInstance(
  version: V2
): TypingIndicatorListInstance {
  const instance = {} as TypingIndicatorListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Indicators/Typing.json`;

  instance.create = function create(
    params: TypingIndicatorListInstanceCreateOptions,
    callback?: (error: Error | null, items: TypingIndicatorInstance) => any
  ): Promise<TypingIndicatorInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["channel"] === null || params["channel"] === undefined) {
      throw new Error("Required parameter \"params['channel']\" missing.");
    }

    if (params["messageId"] === null || params["messageId"] === undefined) {
      throw new Error("Required parameter \"params['messageId']\" missing.");
    }

    let data: any = {};

    data["channel"] = params["channel"];

    data["messageId"] = params["messageId"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new TypingIndicatorInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface TypingIndicatorPayload extends TypingIndicatorResource {}

interface TypingIndicatorResource {
  success: boolean;
}

export class TypingIndicatorInstance {
  constructor(protected _version: V2, payload: TypingIndicatorResource) {
    this.success = payload.success;
  }

  /**
   * Indicates if the typing indicator was sent successfully.
   */
  success: boolean;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      success: this.success,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
