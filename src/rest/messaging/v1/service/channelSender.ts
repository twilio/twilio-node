/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * Options to pass to each
 */
export interface ChannelSenderListInstanceEachOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: ChannelSenderInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface ChannelSenderListInstanceOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface ChannelSenderListInstancePageOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface ChannelSenderContext {
  /**
   * Fetch a ChannelSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelSenderInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ChannelSenderInstance) => any
  ): Promise<ChannelSenderInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ChannelSenderContextSolution {
  messagingServiceSid: string;
  sid: string;
}

export class ChannelSenderContextImpl implements ChannelSenderContext {
  protected _solution: ChannelSenderContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V1,
    messagingServiceSid: string,
    sid: string
  ) {
    if (!isValidPathParam(messagingServiceSid)) {
      throw new Error("Parameter 'messagingServiceSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { messagingServiceSid, sid };
    this._uri = `/Services/${messagingServiceSid}/ChannelSenders/${sid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: ChannelSenderInstance) => any
  ): Promise<ChannelSenderInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ChannelSenderInstance(
          operationVersion,
          payload,
          instance._solution.messagingServiceSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ChannelSenderPayload extends TwilioResponsePayload {
  senders: ChannelSenderResource[];
}

interface ChannelSenderResource {
  account_sid: string;
  messaging_service_sid: string;
  sid: string;
  sender: string;
  sender_type: string;
  country_code: string;
  date_created: Date;
  date_updated: Date;
  url: string;
}

export class ChannelSenderInstance {
  protected _solution: ChannelSenderContextSolution;
  protected _context?: ChannelSenderContext;

  constructor(
    protected _version: V1,
    payload: ChannelSenderResource,
    messagingServiceSid: string,
    sid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.messagingServiceSid = payload.messaging_service_sid;
    this.sid = payload.sid;
    this.sender = payload.sender;
    this.senderType = payload.sender_type;
    this.countryCode = payload.country_code;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.url = payload.url;

    this._solution = { messagingServiceSid, sid: sid || this.sid };
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ChannelSender resource.
   */
  accountSid: string;
  /**
   * The SID of the [Service](https://www.twilio.com/docs/messaging/services) the resource is associated with.
   */
  messagingServiceSid: string;
  /**
   * The unique string that we created to identify the ChannelSender resource.
   */
  sid: string;
  /**
   * The unique string that identifies the sender e.g whatsapp:+123456XXXX.
   */
  sender: string;
  /**
   * A string value that identifies the sender type e.g WhatsApp, Messenger.
   */
  senderType: string;
  /**
   * The 2-character [ISO Country Code](https://www.iso.org/iso-3166-country-codes.html) of the number.
   */
  countryCode: string;
  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateUpdated: Date;
  /**
   * The absolute URL of the ChannelSender resource.
   */
  url: string;

  private get _proxy(): ChannelSenderContext {
    this._context =
      this._context ||
      new ChannelSenderContextImpl(
        this._version,
        this._solution.messagingServiceSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Fetch a ChannelSenderInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ChannelSenderInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ChannelSenderInstance) => any
  ): Promise<ChannelSenderInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      messagingServiceSid: this.messagingServiceSid,
      sid: this.sid,
      sender: this.sender,
      senderType: this.senderType,
      countryCode: this.countryCode,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ChannelSenderSolution {
  messagingServiceSid: string;
}

export interface ChannelSenderListInstance {
  _version: V1;
  _solution: ChannelSenderSolution;
  _uri: string;

  (sid: string): ChannelSenderContext;
  get(sid: string): ChannelSenderContext;

  /**
   * Streams ChannelSenderInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ChannelSenderListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (
      item: ChannelSenderInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  each(
    params: ChannelSenderListInstanceEachOptions,
    callback?: (
      item: ChannelSenderInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of ChannelSenderInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ChannelSenderPage) => any
  ): Promise<ChannelSenderPage>;
  /**
   * Lists ChannelSenderInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ChannelSenderListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: ChannelSenderInstance[]) => any
  ): Promise<ChannelSenderInstance[]>;
  list(
    params: ChannelSenderListInstanceOptions,
    callback?: (error: Error | null, items: ChannelSenderInstance[]) => any
  ): Promise<ChannelSenderInstance[]>;
  /**
   * Retrieve a single page of ChannelSenderInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { ChannelSenderListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: ChannelSenderPage) => any
  ): Promise<ChannelSenderPage>;
  page(
    params: ChannelSenderListInstancePageOptions,
    callback?: (error: Error | null, items: ChannelSenderPage) => any
  ): Promise<ChannelSenderPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ChannelSenderListInstance(
  version: V1,
  messagingServiceSid: string
): ChannelSenderListInstance {
  if (!isValidPathParam(messagingServiceSid)) {
    throw new Error("Parameter 'messagingServiceSid' is not valid.");
  }

  const instance = ((sid) => instance.get(sid)) as ChannelSenderListInstance;

  instance.get = function get(sid): ChannelSenderContext {
    return new ChannelSenderContextImpl(version, messagingServiceSid, sid);
  };

  instance._version = version;
  instance._solution = { messagingServiceSid };
  instance._uri = `/Services/${messagingServiceSid}/ChannelSenders`;

  instance.page = function page(
    params?:
      | ChannelSenderListInstancePageOptions
      | ((error: Error | null, items: ChannelSenderPage) => any),
    callback?: (error: Error | null, items: ChannelSenderPage) => any
  ): Promise<ChannelSenderPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ChannelSenderPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: ChannelSenderPage) => any
  ): Promise<ChannelSenderPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new ChannelSenderPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class ChannelSenderPage extends Page<
  V1,
  ChannelSenderPayload,
  ChannelSenderResource,
  ChannelSenderInstance
> {
  /**
   * Initialize the ChannelSenderPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: ChannelSenderSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of ChannelSenderInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ChannelSenderResource): ChannelSenderInstance {
    return new ChannelSenderInstance(
      this._version,
      payload,
      this._solution.messagingServiceSid
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
