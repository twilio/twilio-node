/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to fetch a DeactivationsInstance
 */
export interface DeactivationsContextFetchOptions {
  /** The request will return a list of all United States Phone Numbers that were deactivated on the day specified by this parameter. This date should be specified in YYYY-MM-DD format. */
  date?: Date;
}

export interface DeactivationsContext {
  /**
   * Fetch a DeactivationsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed DeactivationsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: DeactivationsInstance) => any
  ): Promise<DeactivationsInstance>;
  /**
   * Fetch a DeactivationsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed DeactivationsInstance
   */
  fetch(
    params: DeactivationsContextFetchOptions,
    callback?: (error: Error | null, item?: DeactivationsInstance) => any
  ): Promise<DeactivationsInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface DeactivationsContextSolution {}

export class DeactivationsContextImpl implements DeactivationsContext {
  protected _solution: DeactivationsContextSolution;
  protected _uri: string;

  constructor(protected _version: V1) {
    this._solution = {};
    this._uri = `/Deactivations`;
  }

  fetch(
    params?:
      | DeactivationsContextFetchOptions
      | ((error: Error | null, item?: DeactivationsInstance) => any),
    callback?: (error: Error | null, item?: DeactivationsInstance) => any
  ): Promise<DeactivationsInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["date"] !== undefined)
      data["Date"] = serialize.iso8601Date(params["date"]);

    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new DeactivationsInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface DeactivationsPayload extends DeactivationsResource {}

interface DeactivationsResource {
  redirect_to: string;
}

export class DeactivationsInstance {
  protected _solution: DeactivationsContextSolution;
  protected _context?: DeactivationsContext;

  constructor(protected _version: V1, payload: DeactivationsResource) {
    this.redirectTo = payload.redirect_to;

    this._solution = {};
  }

  /**
   * Returns an authenticated url that redirects to a file containing the deactivated numbers for the requested day. This url is valid for up to two minutes.
   */
  redirectTo: string;

  private get _proxy(): DeactivationsContext {
    this._context =
      this._context || new DeactivationsContextImpl(this._version);
    return this._context;
  }

  /**
   * Fetch a DeactivationsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed DeactivationsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: DeactivationsInstance) => any
  ): Promise<DeactivationsInstance>;
  /**
   * Fetch a DeactivationsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed DeactivationsInstance
   */
  fetch(
    params: DeactivationsContextFetchOptions,
    callback?: (error: Error | null, item?: DeactivationsInstance) => any
  ): Promise<DeactivationsInstance>;

  fetch(
    params?: any,
    callback?: (error: Error | null, item?: DeactivationsInstance) => any
  ): Promise<DeactivationsInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      redirectTo: this.redirectTo,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface DeactivationsSolution {}

export interface DeactivationsListInstance {
  _version: V1;
  _solution: DeactivationsSolution;
  _uri: string;

  (): DeactivationsContext;
  get(): DeactivationsContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function DeactivationsListInstance(
  version: V1
): DeactivationsListInstance {
  const instance = (() => instance.get()) as DeactivationsListInstance;

  instance.get = function get(): DeactivationsContext {
    return new DeactivationsContextImpl(version);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
