/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Iam
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to update a ApiKeyInstance
 */
export interface ApiKeyContextUpdateOptions {
  /** A descriptive string that you create to describe the resource. It can be up to 64 characters long. */
  friendlyName?: string;
  /** The \\\\`Policy\\\\` object is a collection that specifies the allowed Twilio permissions for the restricted key. For more information on the permissions available with restricted API keys, refer to the [Twilio documentation](https://www.twilio.com/docs/iam/api-keys/restricted-api-keys#permissions-available-with-restricted-api-keys). */
  policy?: any;
}

export interface ApiKeyContext {
  /**
   * Remove a ApiKeyInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a ApiKeyInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApiKeyInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance>;

  /**
   * Update a ApiKeyInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApiKeyInstance
   */
  update(
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance>;
  /**
   * Update a ApiKeyInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApiKeyInstance
   */
  update(
    params: ApiKeyContextUpdateOptions,
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ApiKeyContextSolution {
  sid: string;
}

export class ApiKeyContextImpl implements ApiKeyContext {
  protected _solution: ApiKeyContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Keys/${sid}`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
        headers,
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ApiKeyInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | ApiKeyContextUpdateOptions
      | ((error: Error | null, item?: ApiKeyInstance) => any),
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];
    if (params["policy"] !== undefined)
      data["Policy"] = serialize.object(params["policy"]);

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ApiKeyInstance(operationVersion, payload, instance._solution.sid)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ApiKeyPayload extends ApiKeyResource {}

interface ApiKeyResource {
  sid: string;
  friendly_name: string;
  date_created: Date;
  date_updated: Date;
  policy: Record<string, object>;
}

export class ApiKeyInstance {
  protected _solution: ApiKeyContextSolution;
  protected _context?: ApiKeyContext;

  constructor(protected _version: V1, payload: ApiKeyResource, sid?: string) {
    this.sid = payload.sid;
    this.friendlyName = payload.friendly_name;
    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
    this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
    this.policy = payload.policy;

    this._solution = { sid: sid || this.sid };
  }

  /**
   * The unique string that we created to identify the Key resource.
   */
  sid: string;
  /**
   * The string that you assigned to describe the resource.
   */
  friendlyName: string;
  /**
   * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateUpdated: Date;
  /**
   * The \\`Policy\\` object is a collection that specifies the allowed Twilio permissions for the restricted key. For more information on the permissions available with restricted API keys, refer to the [Twilio documentation](https://www.twilio.com/docs/iam/api-keys/restricted-api-keys#permissions-available-with-restricted-api-keys).
   */
  policy: Record<string, object>;

  private get _proxy(): ApiKeyContext {
    this._context =
      this._context || new ApiKeyContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Remove a ApiKeyInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a ApiKeyInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApiKeyInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a ApiKeyInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApiKeyInstance
   */
  update(
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance>;
  /**
   * Update a ApiKeyInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApiKeyInstance
   */
  update(
    params: ApiKeyContextUpdateOptions,
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: ApiKeyInstance) => any
  ): Promise<ApiKeyInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      friendlyName: this.friendlyName,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      policy: this.policy,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ApiKeySolution {}

export interface ApiKeyListInstance {
  _version: V1;
  _solution: ApiKeySolution;
  _uri: string;

  (sid: string): ApiKeyContext;
  get(sid: string): ApiKeyContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ApiKeyListInstance(version: V1): ApiKeyListInstance {
  const instance = ((sid) => instance.get(sid)) as ApiKeyListInstance;

  instance.get = function get(sid): ApiKeyContext {
    return new ApiKeyContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
