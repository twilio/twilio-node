/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to fetch a MessagingGeopermissionsInstance
 */
export interface MessagingGeopermissionsListInstanceFetchOptions {
  /** The country code to filter the geo permissions. If provided, only the geo permission for the specified country will be returned. */
  countryCode?: string;
}

/**
 * Options to pass to update a MessagingGeopermissionsInstance
 */
export interface MessagingGeopermissionsListInstanceUpdateOptions {
  /** A list of objects where each object represents the Geo Permission to be updated. Each object contains the following fields: `country_code`, unique code for each country of Geo Permission; `type`, permission type of the Geo Permission i.e. country; `enabled`, configure true for enabling the Geo Permission, false for disabling the Geo Permission. */
  permissions: Array<any>;
}

export interface MessagingGeopermissionsSolution {}

export interface MessagingGeopermissionsListInstance {
  _version: V1;
  _solution: MessagingGeopermissionsSolution;
  _uri: string;

  /**
   * Fetch a MessagingGeopermissionsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MessagingGeopermissionsInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: MessagingGeopermissionsInstance
    ) => any
  ): Promise<MessagingGeopermissionsInstance>;
  /**
   * Fetch a MessagingGeopermissionsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MessagingGeopermissionsInstance
   */
  fetch(
    params: MessagingGeopermissionsListInstanceFetchOptions,
    callback?: (
      error: Error | null,
      item?: MessagingGeopermissionsInstance
    ) => any
  ): Promise<MessagingGeopermissionsInstance>;

  /**
   * Update a MessagingGeopermissionsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed MessagingGeopermissionsInstance
   */
  update(
    params: MessagingGeopermissionsListInstanceUpdateOptions,
    callback?: (
      error: Error | null,
      item?: MessagingGeopermissionsInstance
    ) => any
  ): Promise<MessagingGeopermissionsInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function MessagingGeopermissionsListInstance(
  version: V1
): MessagingGeopermissionsListInstance {
  const instance = {} as MessagingGeopermissionsListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Messaging/GeoPermissions`;

  instance.fetch = function fetch(
    params?:
      | MessagingGeopermissionsListInstanceFetchOptions
      | ((error: Error | null, items: MessagingGeopermissionsInstance) => any),
    callback?: (
      error: Error | null,
      items: MessagingGeopermissionsInstance
    ) => any
  ): Promise<MessagingGeopermissionsInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["countryCode"] !== undefined)
      data["CountryCode"] = params["countryCode"];

    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new MessagingGeopermissionsInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.update = function update(
    params: MessagingGeopermissionsListInstanceUpdateOptions,
    callback?: (
      error: Error | null,
      items: MessagingGeopermissionsInstance
    ) => any
  ): Promise<MessagingGeopermissionsInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["permissions"] === null || params["permissions"] === undefined) {
      throw new Error("Required parameter \"params['permissions']\" missing.");
    }

    let data: any = {};

    data["Permissions"] = serialize.map(params["permissions"], (e: any) =>
      serialize.object(e)
    );

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "patch",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new MessagingGeopermissionsInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface MessagingGeopermissionsPayload
  extends MessagingGeopermissionsResource {}

interface MessagingGeopermissionsResource {
  permissions: any;
}

export class MessagingGeopermissionsInstance {
  constructor(
    protected _version: V1,
    payload: MessagingGeopermissionsResource
  ) {
    this.permissions = payload.permissions;
  }

  /**
   * A list of objects where each object represents the result of processing a messaging Geo Permission. Each object contains the following fields: `country_code`, the country code of the country for which the permission was updated; `type`, the type of the permission i.e. country; `enabled`, true if the permission is enabled else false; `error_code`, an integer where 0 indicates success and any non-zero value represents an error; and `error_messages`, an array of strings describing specific validation errors encountered. If the request is successful, the error_messages array will be empty.
   */
  permissions: any;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      permissions: this.permissions,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
