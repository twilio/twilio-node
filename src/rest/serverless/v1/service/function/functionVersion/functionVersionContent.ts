/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../../../../V1";
const deserialize = require("../../../../../../base/deserialize");
const serialize = require("../../../../../../base/serialize");
import { isValidPathParam } from "../../../../../../base/utility";

export interface FunctionVersionContentContext {
  /**
   * Fetch a FunctionVersionContentInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FunctionVersionContentInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: FunctionVersionContentInstance
    ) => any
  ): Promise<FunctionVersionContentInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface FunctionVersionContentContextSolution {
  serviceSid: string;
  functionSid: string;
  sid: string;
}

export class FunctionVersionContentContextImpl
  implements FunctionVersionContentContext
{
  protected _solution: FunctionVersionContentContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V1,
    serviceSid: string,
    functionSid: string,
    sid: string
  ) {
    if (!isValidPathParam(serviceSid)) {
      throw new Error("Parameter 'serviceSid' is not valid.");
    }

    if (!isValidPathParam(functionSid)) {
      throw new Error("Parameter 'functionSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { serviceSid, functionSid, sid };
    this._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions/${sid}/Content`;
  }

  fetch(
    callback?: (
      error: Error | null,
      item?: FunctionVersionContentInstance
    ) => any
  ): Promise<FunctionVersionContentInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FunctionVersionContentInstance(
          operationVersion,
          payload,
          instance._solution.serviceSid,
          instance._solution.functionSid,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface FunctionVersionContentPayload
  extends FunctionVersionContentResource {}

interface FunctionVersionContentResource {
  sid: string;
  account_sid: string;
  service_sid: string;
  function_sid: string;
  content: string;
  url: string;
}

export class FunctionVersionContentInstance {
  protected _solution: FunctionVersionContentContextSolution;
  protected _context?: FunctionVersionContentContext;

  constructor(
    protected _version: V1,
    payload: FunctionVersionContentResource,
    serviceSid: string,
    functionSid: string,
    sid: string
  ) {
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.serviceSid = payload.service_sid;
    this.functionSid = payload.function_sid;
    this.content = payload.content;
    this.url = payload.url;

    this._solution = { serviceSid, functionSid, sid };
  }

  /**
   * The unique string that we created to identify the Function Version resource.
   */
  sid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Function Version resource.
   */
  accountSid: string;
  /**
   * The SID of the Service that the Function Version resource is associated with.
   */
  serviceSid: string;
  /**
   * The SID of the Function that is the parent of the Function Version.
   */
  functionSid: string;
  /**
   * The content of the Function Version resource.
   */
  content: string;
  url: string;

  private get _proxy(): FunctionVersionContentContext {
    this._context =
      this._context ||
      new FunctionVersionContentContextImpl(
        this._version,
        this._solution.serviceSid,
        this._solution.functionSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Fetch a FunctionVersionContentInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FunctionVersionContentInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: FunctionVersionContentInstance
    ) => any
  ): Promise<FunctionVersionContentInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      serviceSid: this.serviceSid,
      functionSid: this.functionSid,
      content: this.content,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface FunctionVersionContentSolution {
  serviceSid: string;
  functionSid: string;
  sid: string;
}

export interface FunctionVersionContentListInstance {
  _version: V1;
  _solution: FunctionVersionContentSolution;
  _uri: string;

  (): FunctionVersionContentContext;
  get(): FunctionVersionContentContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function FunctionVersionContentListInstance(
  version: V1,
  serviceSid: string,
  functionSid: string,
  sid: string
): FunctionVersionContentListInstance {
  if (!isValidPathParam(serviceSid)) {
    throw new Error("Parameter 'serviceSid' is not valid.");
  }

  if (!isValidPathParam(functionSid)) {
    throw new Error("Parameter 'functionSid' is not valid.");
  }

  if (!isValidPathParam(sid)) {
    throw new Error("Parameter 'sid' is not valid.");
  }

  const instance = (() => instance.get()) as FunctionVersionContentListInstance;

  instance.get = function get(): FunctionVersionContentContext {
    return new FunctionVersionContentContextImpl(
      version,
      serviceSid,
      functionSid,
      sid
    );
  };

  instance._version = version;
  instance._solution = { serviceSid, functionSid, sid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
