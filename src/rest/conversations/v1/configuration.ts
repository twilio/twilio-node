/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { WebhookListInstance } from "./configuration/webhook";

/**
 * Options to pass to update a ConfigurationInstance
 */
export interface ConfigurationContextUpdateOptions {
  /** The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation. */
  defaultChatServiceSid?: string;
  /** The SID of the default [Messaging Service](https://www.twilio.com/docs/sms/services/api) to use when creating a conversation. */
  defaultMessagingServiceSid?: string;
  /** Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute. */
  defaultInactiveTimer?: string;
  /** Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes. */
  defaultClosedTimer?: string;
}

export interface ConfigurationContext {
  /**
   * Fetch a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfigurationInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance>;

  /**
   * Update a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfigurationInstance
   */
  update(
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance>;
  /**
   * Update a ConfigurationInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfigurationInstance
   */
  update(
    params: ConfigurationContextUpdateOptions,
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ConfigurationContextSolution {}

export class ConfigurationContextImpl implements ConfigurationContext {
  protected _solution: ConfigurationContextSolution;
  protected _uri: string;

  constructor(protected _version: V1) {
    this._solution = {};
    this._uri = `/Configuration`;
  }

  fetch(
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) => new ConfigurationInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | ConfigurationContextUpdateOptions
      | ((error: Error | null, item?: ConfigurationInstance) => any),
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["defaultChatServiceSid"] !== undefined)
      data["DefaultChatServiceSid"] = params["defaultChatServiceSid"];
    if (params["defaultMessagingServiceSid"] !== undefined)
      data["DefaultMessagingServiceSid"] = params["defaultMessagingServiceSid"];
    if (params["defaultInactiveTimer"] !== undefined)
      data["DefaultInactiveTimer"] = params["defaultInactiveTimer"];
    if (params["defaultClosedTimer"] !== undefined)
      data["DefaultClosedTimer"] = params["defaultClosedTimer"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ConfigurationInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ConfigurationPayload extends ConfigurationResource {}

interface ConfigurationResource {
  account_sid: string;
  default_chat_service_sid: string;
  default_messaging_service_sid: string;
  default_inactive_timer: string;
  default_closed_timer: string;
  url: string;
  links: Record<string, string>;
}

export class ConfigurationInstance {
  protected _solution: ConfigurationContextSolution;
  protected _context?: ConfigurationContext;

  constructor(protected _version: V1, payload: ConfigurationResource) {
    this.accountSid = payload.account_sid;
    this.defaultChatServiceSid = payload.default_chat_service_sid;
    this.defaultMessagingServiceSid = payload.default_messaging_service_sid;
    this.defaultInactiveTimer = payload.default_inactive_timer;
    this.defaultClosedTimer = payload.default_closed_timer;
    this.url = payload.url;
    this.links = payload.links;

    this._solution = {};
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this configuration.
   */
  accountSid: string;
  /**
   * The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) used when creating a conversation.
   */
  defaultChatServiceSid: string;
  /**
   * The SID of the default [Messaging Service](https://www.twilio.com/docs/sms/services/api) used when creating a conversation.
   */
  defaultMessagingServiceSid: string;
  /**
   * Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
   */
  defaultInactiveTimer: string;
  /**
   * Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
   */
  defaultClosedTimer: string;
  /**
   * An absolute API resource URL for this global configuration.
   */
  url: string;
  /**
   * Contains absolute API resource URLs to access the webhook and default service configurations.
   */
  links: Record<string, string>;

  private get _proxy(): ConfigurationContext {
    this._context =
      this._context || new ConfigurationContextImpl(this._version);
    return this._context;
  }

  /**
   * Fetch a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfigurationInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfigurationInstance
   */
  update(
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance>;
  /**
   * Update a ConfigurationInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ConfigurationInstance
   */
  update(
    params: ConfigurationContextUpdateOptions,
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: ConfigurationInstance) => any
  ): Promise<ConfigurationInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      defaultChatServiceSid: this.defaultChatServiceSid,
      defaultMessagingServiceSid: this.defaultMessagingServiceSid,
      defaultInactiveTimer: this.defaultInactiveTimer,
      defaultClosedTimer: this.defaultClosedTimer,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ConfigurationSolution {}

export interface ConfigurationListInstance {
  _version: V1;
  _solution: ConfigurationSolution;
  _uri: string;

  (): ConfigurationContext;
  get(): ConfigurationContext;

  _webhooks?: WebhookListInstance;
  webhooks: WebhookListInstance;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ConfigurationListInstance(
  version: V1
): ConfigurationListInstance {
  const instance = (() => instance.get()) as ConfigurationListInstance;

  instance.get = function get(): ConfigurationContext {
    return new ConfigurationContextImpl(version);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  Object.defineProperty(instance, "webhooks", {
    get: function webhooks() {
      if (!instance._webhooks) {
        instance._webhooks = WebhookListInstance(instance._version);
      }
      return instance._webhooks;
    },
  });

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
