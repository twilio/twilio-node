/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import Versionless from "../../Versionless";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * Options to pass to each
 */
export interface AccountListInstanceEachOptions {
  /**  */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: AccountInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface AccountListInstanceOptions {
  /**  */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface AccountListInstancePageOptions {
  /**  */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface AccountContext {
  /**
   * Fetch a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  fetch(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface AccountContextSolution {
  organizationSid: string;
  accountSid: string;
}

export class AccountContextImpl implements AccountContext {
  protected _solution: AccountContextSolution;
  protected _uri: string;

  constructor(
    protected _version: Versionless,
    organizationSid: string,
    accountSid: string
  ) {
    if (!isValidPathParam(organizationSid)) {
      throw new Error("Parameter 'organizationSid' is not valid.");
    }

    if (!isValidPathParam(accountSid)) {
      throw new Error("Parameter 'accountSid' is not valid.");
    }

    this._solution = { organizationSid, accountSid };
    this._uri = `/${organizationSid}/Accounts/${accountSid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new AccountInstance(
          operationVersion,
          payload,
          instance._solution.organizationSid,
          instance._solution.accountSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface AccountPayload extends TwilioResponsePayload {
  content: AccountResource[];
}

interface AccountResource {
  account_sid: string;
  friendly_name: string;
  status: string;
  owner_sid: string;
  date_created: Date;
}

/**
 * Page content
 */
export class AccountInstance {
  protected _solution: AccountContextSolution;
  protected _context?: AccountContext;

  constructor(
    protected _version: Versionless,
    payload: AccountResource,
    organizationSid: string,
    accountSid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.friendlyName = payload.friendly_name;
    this.status = payload.status;
    this.ownerSid = payload.owner_sid;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);

    this._solution = {
      organizationSid,
      accountSid: accountSid || this.accountSid,
    };
  }

  /**
   * Twilio account sid
   */
  accountSid: string;
  /**
   * Account friendly name
   */
  friendlyName: string;
  /**
   * Account status
   */
  status: string;
  /**
   * Twilio account sid
   */
  ownerSid: string;
  /**
   * The date and time when the account was created in the system
   */
  dateCreated: Date;

  private get _proxy(): AccountContext {
    this._context =
      this._context ||
      new AccountContextImpl(
        this._version,
        this._solution.organizationSid,
        this._solution.accountSid
      );
    return this._context;
  }

  /**
   * Fetch a AccountInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AccountInstance
   */
  fetch(
    callback?: (error: Error | null, item?: AccountInstance) => any
  ): Promise<AccountInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      friendlyName: this.friendlyName,
      status: this.status,
      ownerSid: this.ownerSid,
      dateCreated: this.dateCreated,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface AccountSolution {
  organizationSid: string;
}

export interface AccountListInstance {
  _version: Versionless;
  _solution: AccountSolution;
  _uri: string;

  (accountSid: string): AccountContext;
  get(accountSid: string): AccountContext;

  /**
   * Streams AccountInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AccountListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (item: AccountInstance, done: (err?: Error) => void) => void
  ): void;
  each(
    params: AccountListInstanceEachOptions,
    callback?: (item: AccountInstance, done: (err?: Error) => void) => void
  ): void;
  /**
   * Retrieve a single target page of AccountInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage>;
  /**
   * Lists AccountInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AccountListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: AccountInstance[]) => any
  ): Promise<AccountInstance[]>;
  list(
    params: AccountListInstanceOptions,
    callback?: (error: Error | null, items: AccountInstance[]) => any
  ): Promise<AccountInstance[]>;
  /**
   * Retrieve a single page of AccountInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AccountListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage>;
  page(
    params: AccountListInstancePageOptions,
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function AccountListInstance(
  version: Versionless,
  organizationSid: string
): AccountListInstance {
  if (!isValidPathParam(organizationSid)) {
    throw new Error("Parameter 'organizationSid' is not valid.");
  }

  const instance = ((accountSid) =>
    instance.get(accountSid)) as AccountListInstance;

  instance.get = function get(accountSid): AccountContext {
    return new AccountContextImpl(version, organizationSid, accountSid);
  };

  instance._version = version;
  instance._solution = { organizationSid };
  instance._uri = `/${organizationSid}/Accounts`;

  instance.page = function page(
    params?:
      | AccountListInstancePageOptions
      | ((error: Error | null, items: AccountPage) => any),
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new AccountPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: AccountPage) => any
  ): Promise<AccountPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new AccountPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class AccountPage extends Page<
  Versionless,
  AccountPayload,
  AccountResource,
  AccountInstance
> {
  /**
   * Initialize the AccountPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: Versionless,
    response: Response<string>,
    solution: AccountSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of AccountInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AccountResource): AccountInstance {
    return new AccountInstance(
      this._version,
      payload,
      this._solution.organizationSid
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
