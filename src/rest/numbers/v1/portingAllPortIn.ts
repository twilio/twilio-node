/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to each
 */
export interface PortingAllPortInListInstanceEachOptions {
  /** Page start token, if null then it will start from the beginning */
  token?: string;
  /** Number of items per page */
  size?: number;
  /** Filter by Port in request SID, supports multiple values separated by comma */
  portInRequestSid?: string;
  /** Filter by Port In request status */
  portInRequestStatus?: string;
  /** Find all created before a certain date */
  createdBefore?: Date;
  /** Find all created after a certain date */
  createdAfter?: Date;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (
    item: PortingAllPortInInstance,
    done: (err?: Error) => void
  ) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface PortingAllPortInListInstanceOptions {
  /** Page start token, if null then it will start from the beginning */
  token?: string;
  /** Number of items per page */
  size?: number;
  /** Filter by Port in request SID, supports multiple values separated by comma */
  portInRequestSid?: string;
  /** Filter by Port In request status */
  portInRequestStatus?: string;
  /** Find all created before a certain date */
  createdBefore?: Date;
  /** Find all created after a certain date */
  createdAfter?: Date;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface PortingAllPortInListInstancePageOptions {
  /** Page start token, if null then it will start from the beginning */
  token?: string;
  /** Number of items per page */
  size?: number;
  /** Filter by Port in request SID, supports multiple values separated by comma */
  portInRequestSid?: string;
  /** Filter by Port In request status */
  portInRequestStatus?: string;
  /** Find all created before a certain date */
  createdBefore?: Date;
  /** Find all created after a certain date */
  createdAfter?: Date;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface PortingAllPortInSolution {}

export interface PortingAllPortInListInstance {
  _version: V1;
  _solution: PortingAllPortInSolution;
  _uri: string;

  /**
   * Streams PortingAllPortInInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PortingAllPortInListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (
      item: PortingAllPortInInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  each(
    params: PortingAllPortInListInstanceEachOptions,
    callback?: (
      item: PortingAllPortInInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of PortingAllPortInInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: PortingAllPortInPage) => any
  ): Promise<PortingAllPortInPage>;
  /**
   * Lists PortingAllPortInInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PortingAllPortInListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: PortingAllPortInInstance[]) => any
  ): Promise<PortingAllPortInInstance[]>;
  list(
    params: PortingAllPortInListInstanceOptions,
    callback?: (error: Error | null, items: PortingAllPortInInstance[]) => any
  ): Promise<PortingAllPortInInstance[]>;
  /**
   * Retrieve a single page of PortingAllPortInInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { PortingAllPortInListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: PortingAllPortInPage) => any
  ): Promise<PortingAllPortInPage>;
  page(
    params: PortingAllPortInListInstancePageOptions,
    callback?: (error: Error | null, items: PortingAllPortInPage) => any
  ): Promise<PortingAllPortInPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PortingAllPortInListInstance(
  version: V1
): PortingAllPortInListInstance {
  const instance = {} as PortingAllPortInListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Porting/PortIn/PortInRequests`;

  instance.page = function page(
    params?:
      | PortingAllPortInListInstancePageOptions
      | ((error: Error | null, items: PortingAllPortInPage) => any),
    callback?: (error: Error | null, items: PortingAllPortInPage) => any
  ): Promise<PortingAllPortInPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["token"] !== undefined) data["Token"] = params["token"];
    if (params["size"] !== undefined) data["Size"] = params["size"];
    if (params["portInRequestSid"] !== undefined)
      data["PortInRequestSid"] = params["portInRequestSid"];
    if (params["portInRequestStatus"] !== undefined)
      data["PortInRequestStatus"] = params["portInRequestStatus"];
    if (params["createdBefore"] !== undefined)
      data["CreatedBefore"] = serialize.iso8601DateTime(
        params["createdBefore"]
      );
    if (params["createdAfter"] !== undefined)
      data["CreatedAfter"] = serialize.iso8601DateTime(params["createdAfter"]);

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PortingAllPortInPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: PortingAllPortInPage) => any
  ): Promise<PortingAllPortInPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new PortingAllPortInPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface PortingAllPortInPayload extends TwilioResponsePayload {
  port_in_requests: PortingAllPortInResource[];
}

interface PortingAllPortInResource {
  port_in_request_sid: string;
  port_in_request_status: string;
  status_last_updated_timestamp: string;
  phone_numbers_requested: number;
  phone_numbers_ported: number;
  suggested_action: string;
}

export class PortingAllPortInInstance {
  constructor(protected _version: V1, payload: PortingAllPortInResource) {
    this.portInRequestSid = payload.port_in_request_sid;
    this.portInRequestStatus = payload.port_in_request_status;
    this.statusLastUpdatedTimestamp = payload.status_last_updated_timestamp;
    this.phoneNumbersRequested = deserialize.integer(
      payload.phone_numbers_requested
    );
    this.phoneNumbersPorted = deserialize.integer(payload.phone_numbers_ported);
    this.suggestedAction = payload.suggested_action;
  }

  /**
   * The SID of the Port-in request
   */
  portInRequestSid: string;
  /**
   * Status of the Port In Request
   */
  portInRequestStatus: string;
  /**
   * The last updated timestamp of the request
   */
  statusLastUpdatedTimestamp: string;
  /**
   * Amount of phone numbers requested
   */
  phoneNumbersRequested: number;
  /**
   * Amount of phone numbers ported
   */
  phoneNumbersPorted: number;
  /**
   * Suggested action on this ticket
   */
  suggestedAction: string;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      portInRequestSid: this.portInRequestSid,
      portInRequestStatus: this.portInRequestStatus,
      statusLastUpdatedTimestamp: this.statusLastUpdatedTimestamp,
      phoneNumbersRequested: this.phoneNumbersRequested,
      phoneNumbersPorted: this.phoneNumbersPorted,
      suggestedAction: this.suggestedAction,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export class PortingAllPortInPage extends Page<
  V1,
  PortingAllPortInPayload,
  PortingAllPortInResource,
  PortingAllPortInInstance
> {
  /**
   * Initialize the PortingAllPortInPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: PortingAllPortInSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of PortingAllPortInInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: PortingAllPortInResource): PortingAllPortInInstance {
    return new PortingAllPortInInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
