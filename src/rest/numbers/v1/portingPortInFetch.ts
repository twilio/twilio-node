/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export interface PortingPortInFetchContext {
  /**
   * Fetch a PortingPortInFetchInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingPortInFetchInstance
   */
  fetch(
    callback?: (error: Error | null, item?: PortingPortInFetchInstance) => any
  ): Promise<PortingPortInFetchInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface PortingPortInFetchContextSolution {
  portInRequestSid: string;
}

export class PortingPortInFetchContextImpl
  implements PortingPortInFetchContext
{
  protected _solution: PortingPortInFetchContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, portInRequestSid: string) {
    if (!isValidPathParam(portInRequestSid)) {
      throw new Error("Parameter 'portInRequestSid' is not valid.");
    }

    this._solution = { portInRequestSid };
    this._uri = `/Porting/PortIn/${portInRequestSid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: PortingPortInFetchInstance) => any
  ): Promise<PortingPortInFetchInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PortingPortInFetchInstance(
          operationVersion,
          payload,
          instance._solution.portInRequestSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface PortingPortInFetchPayload extends PortingPortInFetchResource {}

interface PortingPortInFetchResource {
  port_in_request_sid: string;
  url: string;
  account_sid: string;
  notification_emails: Array<string>;
  target_port_in_date: Date;
  target_port_in_time_range_start: string;
  target_port_in_time_range_end: string;
  losing_carrier_information: any;
  phone_numbers: Array<any>;
  documents: Array<string>;
}

export class PortingPortInFetchInstance {
  protected _solution: PortingPortInFetchContextSolution;
  protected _context?: PortingPortInFetchContext;

  constructor(
    protected _version: V1,
    payload: PortingPortInFetchResource,
    portInRequestSid?: string
  ) {
    this.portInRequestSid = payload.port_in_request_sid;
    this.url = payload.url;
    this.accountSid = payload.account_sid;
    this.notificationEmails = payload.notification_emails;
    this.targetPortInDate = deserialize.iso8601Date(
      payload.target_port_in_date
    );
    this.targetPortInTimeRangeStart = payload.target_port_in_time_range_start;
    this.targetPortInTimeRangeEnd = payload.target_port_in_time_range_end;
    this.losingCarrierInformation = payload.losing_carrier_information;
    this.phoneNumbers = payload.phone_numbers;
    this.documents = payload.documents;

    this._solution = {
      portInRequestSid: portInRequestSid || this.portInRequestSid,
    };
  }

  /**
   * The SID of the Port In request. This is a unique identifier of the port in request.
   */
  portInRequestSid: string;
  /**
   * The URL of this Port In request
   */
  url: string;
  /**
   * The Account SID that the numbers will be added to after they are ported into Twilio.
   */
  accountSid: string;
  /**
   * List of emails for getting notifications about the LOA signing process. Allowed Max 10 emails.
   */
  notificationEmails: Array<string>;
  /**
   * Minimum number of days in the future (at least 2 days) needs to be established with the Ops team for validation.
   */
  targetPortInDate: Date;
  /**
   * Minimum hour in the future needs to be established with the Ops team for validation.
   */
  targetPortInTimeRangeStart: string;
  /**
   * Maximum hour in the future needs to be established with the Ops team for validation.
   */
  targetPortInTimeRangeEnd: string;
  /**
   * The information for the losing carrier.
   */
  losingCarrierInformation: any;
  /**
   * The list of phone numbers to Port in. Phone numbers are in E.164 format (e.g. +16175551212).
   */
  phoneNumbers: Array<any>;
  /**
   * The list of documents SID referencing a utility bills
   */
  documents: Array<string>;

  private get _proxy(): PortingPortInFetchContext {
    this._context =
      this._context ||
      new PortingPortInFetchContextImpl(
        this._version,
        this._solution.portInRequestSid
      );
    return this._context;
  }

  /**
   * Fetch a PortingPortInFetchInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingPortInFetchInstance
   */
  fetch(
    callback?: (error: Error | null, item?: PortingPortInFetchInstance) => any
  ): Promise<PortingPortInFetchInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      portInRequestSid: this.portInRequestSid,
      url: this.url,
      accountSid: this.accountSid,
      notificationEmails: this.notificationEmails,
      targetPortInDate: this.targetPortInDate,
      targetPortInTimeRangeStart: this.targetPortInTimeRangeStart,
      targetPortInTimeRangeEnd: this.targetPortInTimeRangeEnd,
      losingCarrierInformation: this.losingCarrierInformation,
      phoneNumbers: this.phoneNumbers,
      documents: this.documents,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface PortingPortInFetchSolution {}

export interface PortingPortInFetchListInstance {
  _version: V1;
  _solution: PortingPortInFetchSolution;
  _uri: string;

  (portInRequestSid: string): PortingPortInFetchContext;
  get(portInRequestSid: string): PortingPortInFetchContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PortingPortInFetchListInstance(
  version: V1
): PortingPortInFetchListInstance {
  const instance = ((portInRequestSid) =>
    instance.get(portInRequestSid)) as PortingPortInFetchListInstance;

  instance.get = function get(portInRequestSid): PortingPortInFetchContext {
    return new PortingPortInFetchContextImpl(version, portInRequestSid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
