/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to create a BulkEligibilityInstance
 */
export interface BulkEligibilityListInstanceCreateOptions {
  /**  */
  body?: object;
}

export interface BulkEligibilityContext {
  /**
   * Fetch a BulkEligibilityInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BulkEligibilityInstance
   */
  fetch(
    callback?: (error: Error | null, item?: BulkEligibilityInstance) => any
  ): Promise<BulkEligibilityInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface BulkEligibilityContextSolution {
  requestId: string;
}

export class BulkEligibilityContextImpl implements BulkEligibilityContext {
  protected _solution: BulkEligibilityContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, requestId: string) {
    if (!isValidPathParam(requestId)) {
      throw new Error("Parameter 'requestId' is not valid.");
    }

    this._solution = { requestId };
    this._uri = `/HostedNumber/Eligibility/Bulk/${requestId}`;
  }

  fetch(
    callback?: (error: Error | null, item?: BulkEligibilityInstance) => any
  ): Promise<BulkEligibilityInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new BulkEligibilityInstance(
          operationVersion,
          payload,
          instance._solution.requestId
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface BulkEligibilityPayload extends BulkEligibilityResource {}

interface BulkEligibilityResource {
  request_id: string;
  url: string;
  results: Array<any>;
  friendly_name: string;
  status: string;
  date_created: Date;
  date_completed: Date;
}

export class BulkEligibilityInstance {
  protected _solution: BulkEligibilityContextSolution;
  protected _context?: BulkEligibilityContext;

  constructor(
    protected _version: V1,
    payload: BulkEligibilityResource,
    requestId?: string
  ) {
    this.requestId = payload.request_id;
    this.url = payload.url;
    this.results = payload.results;
    this.friendlyName = payload.friendly_name;
    this.status = payload.status;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateCompleted = deserialize.iso8601DateTime(payload.date_completed);

    this._solution = { requestId: requestId || this.requestId };
  }

  /**
   * The SID of the bulk eligibility check that you want to know about.
   */
  requestId: string;
  /**
   * This is the url of the request that you\'re trying to reach out to locate the resource.
   */
  url: string;
  /**
   * The result set that contains the eligibility check response for each requested number, each result has at least the following attributes:  phone_number: The requested phone number ,hosting_account_sid: The account sid where the phone number will be hosted, country: Phone numberâ€™s country, eligibility_status: Indicates the eligibility status of the PN (Eligible/Ineligible), eligibility_sub_status: Indicates the sub status of the eligibility , ineligibility_reason: Reason for number\'s ineligibility (if applicable), next_step: Suggested next step in the hosting process based on the eligibility status.
   */
  results: Array<any>;
  /**
   * This is the string that you assigned as a friendly name for describing the eligibility check request.
   */
  friendlyName: string;
  /**
   * This is the status of the bulk eligibility check request. (Example: COMPLETE, IN_PROGRESS)
   */
  status: string;
  dateCreated: Date;
  dateCompleted: Date;

  private get _proxy(): BulkEligibilityContext {
    this._context =
      this._context ||
      new BulkEligibilityContextImpl(this._version, this._solution.requestId);
    return this._context;
  }

  /**
   * Fetch a BulkEligibilityInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BulkEligibilityInstance
   */
  fetch(
    callback?: (error: Error | null, item?: BulkEligibilityInstance) => any
  ): Promise<BulkEligibilityInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      requestId: this.requestId,
      url: this.url,
      results: this.results,
      friendlyName: this.friendlyName,
      status: this.status,
      dateCreated: this.dateCreated,
      dateCompleted: this.dateCompleted,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface BulkEligibilitySolution {}

export interface BulkEligibilityListInstance {
  _version: V1;
  _solution: BulkEligibilitySolution;
  _uri: string;

  (requestId: string): BulkEligibilityContext;
  get(requestId: string): BulkEligibilityContext;

  /**
   * Create a BulkEligibilityInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BulkEligibilityInstance
   */
  create(
    callback?: (error: Error | null, item?: BulkEligibilityInstance) => any
  ): Promise<BulkEligibilityInstance>;
  /**
   * Create a BulkEligibilityInstance
   *
   * @param params - Body for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BulkEligibilityInstance
   */
  create(
    params: object,
    callback?: (error: Error | null, item?: BulkEligibilityInstance) => any
  ): Promise<BulkEligibilityInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function BulkEligibilityListInstance(
  version: V1
): BulkEligibilityListInstance {
  const instance = ((requestId) =>
    instance.get(requestId)) as BulkEligibilityListInstance;

  instance.get = function get(requestId): BulkEligibilityContext {
    return new BulkEligibilityContextImpl(version, requestId);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/HostedNumber/Eligibility/Bulk`;

  instance.create = function create(
    params?:
      | object
      | ((error: Error | null, items: BulkEligibilityInstance) => any),
    callback?: (error: Error | null, items: BulkEligibilityInstance) => any
  ): Promise<BulkEligibilityInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    const headers: any = {};
    headers["Content-Type"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new BulkEligibilityInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
