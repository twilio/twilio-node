/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export interface WebhookSolution {}

export interface WebhookListInstance {
  _version: V1;
  _solution: WebhookSolution;
  _uri: string;

  /**
   * Fetch a WebhookInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed WebhookInstance
   */
  fetch(
    callback?: (error: Error | null, item?: WebhookInstance) => any
  ): Promise<WebhookInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function WebhookListInstance(version: V1): WebhookListInstance {
  const instance = {} as WebhookListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Porting/Configuration/Webhook`;

  instance.fetch = function fetch(
    callback?: (error: Error | null, items: WebhookInstance) => any
  ): Promise<WebhookInstance> {
    let operationVersion = version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) => new WebhookInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface WebhookPayload extends WebhookResource {}

interface WebhookResource {
  url: string;
  port_in_target_url: string;
  port_out_target_url: string;
  notifications_of: Array<string>;
  port_in_target_date_created: Date;
  port_out_target_date_created: Date;
}

export class WebhookInstance {
  constructor(protected _version: V1, payload: WebhookResource) {
    this.url = payload.url;
    this.portInTargetUrl = payload.port_in_target_url;
    this.portOutTargetUrl = payload.port_out_target_url;
    this.notificationsOf = payload.notifications_of;
    this.portInTargetDateCreated = deserialize.iso8601DateTime(
      payload.port_in_target_date_created
    );
    this.portOutTargetDateCreated = deserialize.iso8601DateTime(
      payload.port_out_target_date_created
    );
  }

  /**
   * The URL of the webhook configuration request
   */
  url: string;
  /**
   * The complete webhook url that will be called when a notification event for port in request or port in phone number happens
   */
  portInTargetUrl: string;
  /**
   * The complete webhook url that will be called when a notification event for a port out phone number happens.
   */
  portOutTargetUrl: string;
  /**
   * A list to filter what notification events to receive for this account and its sub accounts. If it is an empty list, then it means that there are no filters for the notifications events to send in each webhook and all events will get sent.
   */
  notificationsOf: Array<string>;
  /**
   * Creation date for the port in webhook configuration
   */
  portInTargetDateCreated: Date;
  /**
   * Creation date for the port out webhook configuration
   */
  portOutTargetDateCreated: Date;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      url: this.url,
      portInTargetUrl: this.portInTargetUrl,
      portOutTargetUrl: this.portOutTargetUrl,
      notificationsOf: this.notificationsOf,
      portInTargetDateCreated: this.portInTargetDateCreated,
      portOutTargetDateCreated: this.portOutTargetDateCreated,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
