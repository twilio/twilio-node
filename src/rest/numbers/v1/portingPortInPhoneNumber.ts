/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export interface PortingPortInPhoneNumberContext {
  /**
   * Remove a PortingPortInPhoneNumberInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a PortingPortInPhoneNumberInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingPortInPhoneNumberInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: PortingPortInPhoneNumberInstance
    ) => any
  ): Promise<PortingPortInPhoneNumberInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface PortingPortInPhoneNumberContextSolution {
  portInRequestSid: string;
  phoneNumberSid: string;
}

export class PortingPortInPhoneNumberContextImpl
  implements PortingPortInPhoneNumberContext
{
  protected _solution: PortingPortInPhoneNumberContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V1,
    portInRequestSid: string,
    phoneNumberSid: string
  ) {
    if (!isValidPathParam(portInRequestSid)) {
      throw new Error("Parameter 'portInRequestSid' is not valid.");
    }

    if (!isValidPathParam(phoneNumberSid)) {
      throw new Error("Parameter 'phoneNumberSid' is not valid.");
    }

    this._solution = { portInRequestSid, phoneNumberSid };
    this._uri = `/Porting/PortIn/${portInRequestSid}/PhoneNumber/${phoneNumberSid}`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (
      error: Error | null,
      item?: PortingPortInPhoneNumberInstance
    ) => any
  ): Promise<PortingPortInPhoneNumberInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new PortingPortInPhoneNumberInstance(
          operationVersion,
          payload,
          instance._solution.portInRequestSid,
          instance._solution.phoneNumberSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface PortingPortInPhoneNumberPayload
  extends PortingPortInPhoneNumberResource {}

interface PortingPortInPhoneNumberResource {
  port_in_request_sid: string;
  phone_number_sid: string;
  url: string;
  account_sid: string;
  phone_number_type: string;
  date_created: Date;
  country: string;
  missing_required_fields: boolean;
  last_updated: Date;
  phone_number: string;
  portable: boolean;
  not_portability_reason: string;
  not_portability_reason_code: number;
  port_in_phone_number_status: string;
  port_out_pin: number;
  rejection_reason: string;
  rejection_reason_code: number;
  port_date: Date;
}

export class PortingPortInPhoneNumberInstance {
  protected _solution: PortingPortInPhoneNumberContextSolution;
  protected _context?: PortingPortInPhoneNumberContext;

  constructor(
    protected _version: V1,
    payload: PortingPortInPhoneNumberResource,
    portInRequestSid?: string,
    phoneNumberSid?: string
  ) {
    this.portInRequestSid = payload.port_in_request_sid;
    this.phoneNumberSid = payload.phone_number_sid;
    this.url = payload.url;
    this.accountSid = payload.account_sid;
    this.phoneNumberType = payload.phone_number_type;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.country = payload.country;
    this.missingRequiredFields = payload.missing_required_fields;
    this.lastUpdated = deserialize.iso8601DateTime(payload.last_updated);
    this.phoneNumber = payload.phone_number;
    this.portable = payload.portable;
    this.notPortabilityReason = payload.not_portability_reason;
    this.notPortabilityReasonCode = deserialize.integer(
      payload.not_portability_reason_code
    );
    this.portInPhoneNumberStatus = payload.port_in_phone_number_status;
    this.portOutPin = deserialize.integer(payload.port_out_pin);
    this.rejectionReason = payload.rejection_reason;
    this.rejectionReasonCode = deserialize.integer(
      payload.rejection_reason_code
    );
    this.portDate = deserialize.iso8601DateTime(payload.port_date);

    this._solution = {
      portInRequestSid: portInRequestSid || this.portInRequestSid,
      phoneNumberSid: phoneNumberSid || this.phoneNumberSid,
    };
  }

  /**
   * The unique identifier for the port in request that this phone number is associated with.
   */
  portInRequestSid: string;
  /**
   * The unique identifier for this phone number associated with this port in request.
   */
  phoneNumberSid: string;
  /**
   * URL reference for this resource.
   */
  url: string;
  /**
   * Account Sid or subaccount where the phone number(s) will be Ported.
   */
  accountSid: string;
  /**
   * The number type of the phone number. This can be: toll-free, local, mobile or unknown. This field may be null if the number is not portable or if the portability for a number has not yet been evaluated.
   */
  phoneNumberType: string;
  /**
   * The timestamp for when this port in phone number was created.
   */
  dateCreated: Date;
  /**
   * The ISO country code that this number is associated with. This field may be null if the number is not portable or if the portability for a number has not yet been evaluated.
   */
  country: string;
  /**
   * Indicates if the phone number is missing required fields such as a PIN or account number. This field may be null if the number is not portable or if the portability for a number has not yet been evaluated.
   */
  missingRequiredFields: boolean;
  /**
   * Timestamp indicating when the Port In Phone Number resource was last modified.
   */
  lastUpdated: Date;
  /**
   * Phone number to be ported. This will be in the E164 Format.
   */
  phoneNumber: string;
  /**
   * If the number is portable by Twilio or not. This field may be null if the number portability has not yet been evaluated. If a number is not portable reference the `not_portability_reason_code` and `not_portability_reason` fields for more details
   */
  portable: boolean;
  /**
   * The not portability reason code description. This field may be null if the number is portable or if the portability for a number has not yet been evaluated.
   */
  notPortabilityReason: string;
  /**
   * The not portability reason code. This field may be null if the number is portable or if the portability for a number has not yet been evaluated.
   */
  notPortabilityReasonCode: number;
  /**
   * The status of the port in phone number.
   */
  portInPhoneNumberStatus: string;
  /**
   * The pin required by the losing carrier to do the port out.
   */
  portOutPin: number;
  /**
   * The description of the rejection reason provided by the losing carrier. This field may be null if the number has not been rejected by the losing carrier.
   */
  rejectionReason: string;
  /**
   * The code for the rejection reason provided by the losing carrier. This field may be null if the number has not been rejected by the losing carrier.
   */
  rejectionReasonCode: number;
  /**
   * The timestamp the phone number will be ported. This will only be set once a port date has been confirmed. Not all carriers can guarantee a specific time on the port date. Twilio will try its best to get the port completed by this time on the port date. Please subscribe to webhooks for confirmation on when a port has actually been completed.
   */
  portDate: Date;

  private get _proxy(): PortingPortInPhoneNumberContext {
    this._context =
      this._context ||
      new PortingPortInPhoneNumberContextImpl(
        this._version,
        this._solution.portInRequestSid,
        this._solution.phoneNumberSid
      );
    return this._context;
  }

  /**
   * Remove a PortingPortInPhoneNumberInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a PortingPortInPhoneNumberInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed PortingPortInPhoneNumberInstance
   */
  fetch(
    callback?: (
      error: Error | null,
      item?: PortingPortInPhoneNumberInstance
    ) => any
  ): Promise<PortingPortInPhoneNumberInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      portInRequestSid: this.portInRequestSid,
      phoneNumberSid: this.phoneNumberSid,
      url: this.url,
      accountSid: this.accountSid,
      phoneNumberType: this.phoneNumberType,
      dateCreated: this.dateCreated,
      country: this.country,
      missingRequiredFields: this.missingRequiredFields,
      lastUpdated: this.lastUpdated,
      phoneNumber: this.phoneNumber,
      portable: this.portable,
      notPortabilityReason: this.notPortabilityReason,
      notPortabilityReasonCode: this.notPortabilityReasonCode,
      portInPhoneNumberStatus: this.portInPhoneNumberStatus,
      portOutPin: this.portOutPin,
      rejectionReason: this.rejectionReason,
      rejectionReasonCode: this.rejectionReasonCode,
      portDate: this.portDate,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface PortingPortInPhoneNumberSolution {}

export interface PortingPortInPhoneNumberListInstance {
  _version: V1;
  _solution: PortingPortInPhoneNumberSolution;
  _uri: string;

  (
    portInRequestSid: string,
    phoneNumberSid: string
  ): PortingPortInPhoneNumberContext;
  get(
    portInRequestSid: string,
    phoneNumberSid: string
  ): PortingPortInPhoneNumberContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function PortingPortInPhoneNumberListInstance(
  version: V1
): PortingPortInPhoneNumberListInstance {
  const instance = ((portInRequestSid, phoneNumberSid) =>
    instance.get(
      portInRequestSid,
      phoneNumberSid
    )) as PortingPortInPhoneNumberListInstance;

  instance.get = function get(
    portInRequestSid,
    phoneNumberSid
  ): PortingPortInPhoneNumberContext {
    return new PortingPortInPhoneNumberContextImpl(
      version,
      portInRequestSid,
      phoneNumberSid
    );
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
