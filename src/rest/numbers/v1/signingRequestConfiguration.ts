/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to create a SigningRequestConfigurationInstance
 */
export interface SigningRequestConfigurationListInstanceCreateOptions {
  /**  */
  body?: object;
}
/**
 * Options to pass to each
 */
export interface SigningRequestConfigurationListInstanceEachOptions {
  /** The country ISO code to apply this configuration, this is an optional field, Example: US, MX */
  country?: string;
  /** The product or service for which is requesting the signature, this is an optional field, Example: Porting, Hosting */
  product?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (
    item: SigningRequestConfigurationInstance,
    done: (err?: Error) => void
  ) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface SigningRequestConfigurationListInstanceOptions {
  /** The country ISO code to apply this configuration, this is an optional field, Example: US, MX */
  country?: string;
  /** The product or service for which is requesting the signature, this is an optional field, Example: Porting, Hosting */
  product?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface SigningRequestConfigurationListInstancePageOptions {
  /** The country ISO code to apply this configuration, this is an optional field, Example: US, MX */
  country?: string;
  /** The product or service for which is requesting the signature, this is an optional field, Example: Porting, Hosting */
  product?: string;
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface SigningRequestConfigurationSolution {}

export interface SigningRequestConfigurationListInstance {
  _version: V1;
  _solution: SigningRequestConfigurationSolution;
  _uri: string;

  /**
   * Create a SigningRequestConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed SigningRequestConfigurationInstance
   */
  create(
    callback?: (
      error: Error | null,
      item?: SigningRequestConfigurationInstance
    ) => any
  ): Promise<SigningRequestConfigurationInstance>;
  /**
   * Create a SigningRequestConfigurationInstance
   *
   * @param params - Body for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed SigningRequestConfigurationInstance
   */
  create(
    params: object,
    callback?: (
      error: Error | null,
      item?: SigningRequestConfigurationInstance
    ) => any
  ): Promise<SigningRequestConfigurationInstance>;

  /**
   * Streams SigningRequestConfigurationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { SigningRequestConfigurationListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (
      item: SigningRequestConfigurationInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  each(
    params: SigningRequestConfigurationListInstanceEachOptions,
    callback?: (
      item: SigningRequestConfigurationInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of SigningRequestConfigurationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationPage
    ) => any
  ): Promise<SigningRequestConfigurationPage>;
  /**
   * Lists SigningRequestConfigurationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { SigningRequestConfigurationListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationInstance[]
    ) => any
  ): Promise<SigningRequestConfigurationInstance[]>;
  list(
    params: SigningRequestConfigurationListInstanceOptions,
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationInstance[]
    ) => any
  ): Promise<SigningRequestConfigurationInstance[]>;
  /**
   * Retrieve a single page of SigningRequestConfigurationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { SigningRequestConfigurationListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationPage
    ) => any
  ): Promise<SigningRequestConfigurationPage>;
  page(
    params: SigningRequestConfigurationListInstancePageOptions,
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationPage
    ) => any
  ): Promise<SigningRequestConfigurationPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function SigningRequestConfigurationListInstance(
  version: V1
): SigningRequestConfigurationListInstance {
  const instance = {} as SigningRequestConfigurationListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/SigningRequest/Configuration`;

  instance.create = function create(
    params?:
      | object
      | ((
          error: Error | null,
          items: SigningRequestConfigurationInstance
        ) => any),
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationInstance
    ) => any
  ): Promise<SigningRequestConfigurationInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    const headers: any = {};
    headers["Content-Type"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new SigningRequestConfigurationInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | SigningRequestConfigurationListInstancePageOptions
      | ((error: Error | null, items: SigningRequestConfigurationPage) => any),
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationPage
    ) => any
  ): Promise<SigningRequestConfigurationPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["country"] !== undefined) data["Country"] = params["country"];
    if (params["product"] !== undefined) data["Product"] = params["product"];
    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new SigningRequestConfigurationPage(
          operationVersion,
          payload,
          instance._solution
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (
      error: Error | null,
      items: SigningRequestConfigurationPage
    ) => any
  ): Promise<SigningRequestConfigurationPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new SigningRequestConfigurationPage(
          instance._version,
          payload,
          instance._solution
        )
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface SigningRequestConfigurationPayload extends TwilioResponsePayload {
  configurations: SigningRequestConfigurationResource[];
}

interface SigningRequestConfigurationResource {
  logo_sid: string;
  friendly_name: string;
  product: string;
  country: string;
  email_subject: string;
  email_message: string;
  url_redirection: string;
  url: string;
}

export class SigningRequestConfigurationInstance {
  constructor(
    protected _version: V1,
    payload: SigningRequestConfigurationResource
  ) {
    this.logoSid = payload.logo_sid;
    this.friendlyName = payload.friendly_name;
    this.product = payload.product;
    this.country = payload.country;
    this.emailSubject = payload.email_subject;
    this.emailMessage = payload.email_message;
    this.urlRedirection = payload.url_redirection;
    this.url = payload.url;
  }

  /**
   * The SID of the document  that includes the logo that will appear in the LOA. To upload documents follow the following guide: https://www.twilio.com/docs/phone-numbers/regulatory/getting-started/create-new-bundle-public-rest-apis#supporting-document-create
   */
  logoSid: string;
  /**
   * This is the string that you assigned as a friendly name for describing the creation of the configuration.
   */
  friendlyName: string;
  /**
   * The product or service for which is requesting the signature.
   */
  product: string;
  /**
   * The country ISO code to apply the configuration.
   */
  country: string;
  /**
   * Subject of the email that the end client will receive ex: “Twilio Hosting Request”, maximum length of 255 characters.
   */
  emailSubject: string;
  /**
   * Content of the email that the end client will receive ex: “This is a Hosting request from Twilio, please check the document and sign it”, maximum length of 5,000 characters.
   */
  emailMessage: string;
  /**
   * Url the end client will be redirected after signing a document.
   */
  urlRedirection: string;
  url: string;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      logoSid: this.logoSid,
      friendlyName: this.friendlyName,
      product: this.product,
      country: this.country,
      emailSubject: this.emailSubject,
      emailMessage: this.emailMessage,
      urlRedirection: this.urlRedirection,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export class SigningRequestConfigurationPage extends Page<
  V1,
  SigningRequestConfigurationPayload,
  SigningRequestConfigurationResource,
  SigningRequestConfigurationInstance
> {
  /**
   * Initialize the SigningRequestConfigurationPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: SigningRequestConfigurationSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of SigningRequestConfigurationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(
    payload: SigningRequestConfigurationResource
  ): SigningRequestConfigurationInstance {
    return new SigningRequestConfigurationInstance(this._version, payload);
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
