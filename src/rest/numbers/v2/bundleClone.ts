/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * The verification status of the Bundle resource.
 */
export type BundleCloneStatus =
  | "draft"
  | "pending-review"
  | "in-review"
  | "twilio-rejected"
  | "twilio-approved"
  | "provisionally-approved";

/**
 * Options to pass to create a BundleCloneInstance
 */
export interface BundleCloneContextCreateOptions {
  /** The SID of the [Account](https://www.twilio.com/docs/iam/api/account) where the bundle needs to be cloned. */
  targetAccountSid: string;
  /** If set to true, the cloned bundle will be in the DRAFT state, else it will be twilio-approved */
  moveToDraft?: boolean;
  /** The string that you assigned to describe the cloned bundle. */
  friendlyName?: string;
}

export interface BundleCloneContext {
  /**
   * Create a BundleCloneInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleCloneInstance
   */
  create(
    params: BundleCloneContextCreateOptions,
    callback?: (error: Error | null, item?: BundleCloneInstance) => any
  ): Promise<BundleCloneInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface BundleCloneContextSolution {
  bundleSid: string;
}

export class BundleCloneContextImpl implements BundleCloneContext {
  protected _solution: BundleCloneContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, bundleSid: string) {
    if (!isValidPathParam(bundleSid)) {
      throw new Error("Parameter 'bundleSid' is not valid.");
    }

    this._solution = { bundleSid };
    this._uri = `/RegulatoryCompliance/Bundles/${bundleSid}/Clones`;
  }

  create(
    params: BundleCloneContextCreateOptions,
    callback?: (error: Error | null, item?: BundleCloneInstance) => any
  ): Promise<BundleCloneInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (
      params["targetAccountSid"] === null ||
      params["targetAccountSid"] === undefined
    ) {
      throw new Error(
        "Required parameter \"params['targetAccountSid']\" missing."
      );
    }

    let data: any = {};

    data["TargetAccountSid"] = params["targetAccountSid"];
    if (params["moveToDraft"] !== undefined)
      data["MoveToDraft"] = serialize.bool(params["moveToDraft"]);
    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new BundleCloneInstance(
          operationVersion,
          payload,
          instance._solution.bundleSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface BundleClonePayload extends BundleCloneResource {}

interface BundleCloneResource {
  bundle_sid: string;
  account_sid: string;
  regulation_sid: string;
  friendly_name: string;
  status: BundleCloneStatus;
  valid_until: Date;
  email: string;
  status_callback: string;
  date_created: Date;
  date_updated: Date;
  url: string;
}

export class BundleCloneInstance {
  protected _solution: BundleCloneContextSolution;
  protected _context?: BundleCloneContext;

  constructor(
    protected _version: V2,
    payload: BundleCloneResource,
    bundleSid?: string
  ) {
    this.bundleSid = payload.bundle_sid;
    this.accountSid = payload.account_sid;
    this.regulationSid = payload.regulation_sid;
    this.friendlyName = payload.friendly_name;
    this.status = payload.status;
    this.validUntil = deserialize.iso8601DateTime(payload.valid_until);
    this.email = payload.email;
    this.statusCallback = payload.status_callback;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.url = payload.url;

    this._solution = { bundleSid: bundleSid || this.bundleSid };
  }

  /**
   * The unique string that we created to identify the Bundle resource.
   */
  bundleSid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Bundle resource.
   */
  accountSid: string;
  /**
   * The unique string of a regulation that is associated to the Bundle resource.
   */
  regulationSid: string;
  /**
   * The string that you assigned to describe the resource.
   */
  friendlyName: string;
  status: BundleCloneStatus;
  /**
   * The date and time in GMT in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format when the resource will be valid until.
   */
  validUntil: Date;
  /**
   * The email address that will receive updates when the Bundle resource changes status.
   */
  email: string;
  /**
   * The URL we call to inform your application of status changes.
   */
  statusCallback: string;
  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateUpdated: Date;
  /**
   * The URL of this resource.
   */
  url: string;

  private get _proxy(): BundleCloneContext {
    this._context =
      this._context ||
      new BundleCloneContextImpl(this._version, this._solution.bundleSid);
    return this._context;
  }

  /**
   * Create a BundleCloneInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed BundleCloneInstance
   */
  create(
    params: BundleCloneContextCreateOptions,
    callback?: (error: Error | null, item?: BundleCloneInstance) => any
  ): Promise<BundleCloneInstance>;

  create(
    params?: any,
    callback?: (error: Error | null, item?: BundleCloneInstance) => any
  ): Promise<BundleCloneInstance> {
    return this._proxy.create(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      bundleSid: this.bundleSid,
      accountSid: this.accountSid,
      regulationSid: this.regulationSid,
      friendlyName: this.friendlyName,
      status: this.status,
      validUntil: this.validUntil,
      email: this.email,
      statusCallback: this.statusCallback,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface BundleCloneSolution {}

export interface BundleCloneListInstance {
  _version: V2;
  _solution: BundleCloneSolution;
  _uri: string;

  (bundleSid: string): BundleCloneContext;
  get(bundleSid: string): BundleCloneContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function BundleCloneListInstance(version: V2): BundleCloneListInstance {
  const instance = ((bundleSid) =>
    instance.get(bundleSid)) as BundleCloneListInstance;

  instance.get = function get(bundleSid): BundleCloneContext {
    return new BundleCloneContextImpl(version, bundleSid);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
