/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to fetch a AuthorizeInstance
 */
export interface AuthorizeListInstanceFetchOptions {
  /** Response Type */
  responseType?: string;
  /** The Client Identifier */
  clientId?: string;
  /** The url to which response will be redirected to */
  redirectUri?: string;
  /** The scope of the access request */
  scope?: string;
  /** An opaque value which can be used to maintain state between the request and callback */
  state?: string;
}

export interface AuthorizeSolution {}

export interface AuthorizeListInstance {
  _version: V1;
  _solution: AuthorizeSolution;
  _uri: string;

  /**
   * Fetch a AuthorizeInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthorizeInstance
   */
  fetch(
    callback?: (error: Error | null, item?: AuthorizeInstance) => any
  ): Promise<AuthorizeInstance>;
  /**
   * Fetch a AuthorizeInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthorizeInstance
   */
  fetch(
    params: AuthorizeListInstanceFetchOptions,
    callback?: (error: Error | null, item?: AuthorizeInstance) => any
  ): Promise<AuthorizeInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function AuthorizeListInstance(version: V1): AuthorizeListInstance {
  const instance = {} as AuthorizeListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/authorize`;

  instance.fetch = function fetch(
    params?:
      | AuthorizeListInstanceFetchOptions
      | ((error: Error | null, items: AuthorizeInstance) => any),
    callback?: (error: Error | null, items: AuthorizeInstance) => any
  ): Promise<AuthorizeInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["responseType"] !== undefined)
      data["ResponseType"] = params["responseType"];
    if (params["clientId"] !== undefined) data["ClientId"] = params["clientId"];
    if (params["redirectUri"] !== undefined)
      data["RedirectUri"] = params["redirectUri"];
    if (params["scope"] !== undefined) data["Scope"] = params["scope"];
    if (params["state"] !== undefined) data["State"] = params["state"];

    const headers: any = {};

    let operationVersion = version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new AuthorizeInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface AuthorizePayload extends AuthorizeResource {}

interface AuthorizeResource {
  redirect_to: string;
}

export class AuthorizeInstance {
  constructor(protected _version: V1, payload: AuthorizeResource) {
    this.redirectTo = payload.redirect_to;
  }

  /**
   * The callback URL
   */
  redirectTo: string;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      redirectTo: this.redirectTo,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
