/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to create a TokenInstance
 */
export interface TokenListInstanceCreateOptions {
  /** Grant type is a credential representing resource owner\\\'s authorization which can be used by client to obtain access token. */
  grantType: string;
  /** A 34 character string that uniquely identifies this OAuth App. */
  clientSid: string;
  /** The credential for confidential OAuth App. */
  clientSecret?: string;
  /** JWT token related to the authorization code grant type. */
  code?: string;
  /** A code which is generation cryptographically. */
  codeVerifier?: string;
  /** JWT token related to the device code grant type. */
  deviceCode?: string;
  /** JWT token related to the refresh token grant type. */
  refreshToken?: string;
  /** The Id of the device associated with the token (refresh token). */
  deviceId?: string;
}

export interface TokenSolution {}

export interface TokenListInstance {
  _version: V1;
  _solution: TokenSolution;
  _uri: string;

  /**
   * Create a TokenInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TokenInstance
   */
  create(
    params: TokenListInstanceCreateOptions,
    callback?: (error: Error | null, item?: TokenInstance) => any
  ): Promise<TokenInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function TokenListInstance(version: V1): TokenListInstance {
  const instance = {} as TokenListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/token`;

  instance.create = function create(
    params: TokenListInstanceCreateOptions,
    callback?: (error: Error | null, items: TokenInstance) => any
  ): Promise<TokenInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["grantType"] === null || params["grantType"] === undefined) {
      throw new Error("Required parameter \"params['grantType']\" missing.");
    }

    if (params["clientSid"] === null || params["clientSid"] === undefined) {
      throw new Error("Required parameter \"params['clientSid']\" missing.");
    }

    let data: any = {};

    data["GrantType"] = params["grantType"];

    data["ClientSid"] = params["clientSid"];
    if (params["clientSecret"] !== undefined)
      data["ClientSecret"] = params["clientSecret"];
    if (params["code"] !== undefined) data["Code"] = params["code"];
    if (params["codeVerifier"] !== undefined)
      data["CodeVerifier"] = params["codeVerifier"];
    if (params["deviceCode"] !== undefined)
      data["DeviceCode"] = params["deviceCode"];
    if (params["refreshToken"] !== undefined)
      data["RefreshToken"] = params["refreshToken"];
    if (params["deviceId"] !== undefined) data["DeviceId"] = params["deviceId"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new TokenInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface TokenPayload extends TokenResource {}

interface TokenResource {
  access_token: string;
  refresh_token: string;
  id_token: string;
  refresh_token_expires_at: Date;
  access_token_expires_at: Date;
}

export class TokenInstance {
  constructor(protected _version: V1, payload: TokenResource) {
    this.accessToken = payload.access_token;
    this.refreshToken = payload.refresh_token;
    this.idToken = payload.id_token;
    this.refreshTokenExpiresAt = deserialize.iso8601DateTime(
      payload.refresh_token_expires_at
    );
    this.accessTokenExpiresAt = deserialize.iso8601DateTime(
      payload.access_token_expires_at
    );
  }

  /**
   * Token which carries the necessary information to access a Twilio resource directly.
   */
  accessToken: string;
  /**
   * Token which carries the information necessary to get a new access token.
   */
  refreshToken: string;
  idToken: string;
  /**
   * The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  refreshTokenExpiresAt: Date;
  /**
   * The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  accessTokenExpiresAt: Date;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accessToken: this.accessToken,
      refreshToken: this.refreshToken,
      idToken: this.idToken,
      refreshTokenExpiresAt: this.refreshTokenExpiresAt,
      accessTokenExpiresAt: this.accessTokenExpiresAt,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
