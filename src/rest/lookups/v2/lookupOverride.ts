/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

export class OverridesRequest {
  /**
   * The new line type to override the original line type
   */
  "lineType"?: string;
  /**
   * The reason for the override
   */
  "reason"?: string;
}

/**
 * Options to pass to create a LookupOverrideInstance
 */
export interface LookupOverrideContextCreateOptions {
  /**  */
  overridesRequest?: OverridesRequest;
}

/**
 * Options to pass to update a LookupOverrideInstance
 */
export interface LookupOverrideContextUpdateOptions {
  /**  */
  overridesRequest?: OverridesRequest;
}

export interface LookupOverrideContext {
  /**
   * Create a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  create(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;
  /**
   * Create a LookupOverrideInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  create(
    params: OverridesRequest,
    headers?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;

  /**
   * Remove a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Fetch a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  fetch(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;

  /**
   * Update a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  update(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;
  /**
   * Update a LookupOverrideInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  update(
    params: OverridesRequest,
    headers?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface LookupOverrideContextSolution {
  field: string;
  phoneNumber: string;
}

export class LookupOverrideContextImpl implements LookupOverrideContext {
  protected _solution: LookupOverrideContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, field: string, phoneNumber: string) {
    if (!isValidPathParam(field)) {
      throw new Error("Parameter 'field' is not valid.");
    }

    if (!isValidPathParam(phoneNumber)) {
      throw new Error("Parameter 'phoneNumber' is not valid.");
    }

    this._solution = { field, phoneNumber };
    this._uri = `/PhoneNumbers/${phoneNumber}/Overrides/${field}`;
  }

  create(
    params?:
      | OverridesRequest
      | ((error: Error | null, item?: LookupOverrideInstance) => any),
    headers?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new LookupOverrideInstance(
          operationVersion,
          payload,
          instance._solution.field,
          instance._solution.phoneNumber
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
        headers,
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  fetch(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new LookupOverrideInstance(
          operationVersion,
          payload,
          instance._solution.field,
          instance._solution.phoneNumber
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | OverridesRequest
      | ((error: Error | null, item?: LookupOverrideInstance) => any),
    headers?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "put",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new LookupOverrideInstance(
          operationVersion,
          payload,
          instance._solution.field,
          instance._solution.phoneNumber
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface LookupOverridePayload extends LookupOverrideResource {}

interface LookupOverrideResource {
  phone_number: string;
  original_line_type: string;
  overridden_line_type: string;
  override_reason: string;
  override_timestamp: Date;
  overridden_by_account_sid: string;
  code: number;
  message: string;
  more_info: string;
  status: number;
  field: string;
  limit: number;
  bucket: string;
  owner: string;
  ttl: number;
}

export class LookupOverrideInstance {
  protected _solution: LookupOverrideContextSolution;
  protected _context?: LookupOverrideContext;

  constructor(
    protected _version: V2,
    payload: LookupOverrideResource,
    field?: string,
    phoneNumber?: string
  ) {
    this.phoneNumber = payload.phone_number;
    this.originalLineType = payload.original_line_type;
    this.overriddenLineType = payload.overridden_line_type;
    this.overrideReason = payload.override_reason;
    this.overrideTimestamp = deserialize.iso8601DateTime(
      payload.override_timestamp
    );
    this.overriddenByAccountSid = payload.overridden_by_account_sid;
    this.code = payload.code;
    this.message = payload.message;
    this.moreInfo = payload.more_info;
    this.status = payload.status;
    this.field = payload.field;
    this.limit = payload.limit;
    this.bucket = payload.bucket;
    this.owner = payload.owner;
    this.ttl = payload.ttl;

    this._solution = {
      field: field || this.field,
      phoneNumber: phoneNumber || this.phoneNumber,
    };
  }

  /**
   * The phone number for which the override was created
   */
  phoneNumber: string;
  /**
   * The original line type
   */
  originalLineType: string;
  /**
   * The new line type after the override
   */
  overriddenLineType: string;
  /**
   * The reason for the override
   */
  overrideReason: string;
  overrideTimestamp: Date;
  /**
   * The Account SID for the user who made the override
   */
  overriddenByAccountSid: string;
  /**
   * Twilio-specific error code
   */
  code: number;
  /**
   * Error message
   */
  message: string;
  /**
   * Link to Error Code References
   */
  moreInfo: string;
  /**
   * HTTP response status code
   */
  status: number;
  /**
   * Limit of requests for the bucket
   */
  field: string;
  /**
   * Limit of requests for the bucket
   */
  limit: number;
  /**
   * Name of the bucket
   */
  bucket: string;
  /**
   * Owner of the rule
   */
  owner: string;
  /**
   * Time to live of the rule
   */
  ttl: number;

  private get _proxy(): LookupOverrideContext {
    this._context =
      this._context ||
      new LookupOverrideContextImpl(
        this._version,
        this._solution.field,
        this._solution.phoneNumber
      );
    return this._context;
  }

  /**
   * Create a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  create(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;
  /**
   * Create a LookupOverrideInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  create(
    params: OverridesRequest,
    headers?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;

  create(
    params?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance> {
    return this._proxy.create(params, callback);
  }

  /**
   * Remove a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Fetch a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  fetch(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a LookupOverrideInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  update(
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;
  /**
   * Update a LookupOverrideInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed LookupOverrideInstance
   */
  update(
    params: OverridesRequest,
    headers?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: LookupOverrideInstance) => any
  ): Promise<LookupOverrideInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      phoneNumber: this.phoneNumber,
      originalLineType: this.originalLineType,
      overriddenLineType: this.overriddenLineType,
      overrideReason: this.overrideReason,
      overrideTimestamp: this.overrideTimestamp,
      overriddenByAccountSid: this.overriddenByAccountSid,
      code: this.code,
      message: this.message,
      moreInfo: this.moreInfo,
      status: this.status,
      field: this.field,
      limit: this.limit,
      bucket: this.bucket,
      owner: this.owner,
      ttl: this.ttl,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface LookupOverrideSolution {}

export interface LookupOverrideListInstance {
  _version: V2;
  _solution: LookupOverrideSolution;
  _uri: string;

  (field: string, phoneNumber: string): LookupOverrideContext;
  get(field: string, phoneNumber: string): LookupOverrideContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function LookupOverrideListInstance(
  version: V2
): LookupOverrideListInstance {
  const instance = ((field, phoneNumber) =>
    instance.get(field, phoneNumber)) as LookupOverrideListInstance;

  instance.get = function get(field, phoneNumber): LookupOverrideContext {
    return new LookupOverrideContextImpl(version, field, phoneNumber);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
