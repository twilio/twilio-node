/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to update a ComplianceTollfreeInquiriesInstance
 */
export interface ComplianceTollfreeInquiriesContextUpdateOptions {
  /** The Tollfree phone number to be verified */
  did: string;
}

/**
 * Options to pass to create a ComplianceTollfreeInquiriesInstance
 */
export interface ComplianceTollfreeInquiriesListInstanceCreateOptions {
  /** The Tollfree phone number to be verified */
  did: string;
}

export interface ComplianceTollfreeInquiriesContext {
  /**
   * Update a ComplianceTollfreeInquiriesInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ComplianceTollfreeInquiriesInstance
   */
  update(
    params: ComplianceTollfreeInquiriesContextUpdateOptions,
    callback?: (
      error: Error | null,
      item?: ComplianceTollfreeInquiriesInstance
    ) => any
  ): Promise<ComplianceTollfreeInquiriesInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface ComplianceTollfreeInquiriesContextSolution {
  tollfreeId: string;
}

export class ComplianceTollfreeInquiriesContextImpl
  implements ComplianceTollfreeInquiriesContext
{
  protected _solution: ComplianceTollfreeInquiriesContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, tollfreeId: string) {
    if (!isValidPathParam(tollfreeId)) {
      throw new Error("Parameter 'tollfreeId' is not valid.");
    }

    this._solution = { tollfreeId };
    this._uri = `/ComplianceInquiries/Tollfree/${tollfreeId}/Initialize`;
  }

  update(
    params: ComplianceTollfreeInquiriesContextUpdateOptions,
    callback?: (
      error: Error | null,
      item?: ComplianceTollfreeInquiriesInstance
    ) => any
  ): Promise<ComplianceTollfreeInquiriesInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["did"] === null || params["did"] === undefined) {
      throw new Error("Required parameter \"params['did']\" missing.");
    }

    let data: any = {};

    data["Did"] = params["did"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ComplianceTollfreeInquiriesInstance(
          operationVersion,
          payload,
          instance._solution.tollfreeId
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface ComplianceTollfreeInquiriesPayload
  extends ComplianceTollfreeInquiriesResource {}

interface ComplianceTollfreeInquiriesResource {
  inquiry_id: string;
  inquiry_session_token: string;
  tollfree_id: string;
  url: string;
}

export class ComplianceTollfreeInquiriesInstance {
  protected _solution: ComplianceTollfreeInquiriesContextSolution;
  protected _context?: ComplianceTollfreeInquiriesContext;

  constructor(
    protected _version: V1,
    payload: ComplianceTollfreeInquiriesResource,
    tollfreeId?: string
  ) {
    this.inquiryId = payload.inquiry_id;
    this.inquirySessionToken = payload.inquiry_session_token;
    this.tollfreeId = payload.tollfree_id;
    this.url = payload.url;

    this._solution = { tollfreeId: tollfreeId || this.tollfreeId };
  }

  /**
   * The unique ID used to start an embedded compliance registration session.
   */
  inquiryId: string;
  /**
   * The session token used to start an embedded compliance registration session.
   */
  inquirySessionToken: string;
  /**
   * The TolfreeId matching the Tollfree Profile that should be resumed or resubmitted for editing.
   */
  tollfreeId: string;
  /**
   * The URL of this resource.
   */
  url: string;

  private get _proxy(): ComplianceTollfreeInquiriesContext {
    this._context =
      this._context ||
      new ComplianceTollfreeInquiriesContextImpl(
        this._version,
        this._solution.tollfreeId
      );
    return this._context;
  }

  /**
   * Update a ComplianceTollfreeInquiriesInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ComplianceTollfreeInquiriesInstance
   */
  update(
    params: ComplianceTollfreeInquiriesContextUpdateOptions,
    callback?: (
      error: Error | null,
      item?: ComplianceTollfreeInquiriesInstance
    ) => any
  ): Promise<ComplianceTollfreeInquiriesInstance>;

  update(
    params?: any,
    callback?: (
      error: Error | null,
      item?: ComplianceTollfreeInquiriesInstance
    ) => any
  ): Promise<ComplianceTollfreeInquiriesInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      inquiryId: this.inquiryId,
      inquirySessionToken: this.inquirySessionToken,
      tollfreeId: this.tollfreeId,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface ComplianceTollfreeInquiriesSolution {}

export interface ComplianceTollfreeInquiriesListInstance {
  _version: V1;
  _solution: ComplianceTollfreeInquiriesSolution;
  _uri: string;

  (tollfreeId: string): ComplianceTollfreeInquiriesContext;
  get(tollfreeId: string): ComplianceTollfreeInquiriesContext;

  /**
   * Create a ComplianceTollfreeInquiriesInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ComplianceTollfreeInquiriesInstance
   */
  create(
    params: ComplianceTollfreeInquiriesListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      item?: ComplianceTollfreeInquiriesInstance
    ) => any
  ): Promise<ComplianceTollfreeInquiriesInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ComplianceTollfreeInquiriesListInstance(
  version: V1
): ComplianceTollfreeInquiriesListInstance {
  const instance = ((tollfreeId) =>
    instance.get(tollfreeId)) as ComplianceTollfreeInquiriesListInstance;

  instance.get = function get(tollfreeId): ComplianceTollfreeInquiriesContext {
    return new ComplianceTollfreeInquiriesContextImpl(version, tollfreeId);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = `/ComplianceInquiries/Tollfree/Initialize`;

  instance.create = function create(
    params: ComplianceTollfreeInquiriesListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      items: ComplianceTollfreeInquiriesInstance
    ) => any
  ): Promise<ComplianceTollfreeInquiriesInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["did"] === null || params["did"] === undefined) {
      throw new Error("Required parameter \"params['did']\" missing.");
    }

    let data: any = {};

    data["Did"] = params["did"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ComplianceTollfreeInquiriesInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
