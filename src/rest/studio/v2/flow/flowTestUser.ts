/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../../V2";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * Options to pass to update a FlowTestUserInstance
 */
export interface FlowTestUserContextUpdateOptions {
  /** List of test user identities that can test draft versions of the flow. */
  testUsers: Array<string>;
}

export interface FlowTestUserContext {
  /**
   * Fetch a FlowTestUserInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlowTestUserInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance>;

  /**
   * Update a FlowTestUserInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlowTestUserInstance
   */
  update(
    params: FlowTestUserContextUpdateOptions,
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface FlowTestUserContextSolution {
  sid: string;
}

export class FlowTestUserContextImpl implements FlowTestUserContext {
  protected _solution: FlowTestUserContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, sid: string) {
    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { sid };
    this._uri = `/Flows/${sid}/TestUsers`;
  }

  fetch(
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FlowTestUserInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params: FlowTestUserContextUpdateOptions,
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["testUsers"] === null || params["testUsers"] === undefined) {
      throw new Error("Required parameter \"params['testUsers']\" missing.");
    }

    let data: any = {};

    data["TestUsers"] = serialize.map(params["testUsers"], (e: string) => e);

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new FlowTestUserInstance(
          operationVersion,
          payload,
          instance._solution.sid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface FlowTestUserPayload extends FlowTestUserResource {}

interface FlowTestUserResource {
  sid: string;
  test_users: Array<string>;
  url: string;
}

export class FlowTestUserInstance {
  protected _solution: FlowTestUserContextSolution;
  protected _context?: FlowTestUserContext;

  constructor(
    protected _version: V2,
    payload: FlowTestUserResource,
    sid: string
  ) {
    this.sid = payload.sid;
    this.testUsers = payload.test_users;
    this.url = payload.url;

    this._solution = { sid };
  }

  /**
   * Unique identifier of the flow.
   */
  sid: string;
  /**
   * List of test user identities that can test draft versions of the flow.
   */
  testUsers: Array<string>;
  /**
   * The URL of this resource.
   */
  url: string;

  private get _proxy(): FlowTestUserContext {
    this._context =
      this._context ||
      new FlowTestUserContextImpl(this._version, this._solution.sid);
    return this._context;
  }

  /**
   * Fetch a FlowTestUserInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlowTestUserInstance
   */
  fetch(
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a FlowTestUserInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed FlowTestUserInstance
   */
  update(
    params: FlowTestUserContextUpdateOptions,
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: FlowTestUserInstance) => any
  ): Promise<FlowTestUserInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      testUsers: this.testUsers,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface FlowTestUserSolution {
  sid: string;
}

export interface FlowTestUserListInstance {
  _version: V2;
  _solution: FlowTestUserSolution;
  _uri: string;

  (): FlowTestUserContext;
  get(): FlowTestUserContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function FlowTestUserListInstance(
  version: V2,
  sid: string
): FlowTestUserListInstance {
  if (!isValidPathParam(sid)) {
    throw new Error("Parameter 'sid' is not valid.");
  }

  const instance = (() => instance.get()) as FlowTestUserListInstance;

  instance.get = function get(): FlowTestUserContext {
    return new FlowTestUserContextImpl(version, sid);
  };

  instance._version = version;
  instance._solution = { sid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
