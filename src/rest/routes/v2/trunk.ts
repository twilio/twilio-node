/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Routes
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../V2";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to update a TrunkInstance
 */
export interface TrunkContextUpdateOptions {
  /** The Inbound Processing Region used for this SIP Trunk for voice */
  voiceRegion?: string;
  /** A human readable description of this resource, up to 64 characters. */
  friendlyName?: string;
}

export interface TrunkContext {
  /**
   * Fetch a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TrunkInstance
   */
  fetch(
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance>;

  /**
   * Update a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TrunkInstance
   */
  update(
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance>;
  /**
   * Update a TrunkInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TrunkInstance
   */
  update(
    params: TrunkContextUpdateOptions,
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface TrunkContextSolution {
  sipTrunkDomain: string;
}

export class TrunkContextImpl implements TrunkContext {
  protected _solution: TrunkContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, sipTrunkDomain: string) {
    if (!isValidPathParam(sipTrunkDomain)) {
      throw new Error("Parameter 'sipTrunkDomain' is not valid.");
    }

    this._solution = { sipTrunkDomain };
    this._uri = `/Trunks/${sipTrunkDomain}`;
  }

  fetch(
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TrunkInstance(
          operationVersion,
          payload,
          instance._solution.sipTrunkDomain
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | TrunkContextUpdateOptions
      | ((error: Error | null, item?: TrunkInstance) => any),
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["voiceRegion"] !== undefined)
      data["VoiceRegion"] = params["voiceRegion"];
    if (params["friendlyName"] !== undefined)
      data["FriendlyName"] = params["friendlyName"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TrunkInstance(
          operationVersion,
          payload,
          instance._solution.sipTrunkDomain
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface TrunkPayload extends TrunkResource {}

interface TrunkResource {
  sip_trunk_domain: string;
  url: string;
  sid: string;
  account_sid: string;
  friendly_name: string;
  voice_region: string;
  date_created: Date;
  date_updated: Date;
}

export class TrunkInstance {
  protected _solution: TrunkContextSolution;
  protected _context?: TrunkContext;

  constructor(
    protected _version: V2,
    payload: TrunkResource,
    sipTrunkDomain?: string
  ) {
    this.sipTrunkDomain = payload.sip_trunk_domain;
    this.url = payload.url;
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.friendlyName = payload.friendly_name;
    this.voiceRegion = payload.voice_region;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);

    this._solution = { sipTrunkDomain: sipTrunkDomain || this.sipTrunkDomain };
  }

  /**
   * The absolute URL of the SIP Trunk
   */
  sipTrunkDomain: string;
  /**
   * The absolute URL of the resource.
   */
  url: string;
  /**
   * A 34 character string that uniquely identifies the Inbound Processing Region assignments for this SIP Trunk.
   */
  sid: string;
  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * A human readable description of the Inbound Processing Region assignments for this SIP Trunk, up to 64 characters.
   */
  friendlyName: string;
  /**
   * The Inbound Processing Region used for this SIP Trunk for voice.
   */
  voiceRegion: string;
  /**
   * The date that this SIP Trunk was assigned an Inbound Processing Region, given in ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * The date that the Inbound Processing Region was updated for this SIP Trunk, given in ISO 8601 format.
   */
  dateUpdated: Date;

  private get _proxy(): TrunkContext {
    this._context =
      this._context ||
      new TrunkContextImpl(this._version, this._solution.sipTrunkDomain);
    return this._context;
  }

  /**
   * Fetch a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TrunkInstance
   */
  fetch(
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a TrunkInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TrunkInstance
   */
  update(
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance>;
  /**
   * Update a TrunkInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TrunkInstance
   */
  update(
    params: TrunkContextUpdateOptions,
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: TrunkInstance) => any
  ): Promise<TrunkInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sipTrunkDomain: this.sipTrunkDomain,
      url: this.url,
      sid: this.sid,
      accountSid: this.accountSid,
      friendlyName: this.friendlyName,
      voiceRegion: this.voiceRegion,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface TrunkSolution {}

export interface TrunkListInstance {
  _version: V2;
  _solution: TrunkSolution;
  _uri: string;

  (sipTrunkDomain: string): TrunkContext;
  get(sipTrunkDomain: string): TrunkContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function TrunkListInstance(version: V2): TrunkListInstance {
  const instance = ((sipTrunkDomain) =>
    instance.get(sipTrunkDomain)) as TrunkListInstance;

  instance.get = function get(sipTrunkDomain): TrunkContext {
    return new TrunkContextImpl(version, sipTrunkDomain);
  };

  instance._version = version;
  instance._solution = {};
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
