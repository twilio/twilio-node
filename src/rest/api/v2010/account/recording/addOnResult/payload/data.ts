/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2010 from "../../../../../V2010";
const deserialize = require("../../../../../../../base/deserialize");
const serialize = require("../../../../../../../base/serialize");
import { isValidPathParam } from "../../../../../../../base/utility";

export interface DataContext {
  /**
   * Fetch a DataInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed DataInstance
   */
  fetch(
    callback?: (error: Error | null, item?: DataInstance) => any
  ): Promise<DataInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface DataContextSolution {
  accountSid: string;
  referenceSid: string;
  addOnResultSid: string;
  payloadSid: string;
}

export class DataContextImpl implements DataContext {
  protected _solution: DataContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V2010,
    accountSid: string,
    referenceSid: string,
    addOnResultSid: string,
    payloadSid: string
  ) {
    if (!isValidPathParam(accountSid)) {
      throw new Error("Parameter 'accountSid' is not valid.");
    }

    if (!isValidPathParam(referenceSid)) {
      throw new Error("Parameter 'referenceSid' is not valid.");
    }

    if (!isValidPathParam(addOnResultSid)) {
      throw new Error("Parameter 'addOnResultSid' is not valid.");
    }

    if (!isValidPathParam(payloadSid)) {
      throw new Error("Parameter 'payloadSid' is not valid.");
    }

    this._solution = { accountSid, referenceSid, addOnResultSid, payloadSid };
    this._uri = `/Accounts/${accountSid}/Recordings/${referenceSid}/AddOnResults/${addOnResultSid}/Payloads/${payloadSid}/Data.json`;
  }

  fetch(
    callback?: (error: Error | null, item?: DataInstance) => any
  ): Promise<DataInstance> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new DataInstance(
          operationVersion,
          payload,
          instance._solution.accountSid,
          instance._solution.referenceSid,
          instance._solution.addOnResultSid,
          instance._solution.payloadSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface DataPayload extends DataResource {}

interface DataResource {
  redirect_to: string;
}

export class DataInstance {
  protected _solution: DataContextSolution;
  protected _context?: DataContext;

  constructor(
    protected _version: V2010,
    payload: DataResource,
    accountSid: string,
    referenceSid: string,
    addOnResultSid: string,
    payloadSid: string
  ) {
    this.redirectTo = payload.redirect_to;

    this._solution = { accountSid, referenceSid, addOnResultSid, payloadSid };
  }

  /**
   * The URL to redirect to to get the data returned by the AddOn that was previously stored.
   */
  redirectTo: string;

  private get _proxy(): DataContext {
    this._context =
      this._context ||
      new DataContextImpl(
        this._version,
        this._solution.accountSid,
        this._solution.referenceSid,
        this._solution.addOnResultSid,
        this._solution.payloadSid
      );
    return this._context;
  }

  /**
   * Fetch a DataInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed DataInstance
   */
  fetch(
    callback?: (error: Error | null, item?: DataInstance) => any
  ): Promise<DataInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      redirectTo: this.redirectTo,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface DataSolution {
  accountSid: string;
  referenceSid: string;
  addOnResultSid: string;
  payloadSid: string;
}

export interface DataListInstance {
  _version: V2010;
  _solution: DataSolution;
  _uri: string;

  (): DataContext;
  get(): DataContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function DataListInstance(
  version: V2010,
  accountSid: string,
  referenceSid: string,
  addOnResultSid: string,
  payloadSid: string
): DataListInstance {
  if (!isValidPathParam(accountSid)) {
    throw new Error("Parameter 'accountSid' is not valid.");
  }

  if (!isValidPathParam(referenceSid)) {
    throw new Error("Parameter 'referenceSid' is not valid.");
  }

  if (!isValidPathParam(addOnResultSid)) {
    throw new Error("Parameter 'addOnResultSid' is not valid.");
  }

  if (!isValidPathParam(payloadSid)) {
    throw new Error("Parameter 'payloadSid' is not valid.");
  }

  const instance = (() => instance.get()) as DataListInstance;

  instance.get = function get(): DataContext {
    return new DataContextImpl(
      version,
      accountSid,
      referenceSid,
      addOnResultSid,
      payloadSid
    );
  };

  instance._version = version;
  instance._solution = { accountSid, referenceSid, addOnResultSid, payloadSid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
