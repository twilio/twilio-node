/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2010 from "../../../V2010";
const deserialize = require("../../../../../base/deserialize");
const serialize = require("../../../../../base/serialize");
import { isValidPathParam } from "../../../../../base/utility";

/**
 * Options to pass to create a UserDefinedMessageSubscriptionInstance
 */
export interface UserDefinedMessageSubscriptionListInstanceCreateOptions {
  /** The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted). */
  callback: string;
  /** A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated. */
  idempotencyKey?: string;
  /** The HTTP method Twilio will use when requesting the above `Url`. Either `GET` or `POST`. Default is `POST`. */
  method?: string;
}

export interface UserDefinedMessageSubscriptionContext {
  /**
   * Remove a UserDefinedMessageSubscriptionInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface UserDefinedMessageSubscriptionContextSolution {
  accountSid: string;
  callSid: string;
  sid: string;
}

export class UserDefinedMessageSubscriptionContextImpl
  implements UserDefinedMessageSubscriptionContext
{
  protected _solution: UserDefinedMessageSubscriptionContextSolution;
  protected _uri: string;

  constructor(
    protected _version: V2010,
    accountSid: string,
    callSid: string,
    sid: string
  ) {
    if (!isValidPathParam(accountSid)) {
      throw new Error("Parameter 'accountSid' is not valid.");
    }

    if (!isValidPathParam(callSid)) {
      throw new Error("Parameter 'callSid' is not valid.");
    }

    if (!isValidPathParam(sid)) {
      throw new Error("Parameter 'sid' is not valid.");
    }

    this._solution = { accountSid, callSid, sid };
    this._uri = `/Accounts/${accountSid}/Calls/${callSid}/UserDefinedMessageSubscriptions/${sid}.json`;
  }

  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.remove({
        uri: instance._uri,
        method: "delete",
      });

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface UserDefinedMessageSubscriptionPayload
  extends UserDefinedMessageSubscriptionResource {}

interface UserDefinedMessageSubscriptionResource {
  account_sid: string;
  call_sid: string;
  sid: string;
  date_created: Date;
  uri: string;
}

export class UserDefinedMessageSubscriptionInstance {
  protected _solution: UserDefinedMessageSubscriptionContextSolution;
  protected _context?: UserDefinedMessageSubscriptionContext;

  constructor(
    protected _version: V2010,
    payload: UserDefinedMessageSubscriptionResource,
    accountSid: string,
    callSid: string,
    sid?: string
  ) {
    this.accountSid = payload.account_sid;
    this.callSid = payload.call_sid;
    this.sid = payload.sid;
    this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
    this.uri = payload.uri;

    this._solution = { accountSid, callSid, sid: sid || this.sid };
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
   */
  accountSid: string;
  /**
   * The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
   */
  callSid: string;
  /**
   * The SID that uniquely identifies this User Defined Message Subscription.
   */
  sid: string;
  /**
   * The date that this User Defined Message Subscription was created, given in RFC 2822 format.
   */
  dateCreated: Date;
  /**
   * The URI of the User Defined Message Subscription Resource, relative to `https://api.twilio.com`.
   */
  uri: string;

  private get _proxy(): UserDefinedMessageSubscriptionContext {
    this._context =
      this._context ||
      new UserDefinedMessageSubscriptionContextImpl(
        this._version,
        this._solution.accountSid,
        this._solution.callSid,
        this._solution.sid
      );
    return this._context;
  }

  /**
   * Remove a UserDefinedMessageSubscriptionInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed boolean
   */
  remove(
    callback?: (error: Error | null, item?: boolean) => any
  ): Promise<boolean> {
    return this._proxy.remove(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      accountSid: this.accountSid,
      callSid: this.callSid,
      sid: this.sid,
      dateCreated: this.dateCreated,
      uri: this.uri,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface UserDefinedMessageSubscriptionSolution {
  accountSid: string;
  callSid: string;
}

export interface UserDefinedMessageSubscriptionListInstance {
  _version: V2010;
  _solution: UserDefinedMessageSubscriptionSolution;
  _uri: string;

  (sid: string): UserDefinedMessageSubscriptionContext;
  get(sid: string): UserDefinedMessageSubscriptionContext;

  /**
   * Create a UserDefinedMessageSubscriptionInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed UserDefinedMessageSubscriptionInstance
   */
  create(
    params: UserDefinedMessageSubscriptionListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      item?: UserDefinedMessageSubscriptionInstance
    ) => any
  ): Promise<UserDefinedMessageSubscriptionInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function UserDefinedMessageSubscriptionListInstance(
  version: V2010,
  accountSid: string,
  callSid: string
): UserDefinedMessageSubscriptionListInstance {
  if (!isValidPathParam(accountSid)) {
    throw new Error("Parameter 'accountSid' is not valid.");
  }

  if (!isValidPathParam(callSid)) {
    throw new Error("Parameter 'callSid' is not valid.");
  }

  const instance = ((sid) =>
    instance.get(sid)) as UserDefinedMessageSubscriptionListInstance;

  instance.get = function get(sid): UserDefinedMessageSubscriptionContext {
    return new UserDefinedMessageSubscriptionContextImpl(
      version,
      accountSid,
      callSid,
      sid
    );
  };

  instance._version = version;
  instance._solution = { accountSid, callSid };
  instance._uri = `/Accounts/${accountSid}/Calls/${callSid}/UserDefinedMessageSubscriptions.json`;

  instance.create = function create(
    params: UserDefinedMessageSubscriptionListInstanceCreateOptions,
    callback?: (
      error: Error | null,
      items: UserDefinedMessageSubscriptionInstance
    ) => any
  ): Promise<UserDefinedMessageSubscriptionInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["callback"] === null || params["callback"] === undefined) {
      throw new Error("Required parameter \"params['callback']\" missing.");
    }

    let data: any = {};

    data["Callback"] = params["callback"];
    if (params["idempotencyKey"] !== undefined)
      data["IdempotencyKey"] = params["idempotencyKey"];
    if (params["method"] !== undefined) data["Method"] = params["method"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new UserDefinedMessageSubscriptionInstance(
          operationVersion,
          payload,
          instance._solution.accountSid,
          instance._solution.callSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
