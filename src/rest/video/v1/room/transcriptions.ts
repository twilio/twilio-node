/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import V1 from "../../V1";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * The status of the transcriptions resource.
 */
export type TranscriptionsStatus = "started" | "stopped" | "failed";

/**
 * Options to pass to update a TranscriptionsInstance
 */
export interface TranscriptionsContextUpdateOptions {
  /**  */
  status?: TranscriptionsStatus;
}

/**
 * Options to pass to create a TranscriptionsInstance
 */
export interface TranscriptionsListInstanceCreateOptions {
  /** A collection of properties that describe transcription behaviour. */
  configuration?: object;
}
/**
 * Options to pass to each
 */
export interface TranscriptionsListInstanceEachOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (
    item: TranscriptionsInstance,
    done: (err?: Error) => void
  ) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface TranscriptionsListInstanceOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface TranscriptionsListInstancePageOptions {
  /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
  pageSize?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
  /** PageToken provided by the API */
  pageToken?: string;
}

export interface TranscriptionsContext {
  /**
   * Fetch a TranscriptionsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;

  /**
   * Update a TranscriptionsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  update(
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;
  /**
   * Update a TranscriptionsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  update(
    params: TranscriptionsContextUpdateOptions,
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface TranscriptionsContextSolution {
  roomSid: string;
  ttid: string;
}

export class TranscriptionsContextImpl implements TranscriptionsContext {
  protected _solution: TranscriptionsContextSolution;
  protected _uri: string;

  constructor(protected _version: V1, roomSid: string, ttid: string) {
    if (!isValidPathParam(roomSid)) {
      throw new Error("Parameter 'roomSid' is not valid.");
    }

    if (!isValidPathParam(ttid)) {
      throw new Error("Parameter 'ttid' is not valid.");
    }

    this._solution = { roomSid, ttid };
    this._uri = `/Rooms/${roomSid}/Transcriptions/${ttid}`;
  }

  fetch(
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TranscriptionsInstance(
          operationVersion,
          payload,
          instance._solution.roomSid,
          instance._solution.ttid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  update(
    params?:
      | TranscriptionsContextUpdateOptions
      | ((error: Error | null, item?: TranscriptionsInstance) => any),
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["status"] !== undefined) data["Status"] = params["status"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TranscriptionsInstance(
          operationVersion,
          payload,
          instance._solution.roomSid,
          instance._solution.ttid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface TranscriptionsPayload extends TwilioResponsePayload {
  transcriptions: TranscriptionsResource[];
}

interface TranscriptionsResource {
  ttid: string;
  account_sid: string;
  room_sid: string;
  status: TranscriptionsStatus;
  date_created: Date;
  date_updated: Date;
  start_time: Date;
  end_time: Date;
  duration: number;
  url: string;
  configuration: Record<string, object>;
}

export class TranscriptionsInstance {
  protected _solution: TranscriptionsContextSolution;
  protected _context?: TranscriptionsContext;

  constructor(
    protected _version: V1,
    payload: TranscriptionsResource,
    roomSid: string,
    ttid?: string
  ) {
    this.ttid = payload.ttid;
    this.accountSid = payload.account_sid;
    this.roomSid = payload.room_sid;
    this.status = payload.status;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.startTime = deserialize.iso8601DateTime(payload.start_time);
    this.endTime = deserialize.iso8601DateTime(payload.end_time);
    this.duration = deserialize.integer(payload.duration);
    this.url = payload.url;
    this.configuration = payload.configuration;

    this._solution = { roomSid, ttid: ttid || this.ttid };
  }

  /**
   * The unique string that we created to identify the transcriptions resource.
   */
  ttid: string;
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource.
   */
  accountSid: string;
  /**
   * The SID of the transcriptions\'s room.
   */
  roomSid: string;
  status: TranscriptionsStatus;
  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateUpdated: Date;
  /**
   * The time of transcriptions connected to the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
   */
  startTime: Date;
  /**
   * The time when the transcriptions disconnected from the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
   */
  endTime: Date;
  /**
   * The duration in seconds that the transcriptions were `connected`. Populated only after the transcriptions is `stopped`.
   */
  duration: number;
  /**
   * The absolute URL of the resource.
   */
  url: string;
  /**
   * An JSON object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   */
  configuration: Record<string, object>;

  private get _proxy(): TranscriptionsContext {
    this._context =
      this._context ||
      new TranscriptionsContextImpl(
        this._version,
        this._solution.roomSid,
        this._solution.ttid
      );
    return this._context;
  }

  /**
   * Fetch a TranscriptionsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  fetch(
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance> {
    return this._proxy.fetch(callback);
  }

  /**
   * Update a TranscriptionsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  update(
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;
  /**
   * Update a TranscriptionsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  update(
    params: TranscriptionsContextUpdateOptions,
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;

  update(
    params?: any,
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance> {
    return this._proxy.update(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      ttid: this.ttid,
      accountSid: this.accountSid,
      roomSid: this.roomSid,
      status: this.status,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      startTime: this.startTime,
      endTime: this.endTime,
      duration: this.duration,
      url: this.url,
      configuration: this.configuration,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface TranscriptionsSolution {
  roomSid: string;
}

export interface TranscriptionsListInstance {
  _version: V1;
  _solution: TranscriptionsSolution;
  _uri: string;

  (ttid: string): TranscriptionsContext;
  get(ttid: string): TranscriptionsContext;

  /**
   * Create a TranscriptionsInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  create(
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;
  /**
   * Create a TranscriptionsInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed TranscriptionsInstance
   */
  create(
    params: TranscriptionsListInstanceCreateOptions,
    callback?: (error: Error | null, item?: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance>;

  /**
   * Streams TranscriptionsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { TranscriptionsListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(
    callback?: (
      item: TranscriptionsInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  each(
    params: TranscriptionsListInstanceEachOptions,
    callback?: (
      item: TranscriptionsInstance,
      done: (err?: Error) => void
    ) => void
  ): void;
  /**
   * Retrieve a single target page of TranscriptionsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: TranscriptionsPage) => any
  ): Promise<TranscriptionsPage>;
  /**
   * Lists TranscriptionsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { TranscriptionsListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(
    callback?: (error: Error | null, items: TranscriptionsInstance[]) => any
  ): Promise<TranscriptionsInstance[]>;
  list(
    params: TranscriptionsListInstanceOptions,
    callback?: (error: Error | null, items: TranscriptionsInstance[]) => any
  ): Promise<TranscriptionsInstance[]>;
  /**
   * Retrieve a single page of TranscriptionsInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { TranscriptionsListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(
    callback?: (error: Error | null, items: TranscriptionsPage) => any
  ): Promise<TranscriptionsPage>;
  page(
    params: TranscriptionsListInstancePageOptions,
    callback?: (error: Error | null, items: TranscriptionsPage) => any
  ): Promise<TranscriptionsPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function TranscriptionsListInstance(
  version: V1,
  roomSid: string
): TranscriptionsListInstance {
  if (!isValidPathParam(roomSid)) {
    throw new Error("Parameter 'roomSid' is not valid.");
  }

  const instance = ((ttid) => instance.get(ttid)) as TranscriptionsListInstance;

  instance.get = function get(ttid): TranscriptionsContext {
    return new TranscriptionsContextImpl(version, roomSid, ttid);
  };

  instance._version = version;
  instance._solution = { roomSid };
  instance._uri = `/Rooms/${roomSid}/Transcriptions`;

  instance.create = function create(
    params?:
      | TranscriptionsListInstanceCreateOptions
      | ((error: Error | null, items: TranscriptionsInstance) => any),
    callback?: (error: Error | null, items: TranscriptionsInstance) => any
  ): Promise<TranscriptionsInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["configuration"] !== undefined)
      data["Configuration"] = serialize.object(params["configuration"]);

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TranscriptionsInstance(
          operationVersion,
          payload,
          instance._solution.roomSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.page = function page(
    params?:
      | TranscriptionsListInstancePageOptions
      | ((error: Error | null, items: TranscriptionsPage) => any),
    callback?: (error: Error | null, items: TranscriptionsPage) => any
  ): Promise<TranscriptionsPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];

    if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
    if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;

    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.page({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new TranscriptionsPage(operationVersion, payload, instance._solution)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(
    targetUrl: string,
    callback?: (error: Error | null, items: TranscriptionsPage) => any
  ): Promise<TranscriptionsPage> {
    const operationPromise = instance._version._domain.twilio.request({
      method: "get",
      uri: targetUrl,
    });

    let pagePromise = operationPromise.then(
      (payload) =>
        new TranscriptionsPage(instance._version, payload, instance._solution)
    );
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

export class TranscriptionsPage extends Page<
  V1,
  TranscriptionsPayload,
  TranscriptionsResource,
  TranscriptionsInstance
> {
  /**
   * Initialize the TranscriptionsPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(
    version: V1,
    response: Response<string>,
    solution: TranscriptionsSolution
  ) {
    super(version, response, solution);
  }

  /**
   * Build an instance of TranscriptionsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TranscriptionsResource): TranscriptionsInstance {
    return new TranscriptionsInstance(
      this._version,
      payload,
      this._solution.roomSid
    );
  }

  [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
