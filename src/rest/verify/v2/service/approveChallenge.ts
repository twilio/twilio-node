/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../../V2";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

export class ApprovePasskeysChallengeRequest {
  /**
   * A [base64url](https://base64.guru/standards/base64url) encoded representation of `rawId`.
   */
  "id": string;
  /**
   * The globally unique identifier for this `PublicKeyCredential`.
   */
  "rawId": string;
  /**
   * A string that indicates the mechanism by which the WebAuthn implementation is attached to the authenticator at the time the associated `navigator.credentials.create()` or `navigator.credentials.get()` call completes.
   */
  "authenticatorAttachment": string;
  /**
   * The valid credential types supported by the API. The values of this enumeration are used for versioning the `AuthenticatorAssertion` and `AuthenticatorAttestation` structures according to the type of the authenticator.
   */
  "type"?: string;
  "response": ApprovePasskeysChallengeRequestResponse;
}

/**
 * The result of a WebAuthn authentication via a `navigator.credentials.get()` request, as specified in [AuthenticatorAttestationResponse](https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse).
 */
export class ApprovePasskeysChallengeRequestResponse {
  /**
   * The [authenticator data](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data) structure contains information from the authenticator about the processing of a credential creation or authentication request.
   */
  "authenticatorData": string;
  /**
   * This property contains the JSON-compatible serialization of the data passed from the browser to the authenticator in order to generate this credential.
   */
  "clientDataJSON": string;
  /**
   * An assertion signature over `authenticatorData` and `clientDataJSON`. The assertion signature is created with the private key of the key pair that was created during the originating `navigator.credentials.create()` call and verified using the public key of that same key pair.
   */
  "signature": string;
  /**
   * The user handle stored in the authenticator, specified as `user.id` in the options passed to the originating `navigator.credentials.create()` call. This property should contain a base64url-encoded entity SID.
   */
  "userHandle"?: string;
}

/**
 * Options to pass to update a ApproveChallengeInstance
 */
export interface ApproveChallengeListInstanceUpdateOptions {
  /**  */
  approvePasskeysChallengeRequest: ApprovePasskeysChallengeRequest;
}

export interface ApproveChallengeSolution {
  serviceSid: string;
}

export interface ApproveChallengeListInstance {
  _version: V2;
  _solution: ApproveChallengeSolution;
  _uri: string;

  /**
   * Update a ApproveChallengeInstance
   *
   * @param params - Body for request
   * @param headers - header params for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ApproveChallengeInstance
   */
  update(
    params: ApprovePasskeysChallengeRequest,
    headers?: any,
    callback?: (error: Error | null, item?: ApproveChallengeInstance) => any
  ): Promise<ApproveChallengeInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ApproveChallengeListInstance(
  version: V2,
  serviceSid: string
): ApproveChallengeListInstance {
  if (!isValidPathParam(serviceSid)) {
    throw new Error("Parameter 'serviceSid' is not valid.");
  }

  const instance = {} as ApproveChallengeListInstance;

  instance._version = version;
  instance._solution = { serviceSid };
  instance._uri = `/Services/${serviceSid}/Passkeys/ApproveChallenge`;

  instance.update = function update(
    params: ApprovePasskeysChallengeRequest,
    headers?: any,
    callback?: (error: Error | null, items: ApproveChallengeInstance) => any
  ): Promise<ApproveChallengeInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    let data: any = {};

    data = params;

    if (headers === null || headers === undefined) {
      headers = {};
    }

    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.update({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new ApproveChallengeInstance(
          operationVersion,
          payload,
          instance._solution.serviceSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface ApproveChallengePayload extends ApproveChallengeResource {}

interface ApproveChallengeResource {
  options: Record<string, object>;
  sid: string;
  account_sid: string;
  service_sid: string;
  entity_sid: string;
  identity: string;
  factor_sid: string;
  date_created: Date;
  date_updated: Date;
  date_responded: Date;
  expiration_date: Date;
  status: string;
  responded_reason: string;
  details: any;
  hidden_details: any;
  metadata: any;
  factor_type: string;
  url: string;
  links: Record<string, string>;
}

export class ApproveChallengeInstance {
  constructor(
    protected _version: V2,
    payload: ApproveChallengeResource,
    serviceSid: string
  ) {
    this.options = payload.options;
    this.sid = payload.sid;
    this.accountSid = payload.account_sid;
    this.serviceSid = payload.service_sid;
    this.entitySid = payload.entity_sid;
    this.identity = payload.identity;
    this.factorSid = payload.factor_sid;
    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    this.dateResponded = deserialize.iso8601DateTime(payload.date_responded);
    this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date);
    this.status = payload.status;
    this.respondedReason = payload.responded_reason;
    this.details = payload.details;
    this.hiddenDetails = payload.hidden_details;
    this.metadata = payload.metadata;
    this.factorType = payload.factor_type;
    this.url = payload.url;
    this.links = payload.links;
  }

  /**
   * An object that contains challenge options. Currently only used for `passkeys`.
   */
  options: Record<string, object>;
  /**
   * A 34 character string that uniquely identifies this Challenge.
   */
  sid: string;
  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * The unique SID identifier of the Service.
   */
  serviceSid: string;
  /**
   * The unique SID identifier of the Entity.
   */
  entitySid: string;
  /**
   * Customer unique identity for the Entity owner of the Challenge.
   */
  identity: string;
  /**
   * The unique SID identifier of the Factor.
   */
  factorSid: string;
  /**
   * The date that this Challenge was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateCreated: Date;
  /**
   * The date that this Challenge was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateUpdated: Date;
  /**
   * The date that this Challenge was responded, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dateResponded: Date;
  /**
   * The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  expirationDate: Date;
  /**
   * The Status of this Challenge. One of `pending`, `expired`, `approved` or `denied`.
   */
  status: string;
  /**
   * Reason for the Challenge to be in certain `status`. One of `none`, `not_needed` or `not_requested`.
   */
  respondedReason: string;
  /**
   * Details provided to give context about the Challenge.
   */
  details: any;
  /**
   * Details provided to give context about the Challenge.
   */
  hiddenDetails: any;
  /**
   * Custom metadata associated with the challenge.
   */
  metadata: any;
  /**
   * The Factor Type of this Challenge. Currently `push` and `totp` are supported.
   */
  factorType: string;
  /**
   * The URL of this resource.
   */
  url: string;
  /**
   * Contains a dictionary of URL links to nested resources of this Challenge.
   */
  links: Record<string, string>;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      options: this.options,
      sid: this.sid,
      accountSid: this.accountSid,
      serviceSid: this.serviceSid,
      entitySid: this.entitySid,
      identity: this.identity,
      factorSid: this.factorSid,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      dateResponded: this.dateResponded,
      expirationDate: this.expirationDate,
      status: this.status,
      respondedReason: this.respondedReason,
      details: this.details,
      hiddenDetails: this.hiddenDetails,
      metadata: this.metadata,
      factorType: this.factorType,
      url: this.url,
      links: this.links,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
