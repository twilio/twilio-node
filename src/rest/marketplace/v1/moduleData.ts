/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V1 from "../V1";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";

/**
 * Options to pass to create a ModuleDataInstance
 */
export interface ModuleDataListInstanceCreateOptions {
  /** A JSON object containing essential attributes that define a Listing. */
  moduleInfo?: string;
  /** A JSON object for providing Listing-specific configuration. Contains button setup, notification URL, and more. */
  configuration?: string;
}

export interface ModuleDataSolution {}

export interface ModuleDataListInstance {
  _version: V1;
  _solution: ModuleDataSolution;
  _uri: string;

  /**
   * Create a ModuleDataInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataInstance
   */
  create(
    callback?: (error: Error | null, item?: ModuleDataInstance) => any
  ): Promise<ModuleDataInstance>;
  /**
   * Create a ModuleDataInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataInstance
   */
  create(
    params: ModuleDataListInstanceCreateOptions,
    callback?: (error: Error | null, item?: ModuleDataInstance) => any
  ): Promise<ModuleDataInstance>;

  /**
   * Fetch a ModuleDataInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed ModuleDataInstance
   */
  fetch(
    callback?: (error: Error | null, item?: ModuleDataInstance) => any
  ): Promise<ModuleDataInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function ModuleDataListInstance(version: V1): ModuleDataListInstance {
  const instance = {} as ModuleDataListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/Listings`;

  instance.create = function create(
    params?:
      | ModuleDataListInstanceCreateOptions
      | ((error: Error | null, items: ModuleDataInstance) => any),
    callback?: (error: Error | null, items: ModuleDataInstance) => any
  ): Promise<ModuleDataInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["moduleInfo"] !== undefined)
      data["ModuleInfo"] = params["moduleInfo"];
    if (params["configuration"] !== undefined)
      data["Configuration"] = params["configuration"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ModuleDataInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.fetch = function fetch(
    callback?: (error: Error | null, items: ModuleDataInstance) => any
  ): Promise<ModuleDataInstance> {
    const headers: any = {};
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new ModuleDataInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface ModuleDataPayload extends ModuleDataResource {}

interface ModuleDataResource {
  url: string;
  sid: string;
  description: Record<string, object>;
  support: Record<string, object>;
  policies: Record<string, object>;
  module_info: Record<string, object>;
  documentation: Record<string, object>;
  configuration: Record<string, object>;
  pricing: Record<string, object>;
  listings: Array<Record<string, object>>;
}

export class ModuleDataInstance {
  constructor(protected _version: V1, payload: ModuleDataResource) {
    this.url = payload.url;
    this.sid = payload.sid;
    this.description = payload.description;
    this.support = payload.support;
    this.policies = payload.policies;
    this.moduleInfo = payload.module_info;
    this.documentation = payload.documentation;
    this.configuration = payload.configuration;
    this.pricing = payload.pricing;
    this.listings = payload.listings;
  }

  /**
   * URL to query the subresource.
   */
  url: string;
  /**
   * ModuleSid that identifies this Listing.
   */
  sid: string;
  /**
   * A JSON object describing the module and is displayed under the Description tab of the Module detail page. You can define the main body of the description, highlight key features or aspects of the module and if applicable, provide code samples for developers
   */
  description: Record<string, object>;
  /**
   * A JSON object containing information on how customers can obtain support for the module. Use this parameter to provide details such as contact information and support description.
   */
  support: Record<string, object>;
  /**
   * A JSON object describing the module\'s privacy and legal policies and is displayed under the Policies tab of the Module detail page. The maximum file size for Policies is 5MB
   */
  policies: Record<string, object>;
  /**
   * A JSON object containing essential attributes that define a module. This information is presented on the Module detail page in the Twilio Marketplace Catalog. You can pass the following attributes in the JSON object
   */
  moduleInfo: Record<string, object>;
  /**
   * A JSON object for providing comprehensive information, instructions, and resources related to the module
   */
  documentation: Record<string, object>;
  /**
   * A JSON object for providing listing specific configuration. Contains button setup, notification url, among others.
   */
  configuration: Record<string, object>;
  /**
   * A JSON object for providing Listing specific pricing information.
   */
  pricing: Record<string, object>;
  /**
   *
   */
  listings: Array<Record<string, object>>;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      url: this.url,
      sid: this.sid,
      description: this.description,
      support: this.support,
      policies: this.policies,
      moduleInfo: this.moduleInfo,
      documentation: this.documentation,
      configuration: this.configuration,
      pricing: this.pricing,
      listings: this.listings,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
